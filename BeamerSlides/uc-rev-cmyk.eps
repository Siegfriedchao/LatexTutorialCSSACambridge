%!PS-Adobe-3.1 EPSF-3.0%%Title: UC rev cmyk logo .eps%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: Binney Hare%%CreationDate: 6/5/08%%BoundingBox: 0 0 327 68%%HiResBoundingBox: 0 0 326.9444 67.4400%%CropBox: 0 0 326.9444 67.4400%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (UC rev cmyk logo .eps) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2007-07-23T14:45:11Z</xap:CreateDate>
  <xap:ModifyDate>2008-05-06T10:26:16Z</xap:ModifyDate>
  <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
  <xap:MetadataDate>2008-01-29T16:02:47Z</xap:MetadataDate>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>56</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAOAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AhvljUtdl0zSGvdZ1Bbe9&#xA;hT0BbXc3ruYkj9VAvqOqtRmdSy02pTcE85q+0csJTEDvE9eW91+gbH7i9XPDpo6f+6BnwwN3L+KA&#xA;s1xV9XLp5Jj+kdVa3uPR1XV7ueIzDlbXzgoIyQrPaszTsmxZ5l+FB+yxByj+Us9i5CINcx3/ANL6&#xA;b7o85d4bJaPCTG8UIcURzM6363xf2PW/yt0/y9rtpYWWqPe3GoSac9/Nci/1JA1L2a3UcknWL7Ea&#xA;7Dfuc6HSTMsYJ57/AHuo7e02PBq548YqA4a684xPV595+1Wb1dPuvLs97Y2kllLcz20t7fIWMN7N&#xA;bMym5l9UFljVgtDtU0G5zC12pljyAA0D5Xvv5eTsuyNLpjphkyY+ORymPOQ24Y9x7z3Hqkg1S7R4&#xA;/wDc7qlwkkbuFkvZbEylWHptFNMXjjjljJdTIGNRw6suav8AlHUkHkN+7irvsDckHbav53IFGLT4&#xA;pxmfBj6ZDe5+n4cXLz6fEPQvyHuL6b8yrqC7uNQkW20y4eODUpZDKjNLabtGzMoBVzxO/JaNtWg2&#xA;vZmpnlBMiJe7l1/B7jt5uJ2tpcWPFjnARBlKd8JkeXDV8XLr830Tm1dC7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXxf+Wt8unadpmpz2avYWKRvJqAkdZoXns1&#xA;hljhijdDJJOhjWMuCqkEj9srw/a+LxJygJeuX8NbGpWCSQaETd1ubH9G+71GIThijC+OWLHcaO54&#xA;RR7uX450bW15Bqem2lte6db6drWsXMs2n6xa2SmS3NuIJRclpSZ5UlNxIrXHq8lZaruCRiTxnHMm&#xA;MpTx44gSiZbSviHDt6QRwj0cNEGi4E4CMqBEoij1o8rH6Oj1L8uJ5Na/L/y/5V025t7DUYUttacy&#xA;RrN/o9trDSemIeSEVaCgbt7Hcdzov7ofH7y6/wBoyPzs6FbQ27vRFiH5ra7aeYvNWh6lpNsmoxXF&#xA;i8MdmkqhZhHcXkE6LKhoCVR+LLuGoVq1M1HbJAO8uEcI3516tj86vpXPZ3vYoj/JkiTwkZvSd9jw&#xA;x7kj/wARwG4hWbTLO+sPL2mD6+9xCbiMXFtCOcME1w00cUUjRRwKyrV5O7Dic5r8oaNTlGWXJ6aN&#xA;GpHmREAkizKj9Me424csHDHjJ9R5DkSN/V7rHeyz8i7WK2/NK8SAOllJos09hDLCts8NvPdW8qQG&#xA;JPgHAu260DV5dWOdR2FMyjK/q5SIPFZG13z38+XLo4PateBjFCxKe46/S+h83zoHYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+avIP5V/lvf6boVvqV/dQXlx5f&#xA;0jUZG9WJR6upKLf0lLwFRyf01VeXI8hmDPQQkSblv7v1PR4PaXLijEDHiJjERsxN0Bw8+LuVX8if&#xA;lW3lL9NvqV85jvDbC3aUM/ofpJrEyLGbcy8Srs/2aVJyA7MxjkT9n6mQ9psgjw+Fh4buuGXPl/OR&#xA;Fl561DyfeXWhaLpdlNHo82oWS3dxHJLdG3gkklhWSWMwj97IXBULRB8Xx9Mx5a4YJHGIkgcP2n1f&#xA;IEV3nbbmzzdn5dd/hWSeLF4neTEbena77t99vsQgh8v+di955hgTT1sZ9L0u2h00ejARqFxL63OJ&#xA;47gq0ZeTctxPU0y3EI6r1m4kbdPeGU9Vn7Lj+XlHFkjI8fqEj/R7xtttsndt+VX5WSeYptJTWLz6&#xA;vFa2lzFKtxF6bSXVy9oqV9D0i3qRRqoryqR7ZP8AkzH3n7P1Mf8ARVm4xPw8PEOXpl/xSZ/lJ5W8&#xA;s6T5lstR0KWeRL+x1mCX12BoLHULSGMgenCwLJ8R5D5Zk4NNHHdE7uq7Q7UlqRGJhCAjf0gjnXOy&#xA;e57LmQ6x2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvmfQvz&#xA;auZ/InlrysmjXMdzp0Glw/WrW8SFpJdMED8S8kDRqvMJyHOg5AE0ajajP2tHGSCPp8/f0q+h+R7n&#xA;qf8AQ/gGGOSefhJjGXDwWfULA+oX+OSex/nHeS+YJvMMflu8kFratZT2Md2skCASiVpvTS2ZyQ3W&#xA;QfD75Ue3IAgEDfl6q+8c/Ln5JHYOl2/wnmL/ALs/8Ug9H8kQea7iXzfqD3Gl6JrdwZLdojHMwurm&#xA;+WCJOSkOVM0h3aJeNAeR65fj04zyM5Cr8/eCOXkPfaNXrsugkdKDDLCFEcUb5gSsAk19XR2neZZ/&#xA;yhuZdP1LSnvL3V44pmJmjiVFilnSKixJdD3LF/DZciMv5b0iPPf6vh3eTfj0h7Th+Yz5hj9XAPST&#xA;04v523M+SFj/ADJkHlm28tHRtTUQXEV79d/SAa6YxXaXYR5Ut24j1ZEXiaEclWnxAGr+W4VdD5/s&#xA;8j8j3Fox9haSUSfzFUa/u/1SLOfI/wCZJ82/mVDZT6RJo91pulagXglZy59W5sCeSvFCVp8J965n&#xA;6LWjOCRVd4N/jk6/tTszHpowljyeKJmQ+nhrh4fM/wA56xma6Z2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvkDWbMeXfNdxol1bTuNK1K4ayt7VA0k6ToiojMKl&#xA;FNskc1ERq1dSNwRyvammIyTIIHEBuelEm/M2a3IrY3zvrMMPF0sZjfbgl5GPKvfGv9k7W9D0q3k1&#xA;u7lnGpQ6XdvHLZzQgmrOouFt7tbuOVxbm5UO0iBftEoSHGajT6mchjiBwGcRuD7+HijwEDi4dqN8&#xA;t/pZwySJiAAOXu7rN7e88nq/5behqnk/QNE1+zf9BpAt8t9yEdsdRTVnEEKyh1dnMnHivHc0p8VM&#xA;7bQ/3Qrz+8uu9pifz0+KrqF1y+iPJgn5ralf6rq+mS6zBd2F5faXLbywCBHuAi31wYwYOaK6yCJB&#xA;TmPtVrUZq+1r8QEV6aO5ocyOe9c75Oz7KhfZ9+mxnOxIFjgjfcl15o1jJrHoxX7fWGd9L+rXFsL2&#xA;3ubyJQ7qzSSwyI7s0YldUIjan7wb5zGPUSGOzHb67EuExidugIIG/CL9Q/hacU+CJER1u+vw/H6W&#xA;df8AON+lx3Oravr0FsbazhgSzthUMOU5WaVNmk3X0o2pyagcfE32j2fZeKUYEyNk/o+X3D3Dk4vb&#xA;2qlMYsZr0QvboZb/ADrht71mzeedirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirzr80/ypXzV6WsaPcHTvM1ohSK5R3iE8dGAikeP4lI5txfegJBBB2x9TpoZo8Mg&#xA;D7xbm6LWHBLlxQP1R7/2jof7HzzcWuveWb630jV7KWwNgLqSFVBSeaYwtFBylFRLCBJ6LNE3GjEs&#xA;TvnN6zs+USSecuEb/TVgmvP+LfqKD1eIR1m+GXEeQhL6oi9qvmB3jkNzT2H8u7i11jydoPkkapJp&#xA;d9BbrrZuLRk9Yx2mrOSjLJG6BGaMb1r7Fag9DoTeIfH7y6X2njWvmO7g/wBxFhH5s+aodd1/RPMe&#xA;mzvEr2XppPYyBpERb65t5XidxH8YRWofh+dN81nasBOfCQDceR5HnV+V+933YWmGTs2ZIsxyEjeh&#xA;9MNz7h9loXyb+VnmHzg1m1hBLo3ly2M3papMSkskVyqpKU9Ip6zSxoq0jpCFqKs3Lm6Ts2RJll/i&#xA;qx/V3FA9xN2fVfdtWs13aWGMTVZMx6jaEa2FVXEf9j/WfS/lny3pPlvRbfR9Ki9K0twaE7u7seTy&#xA;O21WdjU/0zegACg8xOZkTKRslNMLF2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxVAa1oOja3ZGy1eyhvrWoYRToHCuOjoTuriuzLuO2JCQSDYY1aeUfMflm3W0&#xA;8o3dtNpqhlg03Vlcm3DsWJiuoR6rqGYsUlDMx/3YuRjARFDYNmbNPLLimTKR6nc9yva/lzpE2oRa&#xA;v5i9PXNXiQJFJLCkVrCAxcCC1XkoAcllaVpHB6PjwC7rdfHnweHZ4Luul99MtyTU7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/9k=</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>
  <xapMM:InstanceID>uuid:CAE06B9515D0DC1197B8ED467DAAFD03</xapMM:InstanceID>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:stDim='http://ns.adobe.com/xap/1.0/sType/Dimensions#'
  xmlns:xapG='http://ns.adobe.com/xap/1.0/g/'
  xmlns:xapTPg='http://ns.adobe.com/xap/1.0/t/pg/'>
  <xapTPg:MaxPageSize rdf:parseType='Resource'>
   <stDim:w>209.999994</stDim:w>
   <stDim:h>297.000002</stDim:h>
   <stDim:unit>Millimeters</stDim:unit>
  </xapTPg:MaxPageSize>
  <xapTPg:NPages>1</xapTPg:NPages>
  <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
  <xapTPg:HasVisibleOverprint>True</xapTPg:HasVisibleOverprint>
  <xapTPg:PlateNames>
   <rdf:Seq>
    <rdf:li>Black</rdf:li>
    <rdf:li>PANTONE 109 CV</rdf:li>
    <rdf:li>PANTONE Red 032 CV</rdf:li>
   </rdf:Seq>
  </xapTPg:PlateNames>
  <xapTPg:SwatchGroups>
   <rdf:Seq>
    <rdf:li rdf:parseType='Resource'>
     <xapG:groupName>Default Swatch Group</xapG:groupName>
     <xapG:groupType>0</xapG:groupType>
     <xapG:Colorants>
      <rdf:Seq>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>K=0</xapG:swatchName>
        <xapG:mode>GRAY</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:gray>0</xapG:gray>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>K=100</xapG:swatchName>
        <xapG:mode>GRAY</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:gray>255</xapG:gray>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>K=25</xapG:swatchName>
        <xapG:mode>GRAY</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:gray>63</xapG:gray>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>K=50</xapG:swatchName>
        <xapG:mode>GRAY</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:gray>127</xapG:gray>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>K=75</xapG:swatchName>
        <xapG:mode>GRAY</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:gray>191</xapG:gray>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>K=100</xapG:swatchName>
        <xapG:mode>GRAY</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:gray>255</xapG:gray>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=75 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>75.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=100 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>100.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=25 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=50 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=75 M=75 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>75.000000</xapG:cyan>
        <xapG:magenta>75.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=100 M=100 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>100.000000</xapG:cyan>
        <xapG:magenta>100.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=25 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=50 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=75 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>75.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=100 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>100.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=25 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=50 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=75 Y=75 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>75.000000</xapG:magenta>
        <xapG:yellow>75.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=100 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>100.000000</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=75 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>75.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=0 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=0 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=75 M=0 Y=75 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>75.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>75.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=100 M=0 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>100.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=13 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>12.500000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=25 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=75 M=38 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>75.000000</xapG:cyan>
        <xapG:magenta>37.500000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=100 M=50 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>100.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=13 M=25 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>12.500000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=50 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=38 M=75 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>37.500000</xapG:cyan>
        <xapG:magenta>75.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=100 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>100.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=25 Y=13 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>12.500000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=50 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=75 Y=38 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>75.000000</xapG:magenta>
        <xapG:yellow>37.500000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=100 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>100.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=13 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>12.500000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=25 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=38 Y=75 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>37.500000</xapG:magenta>
        <xapG:yellow>75.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=50 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=13 M=0 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>12.500000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=0 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=38 M=0 Y=75 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>37.500000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>75.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=0 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=0 Y=13 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>12.500000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=0 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=75 M=0 Y=38 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>75.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>37.500000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=100 M=0 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>100.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=13 Y=13 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>12.500000</xapG:magenta>
        <xapG:yellow>12.500000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=25 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=75 M=38 Y=38 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>75.000000</xapG:cyan>
        <xapG:magenta>37.500000</xapG:magenta>
        <xapG:yellow>37.500000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=100 M=50 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>100.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=25 Y=13 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>12.500000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=50 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=75 M=75 Y=38 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>75.000000</xapG:cyan>
        <xapG:magenta>75.000000</xapG:magenta>
        <xapG:yellow>37.500000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=100 M=100 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>100.000000</xapG:cyan>
        <xapG:magenta>100.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=13 M=25 Y=13 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>12.500000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>12.500000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=50 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=38 M=75 Y=38 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>37.500000</xapG:cyan>
        <xapG:magenta>75.000000</xapG:magenta>
        <xapG:yellow>37.500000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=100 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>100.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=13 M=25 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>12.500000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=50 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=38 M=75 Y=75 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>37.500000</xapG:cyan>
        <xapG:magenta>75.000000</xapG:magenta>
        <xapG:yellow>75.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=100 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>100.000000</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=13 M=13 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>12.500000</xapG:cyan>
        <xapG:magenta>12.500000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=25 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=38 M=38 Y=75 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>37.500000</xapG:cyan>
        <xapG:magenta>37.500000</xapG:magenta>
        <xapG:yellow>75.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=50 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=25 M=13 Y=25 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>25.000000</xapG:cyan>
        <xapG:magenta>12.500000</xapG:magenta>
        <xapG:yellow>25.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=25 Y=50 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>25.000000</xapG:magenta>
        <xapG:yellow>50.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=75 M=38 Y=75 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>75.000000</xapG:cyan>
        <xapG:magenta>37.500000</xapG:magenta>
        <xapG:yellow>75.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=100 M=50 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>100.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>PANTONE 109 CV</xapG:swatchName>
        <xapG:type>SPOT</xapG:type>
        <xapG:tint>100.000000</xapG:tint>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>8.500000</xapG:magenta>
        <xapG:yellow>94.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>PANTONE Red 032 CV</xapG:swatchName>
        <xapG:type>SPOT</xapG:type>
        <xapG:tint>100.000000</xapG:tint>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>91.000000</xapG:magenta>
        <xapG:yellow>87.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
      </rdf:Seq>
     </xapG:Colorants>
    </rdf:li>
   </rdf:Seq>
  </xapTPg:SwatchGroups>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -67.44 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 67.44 li326.945 67.44 li326.945 0 liclp[1 0 0 1 0 0 ] concat13.3487 1.1919 mo44.2461 1.1919 li45.6607 1.17432 li48.796 1.17432 li50.2994 1.17432 52.7779 1.10303 56.2696 0.956544 cv57.5743 0.902344 li57.3834 3.61182 57.3453 4.67725 57.337 6.11475 cv57.3204 10.2652 li57.3028 14.2012 li57.3028 15.3082 li57.3028 36.1797 li57.3028 50.0206 54.17 54.7183 39.2427 62.0923 cv38.5806 62.4166 30.9717 66.2154 30.1744 66.6426 cv29.4312 67.0435 li28.6685 67.44 li27.9083 67.0435 li27.1456 66.6426 li24.0084 64.9991 20.8233 63.5528 18.3506 62.3389 cv4.67237 55.6299 0.291993 50.8663 0.291993 36.1797 cv0.291993 15.3082 li0.291993 14.2012 li0.25586 10.2652 li0.236817 6.11475 li0.226563 3.60645 0.198731 2.792 0 0.902344 cv1.30713 0.956544 li4.74317 1.1001 7.30372 1.17432 8.7959 1.17432 cv11.9156 1.17432 li13.3487 1.1919 lifalse sop/0 [/DeviceCMYK] add_csa0 0 0 1 cmykf28.6675 66.0972 mo34.5484 63.2105 li34.6958 63.1558 li34.6587 63.0274 li34.6587 35.9751 li34.6055 35.8077 li34.7886 35.8438 li56.0728 35.8438 li56.2549 35.9014 li56.1988 35.6612 li56.1988 24.1929 li56.2549 24.0093 li56.0728 24.0645 li34.7886 24.0645 li34.6055 24.1006 li34.6587 23.9175 li34.6587 2.39649 li34.6958 2.21143 li34.5318 2.26758 li22.8799 2.26758 li22.6963 2.21143 li22.75 2.39649 li22.75 23.9175 li22.7872 24.1006 li22.6216 24.0645 li1.50391 24.0645 li1.31983 24.0093 li1.37647 24.1929 li1.37647 35.772 li1.31983 35.9014 li1.50391 35.8438 li22.6216 35.8438 li22.7872 35.8077 li22.75 36.0274 li22.75 62.9727 li22.6963 63.1934 li22.8418 63.2305 li28.6675 66.0972 li0 0 0 0 cmykf1.5962 2.26758 mo1.31983 2.21143 li1.37647 2.41407 li1.37647 23.9546 li1.31983 24.1187 li1.57715 24.0645 li22.6036 24.0645 li22.7872 24.1197 li22.75 23.9351 li22.75 2.3584 li22.7872 2.21143 li22.6036 2.26758 li1.5962 2.26758 li0 0.91 0.87 0 cmykf34.879 2.26758 mo34.6246 2.21143 li34.6587 2.41407 li34.6587 23.9546 li34.6246 24.1197 li34.8628 24.0645 li56.0538 24.0645 li56.2549 24.1187 li56.1988 23.9351 li56.1988 2.3584 li56.2549 2.21143 li56.0538 2.26758 li34.879 2.26758 lif22.6963 35.8458 mo1.44874 35.8458 li1.31983 35.7911 li1.37647 35.939 li1.37647 37.2232 li1.37647 49.0508 5.32422 54.8028 17.4742 60.6753 cv21.3165 62.5337 li22.6548 63.1587 li22.7662 63.2867 li22.7481 63.1036 li22.75 35.9571 li22.7872 35.7911 li22.6963 35.8458 lif34.7701 35.8458 mo34.6246 35.7911 li34.6587 35.9205 li34.6587 63.0274 li34.6246 63.2305 li34.7701 63.0655 li35.983 62.5118 li52.483 54.7476 56.1988 50.1202 56.1988 37.3335 cv56.1988 35.9751 li56.2549 35.7911 li56.0728 35.8438 li34.7701 35.8458 lif4.83106 25.1304 mo4.88868 25.1944 4.93311 25.2437 4.96045 25.2769 cv5.0293 25.3575 5.07764 25.4122 5.10547 25.4424 cv5.13038 25.4673 5.18653 25.5225 5.27149 25.6089 cv5.3042 25.6402 5.35401 25.689 5.41797 25.7544 cv5.36573 25.7959 5.33741 25.8194 5.32813 25.8282 cv5.14307 25.9937 li4.99659 26.1597 li4.94141 26.2144 li4.94141 26.3868 li4.94141 27.8755 5.32813 28.8887 6.15332 29.5601 cv6.30176 29.6792 li6.15332 29.7803 li5.98877 29.7613 li5.63868 29.7256 li5.32813 29.6705 li5.14405 29.6329 li4.96045 30.9561 li4.70166 30.9561 li4.51856 29.6329 li4.33594 29.6705 li4.17676 29.7027 4.07813 29.7208 4.042 29.7256 cv3.67334 29.7613 li3.50831 29.7803 li3.4292 29.7774 3.36768 29.752 3.36768 29.7227 cv3.36768 29.689 3.39991 29.6465 3.45215 29.605 cv3.72706 29.3931 li3.95655 29.2203 4.10401 29.0015 4.37159 28.4556 cv4.49073 28.212 4.55469 28.004 4.55469 27.8506 cv4.55762 27.4639 4.61475 27.1524 4.6836 27.1524 cv4.72071 26.4717 li4.73829 26.2144 li4.66504 26.1597 li4.51856 25.9937 li4.33594 25.8282 li4.26124 25.7544 li4.32764 25.689 4.37549 25.6402 4.4087 25.6089 cv4.66211 25.3565 4.6875 25.3277 4.83106 25.1304 cv0 0 0 1 cmykf11.7959 25.1304 mo11.9385 25.3277 11.9659 25.3565 12.2193 25.6089 cv12.251 25.6402 12.3013 25.689 12.3658 25.7544 cv12.293 25.8282 li12.1075 25.9937 li11.9615 26.1597 li11.8702 26.2144 li11.9073 26.4717 li11.9434 27.1524 li11.9971 28.127 12.5376 29.2525 13.1021 29.5601 cv13.1983 29.6114 13.2579 29.6578 13.2579 29.6792 cv13.2579 29.7291 13.2208 29.772 13.1753 29.772 cv12.9351 29.7613 li12.5875 29.7256 li12.275 29.6705 li12.0909 29.6329 li11.9073 30.9561 li11.668 30.9561 li11.4849 29.6329 li11.3003 29.6705 li10.9883 29.7256 li10.6397 29.7613 li10.4732 29.7803 li10.4483 29.7823 li10.375 29.7823 10.3238 29.7564 10.3238 29.7208 cv10.3238 29.6846 10.3521 29.6426 10.3995 29.605 cv10.6758 29.3931 li10.9141 29.2105 10.98 29.1143 11.3179 28.4556 cv11.4517 28.1978 11.5206 27.9918 11.5206 27.8506 cv11.5225 27.4639 11.5709 27.1524 11.6299 27.1524 cv11.668 26.4717 li11.6851 26.2144 li11.6622 26.1905 11.6426 26.1709 11.6299 26.1597 cv11.5367 26.0616 11.481 26.0074 11.4654 25.9937 cv11.2813 25.8282 li11.2076 25.7544 li11.2745 25.689 11.3209 25.6402 11.3545 25.6089 cv11.4429 25.5225 11.4981 25.4673 11.5206 25.4424 cv11.5503 25.4122 11.5992 25.3575 11.668 25.2769 cv11.6978 25.2437 11.7393 25.1944 11.7959 25.1304 cvf8.32374 29.2095 mo8.45215 29.3575 li8.58008 29.522 li8.61133 29.5621 8.66651 29.6172 8.74659 29.688 cv8.91065 29.8345 li8.81934 29.9087 li8.65381 30.0743 li8.48829 30.2212 li8.4336 30.2955 li8.43165 30.4659 li8.43165 31.9947 8.79688 32.9502 9.64698 33.6397 cv9.79395 33.7593 li9.64698 33.8599 li9.48047 33.8428 li9.13038 33.8042 li8.81934 33.751 li8.63624 33.7139 li8.45215 35.0357 li8.19434 35.0357 li8.01026 33.7139 li7.82618 33.751 li7.51465 33.8042 li7.16553 33.8428 li6.99952 33.8599 li6.98047 33.8604 li6.9087 33.8604 6.85352 33.8345 6.85352 33.8003 cv6.85352 33.7725 6.88672 33.73 6.94483 33.6861 cv7.21876 33.4751 li7.80665 33.0254 8.21241 31.7925 8.21241 30.4659 cv8.21241 30.2955 li8.15772 30.2212 li7.99317 30.0743 li7.82618 29.9087 li7.73487 29.8345 li8.01514 29.5914 8.15088 29.4468 8.32374 29.2095 cvf15.3072 29.2095 mo15.4786 29.4468 15.6158 29.5914 15.896 29.8345 cv15.8028 29.9087 li15.6382 30.0743 li15.4732 30.2212 li15.418 30.2955 li15.417 30.4659 li15.417 31.4644 15.7071 32.6661 16.042 33.0508 cv16.4102 33.4751 li16.44 33.5098 16.5064 33.5645 16.6109 33.6397 cv16.7774 33.7593 li16.6299 33.8599 li16.4644 33.8428 li16.1168 33.8042 li15.8028 33.751 li15.6187 33.7139 li15.4351 35.0357 li15.1778 35.0357 li14.9947 33.7139 li14.8101 33.751 li14.4976 33.8042 li14.149 33.8428 li13.9849 33.8599 li13.9629 33.8604 li13.8931 33.8604 13.837 33.8345 13.837 33.7984 cv13.837 33.7686 13.8677 33.7271 13.919 33.6861 cv14.1851 33.4751 li14.7637 33.0166 15.1973 31.7837 15.1973 30.4659 cv15.1963 30.2955 li15.1421 30.2212 li14.9766 30.0743 li14.8101 29.9087 li14.7198 29.8345 li14.793 29.772 14.8482 29.7208 14.8848 29.688 cv14.962 29.6182 15.0171 29.5621 15.0494 29.522 cv15.1778 29.3575 li15.3072 29.2095 lif18.7984 25.1304 mo18.9429 25.3277 18.9659 25.3565 19.2222 25.6089 cv19.2544 25.6402 19.3038 25.689 19.3682 25.7544 cv19.2955 25.8282 li19.1119 25.9937 li18.9639 26.1597 li18.8917 26.2144 li18.9097 26.4717 li18.9444 27.1524 li18.9966 28.1001 19.5557 29.2647 20.1045 29.5601 cv20.1988 29.6114 20.2593 29.6578 20.2593 29.6792 cv20.2593 29.7291 20.2271 29.772 20.1861 29.772 cv19.9561 29.7613 li19.5894 29.7256 li19.5118 29.7168 19.4078 29.6988 19.2769 29.6705 cv19.1119 29.6329 li18.9278 30.9561 li18.6714 30.9561 li18.4883 29.6329 li18.2945 29.6792 li17.9903 29.7256 li17.6402 29.7613 li17.4742 29.7803 li17.4517 29.7823 li17.3809 29.7823 17.3277 29.7564 17.3277 29.7256 cv17.3277 29.691 17.3584 29.6475 17.4117 29.605 cv17.6778 29.3931 li17.9219 29.2007 18.0005 29.0875 18.3218 28.4556 cv18.4537 28.1968 18.522 27.9903 18.523 27.8506 cv18.524 27.4639 18.5752 27.1524 18.6338 27.1524 cv18.6714 26.4717 li18.689 26.2144 li18.6338 26.1597 li18.4673 25.9937 li18.3873 25.9087 18.3311 25.855 18.3023 25.8282 cv18.2886 25.8145 18.2569 25.7901 18.211 25.7544 cv18.2774 25.689 18.3257 25.6402 18.3575 25.6089 cv18.4449 25.5225 18.501 25.4673 18.523 25.4424 cv18.5513 25.4122 18.6006 25.3575 18.6714 25.2769 cv18.6998 25.2437 18.7413 25.1944 18.7984 25.1304 cvf38.6309 25.0943 mo38.7579 25.2593 li38.8877 25.4068 li38.9737 25.5054 39.0284 25.5665 39.0528 25.5899 cv39.0875 25.6246 39.1426 25.6729 39.2183 25.7364 cv39.127 25.8101 li38.961 25.9756 li38.795 26.1226 li38.7403 26.1968 li38.7393 26.3555 li38.7393 27.8355 39.2349 29.1299 39.9532 29.522 cv40.063 29.584 40.1124 29.6329 40.1124 29.6827 cv40.1011 29.7061 li39.9532 29.7442 li39.7881 29.7442 li39.5718 29.7442 39.1895 29.6763 38.9419 29.5962 cv38.7579 30.92 li38.501 30.92 li38.3174 29.5962 li38.0586 29.6812 37.6812 29.7442 37.4703 29.7442 cv37.3057 29.7442 li37.1973 29.7442 37.1509 29.7256 37.1509 29.6812 cv37.1509 29.627 37.1973 29.5792 37.3057 29.522 cv38.0137 29.1553 38.5196 27.8326 38.5196 26.3555 cv38.5196 26.1968 li38.4634 26.1226 li38.2984 25.9756 li38.1338 25.8101 li38.0411 25.7364 li38.1163 25.6729 38.1719 25.6246 38.2076 25.5899 cv38.23 25.5665 38.2862 25.5054 38.3711 25.4068 cv38.501 25.2593 li38.6309 25.0943 lif45.6319 25.0943 mo45.7603 25.2593 li45.9078 25.4068 li46.0728 25.5899 li46.2208 25.7364 li46.129 25.8101 li45.9629 25.9756 li45.7984 26.1226 li45.7432 26.1968 li45.7422 26.3555 li45.7422 27.8179 46.2461 29.1353 46.9551 29.522 cv47.0674 29.584 47.1148 29.6329 47.1148 29.6827 cv47.1026 29.7061 li46.9551 29.7442 li46.7911 29.7442 li46.5733 29.7442 46.1905 29.6763 45.9444 29.5962 cv45.7603 30.92 li45.504 30.92 li45.3208 29.5962 li45.023 29.691 44.6968 29.7442 44.4039 29.7442 cv44.2017 29.7442 44.1602 29.731 44.1602 29.6714 cv44.1602 29.6153 44.2037 29.5772 44.3272 29.522 cv44.4761 29.4595 44.7413 29.1836 44.8975 28.9351 cv45.1885 28.4693 45.3555 28.0669 45.3565 27.8326 cv45.3575 27.4366 45.4136 27.1158 45.4844 27.1158 cv45.521 26.4351 li45.5406 26.1968 li45.5069 26.1626 45.4825 26.1402 45.4678 26.1226 cv45.2339 25.8892 45.2149 25.8721 45.044 25.7364 cv45.21 25.5899 li45.3746 25.4068 li45.521 25.2593 li45.6319 25.0943 lif42.1402 29.1734 mo42.1983 29.2403 42.2398 29.2876 42.2676 29.3218 cv42.3389 29.3995 42.3873 29.4546 42.4161 29.4864 cv42.4385 29.5098 42.4849 29.5752 42.5718 29.6597 cv42.605 29.6929 42.6641 29.732 42.7276 29.7989 cv42.6353 29.8726 li42.4712 30.0572 li42.3057 30.2027 li42.2496 30.2759 li42.2676 30.5142 li42.3057 31.1958 li42.3589 32.1998 42.8829 33.2842 43.4625 33.6036 cv43.5748 33.6622 43.6221 33.712 43.6221 33.7642 cv43.6099 33.7881 li43.4625 33.8228 li43.2979 33.8228 li43.0826 33.8228 42.7007 33.7569 42.4527 33.6773 cv42.2676 35.0005 li42.0123 35.0005 li41.8272 33.6773 li41.5811 33.7657 41.2149 33.8238 40.9068 33.8238 cv40.7178 33.8238 40.6739 33.8086 40.6739 33.7418 cv40.6739 33.69 40.7178 33.6539 40.8355 33.6036 cv40.9795 33.543 41.2584 33.253 41.4058 33.0147 cv41.7051 32.5245 41.8829 32.1148 41.8829 31.9131 cv41.8829 31.5166 41.9336 31.1958 41.9937 31.1958 cv42.0293 30.5142 li42.0479 30.2759 li41.9756 30.2027 li41.8272 30.0572 li41.6431 29.8726 li41.5708 29.7989 li41.6343 29.7339 41.6846 29.6846 41.7173 29.6514 cv41.9717 29.3985 41.9961 29.3702 42.1402 29.1734 cvf49.1978 29.1734 mo49.2549 29.2403 49.2974 29.2876 49.3257 29.3218 cv49.3956 29.3995 49.4458 29.4546 49.4742 29.4864 cv49.4961 29.5098 49.5518 29.5645 49.6397 29.6514 cv49.6714 29.6846 49.7198 29.732 49.7862 29.7989 cv49.753 29.8311 49.7286 29.8565 49.7125 29.8726 cv49.6089 29.9786 49.5484 30.0396 49.5289 30.0572 cv49.4297 30.1412 49.3746 30.1919 49.3614 30.2027 cv49.3526 30.2129 49.3345 30.2383 49.3072 30.2759 cv49.3257 30.5142 li49.3614 31.1958 li49.417 32.1998 49.9405 33.2842 50.5201 33.6036 cv50.6319 33.6622 50.6792 33.712 50.6792 33.7642 cv50.6675 33.7881 li50.5201 33.8228 li50.356 33.8228 li50.1397 33.8228 49.7584 33.7569 49.5088 33.6773 cv49.3257 35.0005 li49.0875 35.0005 li48.8853 33.6773 li48.6382 33.7657 48.2725 33.8238 47.9634 33.8238 cv47.7764 33.8238 47.731 33.8086 47.731 33.7418 cv47.731 33.69 47.7735 33.6539 47.8926 33.6036 cv48.0381 33.543 48.3165 33.253 48.4625 33.0147 cv48.7627 32.5245 48.939 32.1148 48.9419 31.9131 cv48.9419 31.5166 48.9898 31.1958 49.0518 31.1958 cv49.0875 30.5142 li49.1045 30.2759 li49.0323 30.2027 li48.8853 30.0572 li48.7027 29.8726 li48.628 29.7989 li48.6934 29.7339 48.7418 29.6846 48.775 29.6514 cv49.0289 29.3985 49.0562 29.3702 49.1978 29.1734 cvf52.69 25.0943 mo52.8165 25.2593 li52.9639 25.4068 li53.1314 25.5899 li53.2774 25.7364 li53.1871 25.8101 li53.0196 25.9756 li52.8541 26.1226 li52.8008 26.1968 li52.7999 26.3555 li52.7999 27.8189 53.3038 29.1353 54.0132 29.522 cv54.1236 29.584 54.1719 29.6329 54.1719 29.6827 cv54.1602 29.7061 li54.0132 29.7442 li53.8472 29.7442 li53.6314 29.7442 53.2496 29.6763 53.0015 29.5962 cv52.8165 30.92 li52.5611 30.92 li52.377 29.5962 li52.0792 29.691 51.7549 29.7442 51.461 29.7442 cv51.2588 29.7442 51.2178 29.731 51.2178 29.6714 cv51.2178 29.6153 51.2623 29.5772 51.3853 29.522 cv51.5328 29.4595 51.7994 29.1836 51.9542 28.9351 cv52.2466 28.4693 52.4141 28.0669 52.4141 27.8326 cv52.4156 27.4366 52.4722 27.1158 52.5425 27.1158 cv52.5792 26.4351 li52.5972 26.1968 li52.565 26.1636 52.5416 26.1402 52.524 26.1226 cv52.4434 26.0401 52.3951 25.9927 52.377 25.9756 cv52.1934 25.8101 li52.1207 25.7364 li52.2676 25.5899 li52.4317 25.4068 li52.5792 25.2593 li52.69 25.0943 lif25.4893 44.0796 mo25.6314 44.275 25.6563 44.3047 25.9117 44.5582 cv25.9444 44.5875 25.9927 44.6387 26.0586 44.7046 cv25.9839 44.7774 li25.8018 44.9419 li25.6543 45.1089 li25.5801 45.1812 li25.5992 45.4214 li25.6363 46.0997 li25.667 46.7027 25.9185 47.4756 26.2232 47.919 cv26.4273 48.2159 26.6495 48.4454 26.793 48.5064 cv26.9161 48.5611 26.9615 48.6016 26.9615 48.6573 cv26.9615 48.7173 26.9161 48.7305 26.7012 48.7305 cv26.4141 48.7305 26.0411 48.667 25.8018 48.5831 cv25.6168 49.9043 li25.3609 49.9043 li25.1778 48.5831 li24.9288 48.6622 24.5464 48.7286 24.3316 48.7286 cv24.167 48.7286 li24.0577 48.7286 24.0113 48.7105 24.0113 48.6651 cv24.0113 48.6119 24.0586 48.563 24.167 48.5064 cv24.3428 48.4166 24.5938 48.1583 24.7354 47.919 cv25.0596 47.3785 25.2134 47.023 25.2134 46.8155 cv25.2144 46.4219 25.2618 46.0997 25.3233 46.0997 cv25.3609 45.4214 li25.378 45.1812 li25.3233 45.1089 li25.1587 44.9419 li24.9932 44.7774 li24.9014 44.7046 li24.9668 44.6387 25.0152 44.5875 25.0459 44.5582 cv25.1348 44.4708 25.1905 44.4146 25.2134 44.3916 cv25.2408 44.3594 25.2916 44.3077 25.3609 44.2247 cv25.3892 44.1929 25.4307 44.1436 25.4893 44.0796 cvf32.0513 44.0796 mo32.1939 44.275 32.2193 44.3047 32.4722 44.5582 cv32.5049 44.5875 32.5547 44.6387 32.6207 44.7046 cv32.5464 44.7774 li32.3628 44.9419 li32.2149 45.1089 li32.1421 45.1812 li32.1607 45.4214 li32.1978 46.0997 li32.23 46.7027 32.4786 47.4737 32.7862 47.919 cv32.9878 48.2159 33.2095 48.4454 33.356 48.5064 cv33.4776 48.5611 33.523 48.6016 33.523 48.6573 cv33.523 48.7173 33.4776 48.7305 33.2623 48.7305 cv32.9751 48.7305 32.6011 48.667 32.3628 48.5831 cv32.1788 49.9043 li31.921 49.9043 li31.7378 48.5831 li31.4908 48.6622 31.107 48.7286 30.8916 48.7286 cv30.7261 48.7286 li30.6192 48.7286 30.5718 48.7105 30.5718 48.6651 cv30.5718 48.6119 30.6192 48.563 30.7261 48.5064 cv30.9029 48.4166 31.1534 48.1583 31.296 47.919 cv31.6197 47.3785 31.774 47.023 31.774 46.8155 cv31.7759 46.4219 31.8243 46.0997 31.8843 46.0997 cv31.921 45.4214 li31.9405 45.1812 li31.8843 45.1089 li31.7188 44.9419 li31.5538 44.7774 li31.4615 44.7046 li31.5274 44.6387 31.5762 44.5875 31.6089 44.5582 cv31.6978 44.4708 31.7525 44.4146 31.774 44.3916 cv31.8038 44.3594 31.8521 44.3077 31.921 44.2247 cv31.9512 44.1929 31.9937 44.1436 32.0513 44.0796 cvf28.7051 50.0337 mo28.7876 50.2276 li28.9634 50.3453 li29.128 50.5293 li29.2759 50.6763 li29.2017 50.751 li29.0186 50.9156 li29.002 50.9302 28.9512 50.9815 28.8702 51.0611 cv28.8545 51.0772 28.8287 51.1031 28.7974 51.1377 cv28.8155 51.3741 li28.8526 52.0557 li28.9068 53.0518 29.4659 54.2134 30.0103 54.4639 cv30.1353 54.5196 30.1763 54.5557 30.1763 54.606 cv30.1563 54.6456 li30.0284 54.7012 li29.8633 54.6827 li29.4952 54.6456 li29.4175 54.6382 29.3121 54.6211 29.1827 54.5918 cv29.0186 54.5557 li28.8155 55.8799 li28.5757 55.8799 li28.3936 54.5557 li28.209 54.5918 li27.8965 54.6456 li27.5464 54.6827 li27.3819 54.7012 li27.3628 54.7042 li27.2803 54.7042 27.23 54.67 27.23 54.6192 cv27.23 54.5645 27.272 54.5196 27.3819 54.4639 cv27.5626 54.3658 27.8082 54.1124 27.9517 53.876 cv28.2769 53.3321 28.4297 52.9781 28.4297 52.772 cv28.4297 52.377 28.4791 52.0557 28.5386 52.0557 cv28.5757 51.3741 li28.5958 51.1377 li28.5386 51.0611 li28.3746 50.9156 li28.209 50.751 li28.1163 50.6763 li28.2647 50.5293 li28.4297 50.3453 li28.5757 50.1978 li28.7051 50.0337 lif25.4517 56.0992 mo25.5801 56.2637 li25.7286 56.4097 li25.8941 56.5948 li26.0132 56.7691 li25.9483 56.8179 li25.7833 56.9795 li25.6168 57.128 li25.5626 57.2017 li25.5801 57.4405 li25.6168 58.1226 li25.6719 59.1255 26.1949 60.2124 26.7764 60.5274 cv26.8863 60.5884 26.9336 60.6377 26.9336 60.69 cv26.9219 60.7134 li26.7764 60.7491 li26.6119 60.7491 li26.4639 60.7491 26.1983 60.7085 25.7642 60.6207 cv25.5801 61.9258 li25.3233 61.9258 li25.1387 60.6207 li24.75 60.7085 24.459 60.7515 24.2178 60.7515 cv24.0289 60.7515 23.9854 60.7339 23.9854 60.667 cv23.9854 60.6158 24.0289 60.5777 24.147 60.5274 cv24.293 60.4654 24.5699 60.1788 24.7168 59.9405 cv25.0171 59.4483 25.1944 59.0411 25.1944 58.8389 cv25.1954 58.4415 25.2447 58.1226 25.3052 58.1226 cv25.3409 57.4405 li25.3609 57.2017 li25.3277 57.1695 25.3033 57.1451 25.2867 57.128 cv25.2061 57.0455 25.1568 56.9966 25.1387 56.9795 cv24.9561 56.8179 li24.8819 56.7413 li25.0293 56.5948 li25.1944 56.4097 li25.3409 56.2637 li25.4517 56.0992 lif32.0513 56.0992 mo32.1607 56.2637 li32.3077 56.4097 li32.4449 56.6231 li32.6207 56.7413 li32.5464 56.8179 li32.3628 56.9795 li32.3472 56.9966 32.2964 57.0455 32.2149 57.128 cv32.1988 57.1451 32.1749 57.1695 32.1421 57.2017 cv32.1607 57.4405 li32.1978 58.1226 li32.23 58.7217 32.4786 59.4947 32.7862 59.9405 cv32.9878 60.2359 33.2095 60.4634 33.356 60.5274 cv33.4776 60.5796 33.523 60.6241 33.523 60.6773 cv33.523 60.7369 33.4756 60.7491 33.2784 60.7491 cv33.0401 60.7491 32.7496 60.7085 32.3628 60.6207 cv32.1788 61.9258 li31.921 61.9258 li31.7378 60.6207 li31.3038 60.7085 31.0391 60.7491 30.8916 60.7491 cv30.7261 60.7491 li30.6192 60.7491 30.5718 60.73 30.5718 60.6851 cv30.5718 60.6329 30.6192 60.5826 30.7261 60.5274 cv30.9029 60.438 31.1534 60.1788 31.296 59.9405 cv31.6197 59.397 31.774 59.045 31.774 58.8389 cv31.7759 58.4415 31.8243 58.1226 31.8843 58.1226 cv31.921 57.4405 li31.9405 57.2017 li31.8843 57.128 li31.7188 56.9795 li31.5538 56.8179 li31.4615 56.7413 li31.6089 56.5948 li31.774 56.4097 li31.921 56.2637 li32.0513 56.0992 lif28.7051 38.0875 mo28.8155 38.2535 li28.9634 38.399 li29.128 38.5826 li29.2759 38.7295 li29.2017 38.8038 li29.0186 38.9688 li29.002 38.9864 28.9512 39.0352 28.8702 39.1172 cv28.8545 39.1334 28.8287 39.1568 28.7974 39.1905 cv28.8155 39.4297 li28.8526 40.1084 li28.9068 41.1016 29.4766 42.2901 30.0103 42.5171 cv30.1304 42.5674 30.1714 42.605 30.1714 42.6573 cv30.1714 42.7212 30.1241 42.7383 29.9395 42.7383 cv29.6978 42.7383 29.4083 42.6978 29.0186 42.607 cv28.8155 43.9312 li28.5757 43.9312 li28.3936 42.607 li27.9595 42.6978 27.6939 42.7383 27.5464 42.7383 cv27.3819 42.7383 li27.274 42.7383 27.2281 42.7193 27.2281 42.6744 cv27.2281 42.6197 27.275 42.5743 27.3819 42.5171 cv27.5586 42.4239 27.8082 42.1685 27.9517 41.9273 cv28.2754 41.3892 28.4297 41.0318 28.4297 40.8262 cv28.4297 40.4302 28.4791 40.1084 28.5386 40.1084 cv28.5757 39.4297 li28.5958 39.1905 li28.5386 39.1172 li28.3746 38.9688 li28.209 38.8038 li28.1163 38.7295 li28.2647 38.5826 li28.4297 38.399 li28.5757 38.2535 li28.7051 38.0875 lif25.397 4.54639 mo25.4537 4.60987 25.4971 4.65918 25.5259 4.69239 cv25.5943 4.77247 25.6446 4.82715 25.6734 4.85889 cv25.6963 4.88233 25.7515 4.93799 25.8384 5.02393 cv25.8711 5.05665 25.9195 5.1045 25.9839 5.17042 cv25.9117 5.24463 li25.7286 5.40967 li25.7125 5.42383 25.6563 5.47901 25.5626 5.5752 cv25.5499 5.58643 25.5318 5.60499 25.5074 5.63086 cv25.5259 5.8877 li25.5626 6.54883 li25.5982 7.18897 25.8824 8.07862 26.1509 8.38624 cv26.5181 8.80958 li26.5376 8.83106 26.6041 8.88624 26.7222 8.9751 cv26.8765 9.09376 li26.7222 9.19532 li26.5547 9.17676 li26.2061 9.13965 li25.8941 9.08594 li25.711 9.04834 li25.5074 10.3174 li25.2867 10.3726 li25.1036 9.04834 li24.9205 9.08594 li24.6065 9.13965 li24.2574 9.17676 li24.0645 9.19629 li23.9971 9.19629 23.9429 9.16895 23.9429 9.13721 cv23.9429 9.10352 23.9722 9.06104 24.0196 9.021 cv24.0347 9.00733 24.126 8.93653 24.294 8.80958 cv24.5318 8.6294 24.5987 8.53174 24.9371 7.87208 cv25.0699 7.61426 25.1387 7.40772 25.1387 7.26514 cv25.1397 6.86817 25.1905 6.54883 25.2496 6.54883 cv25.2867 5.8877 li25.3052 5.63086 li25.2315 5.5752 li25.084 5.40967 li24.9014 5.24463 li24.8272 5.17042 li24.8936 5.1045 24.941 5.05665 24.9747 5.02393 cv25.2286 4.77198 25.2535 4.74415 25.397 4.54639 cvf32.0513 4.54639 mo32.1939 4.74415 32.2193 4.77198 32.4722 5.02393 cv32.5049 5.05665 32.5547 5.1045 32.6207 5.17042 cv32.5464 5.24463 li32.3628 5.40967 li32.2149 5.5752 li32.1421 5.63086 li32.1607 5.8877 li32.1978 6.54883 li32.251 7.52344 32.8018 8.67627 33.356 8.9751 cv33.4517 9.02637 33.5118 9.07325 33.5118 9.09376 cv33.5118 9.14502 33.4786 9.18653 33.438 9.18653 cv33.2085 9.17676 li32.8404 9.13965 li32.7623 9.13233 32.6583 9.11426 32.5284 9.08594 cv32.3628 9.04834 li32.1788 10.3726 li31.921 10.3726 li31.7378 9.04834 li31.5362 9.03028 li31.2413 9.13965 li30.8916 9.17676 li30.7261 9.19532 li30.7017 9.19727 li30.6334 9.19727 30.5787 9.17188 30.5787 9.13965 cv30.5787 9.10743 30.6084 9.06397 30.6626 9.021 cv30.9288 8.80958 li31.1739 8.61524 31.2535 8.50049 31.5713 7.87208 cv31.7046 7.61231 31.774 7.4043 31.774 7.26514 cv31.7769 6.86817 31.8262 6.54883 31.8843 6.54883 cv31.921 5.8877 li31.9405 5.63086 li31.8843 5.5752 li31.7188 5.40967 li31.6373 5.3252 31.5821 5.27002 31.5538 5.24463 cv31.5391 5.22901 31.5069 5.20655 31.4615 5.17042 cv31.5274 5.1045 31.5762 5.05665 31.6089 5.02393 cv31.6978 4.93799 31.7525 4.88233 31.774 4.85889 cv31.8038 4.82715 31.8521 4.77247 31.921 4.69239 cv31.9512 4.65918 31.9937 4.60987 32.0513 4.54639 cvf28.6675 10.2989 mo28.7974 10.4454 li28.9444 10.6114 li29.0333 10.7095 29.0879 10.7715 29.1084 10.7945 cv29.1421 10.8287 29.1915 10.877 29.2569 10.9415 cv29.1636 11.0162 li28.9996 11.1807 li28.8345 11.3267 li28.7789 11.4014 li28.7974 11.6397 li28.8155 12.2647 li28.8702 13.2686 29.4112 14.4117 29.9913 14.7286 cv30.1036 14.7886 30.1514 14.837 30.1514 14.8873 cv30.1382 14.9117 li29.9913 14.9483 li29.8272 14.9483 li29.6114 14.9483 29.2286 14.8814 28.9805 14.8008 cv28.7974 16.1246 li28.5386 16.1246 li28.3565 14.8008 li28.1104 14.8907 27.7461 14.9493 27.4405 14.9493 cv27.2383 14.9493 27.1958 14.9366 27.1958 14.8755 cv27.1958 14.8204 27.2418 14.7808 27.3638 14.7286 cv27.5123 14.6631 27.7769 14.3892 27.9341 14.1397 cv28.2251 13.6734 28.3936 13.273 28.3936 13.0367 cv28.3941 12.6397 28.4517 12.3209 28.522 12.3209 cv28.5582 11.6397 li28.5757 11.4014 li28.5435 11.3687 28.5201 11.3443 28.503 11.3267 cv28.4234 11.2457 28.3726 11.1973 28.3565 11.1807 cv28.1714 11.0162 li28.0992 10.9415 li28.2457 10.7945 li28.4126 10.6114 li28.4971 10.5162 28.5464 10.46 28.5582 10.4454 cv28.5835 10.4136 28.6207 10.3648 28.6675 10.2989 cvf25.378 16.0323 mo25.5074 16.1797 li25.6363 16.3462 li25.6661 16.3848 25.7217 16.44 25.8018 16.5103 cv25.9678 16.6573 li25.9146 16.6978 25.8853 16.7212 25.875 16.731 cv25.711 16.897 li25.5445 17.0626 li25.4893 17.1177 li25.4893 17.2881 li25.4893 18.2574 25.7769 19.4708 26.0953 19.8199 cv26.4996 20.2964 li26.5035 20.2994 26.5708 20.3541 26.7022 20.462 cv26.8487 20.5811 li26.7022 20.6817 li26.5367 20.6631 li26.188 20.627 li25.875 20.5728 li25.6915 20.5347 li25.5074 21.8589 li25.2496 21.8589 li25.0674 20.5347 li24.8819 20.5728 li24.5699 20.627 li24.2208 20.6631 li24.0547 20.6817 li24.0308 20.6836 li23.962 20.6836 23.9063 20.6583 23.9063 20.625 cv23.9063 20.5938 23.938 20.5499 23.9903 20.5074 cv24.2574 20.2964 li24.8697 19.8101 25.2696 18.6236 25.2696 17.2881 cv25.2686 17.1177 li25.2134 17.0626 li25.0459 16.897 li24.9668 16.8111 24.9107 16.7564 24.8819 16.731 cv24.8668 16.7173 24.8355 16.6929 24.7911 16.6573 cv24.8648 16.5933 24.9195 16.544 24.9561 16.5103 cv25.0337 16.44 25.0904 16.3848 25.1216 16.3462 cv25.2496 16.1797 li25.378 16.0323 lif32.0132 16.0323 mo32.0713 16.0992 32.1128 16.1465 32.1421 16.1797 cv32.211 16.2598 32.2613 16.3145 32.2896 16.3462 cv32.3116 16.3687 32.3677 16.4239 32.4542 16.5103 cv32.4874 16.544 32.5362 16.5933 32.6011 16.6573 cv32.5499 16.6978 32.5176 16.7212 32.5088 16.731 cv32.3443 16.897 li32.1788 17.0626 li32.1231 17.1177 li32.1421 17.375 li32.1788 18.0542 li32.2339 19.0684 32.627 19.8843 33.3365 20.462 cv33.4825 20.5811 li33.3365 20.6817 li33.1714 20.6631 li32.8218 20.627 li32.5088 20.5728 li32.3248 20.5347 li32.1421 21.8589 li31.8843 21.8589 li31.6836 20.4805 li31.3462 20.5557 31.336 20.6158 31.2232 20.627 cv30.8555 20.6631 li30.6905 20.6817 li30.6705 20.6817 li30.6041 20.6817 30.5582 20.6583 30.5582 20.6226 cv30.5582 20.5879 30.5879 20.544 30.6334 20.5074 cv30.9097 20.2964 li31.1504 20.1138 31.2188 20.0137 31.5538 19.3599 cv31.6866 19.1016 31.7554 18.8936 31.7564 18.752 cv31.7564 18.3672 31.8077 18.0542 31.8668 18.0542 cv31.9024 17.375 li31.921 17.1177 li31.8482 17.0626 li31.7007 16.897 li31.5176 16.731 li31.4444 16.6573 li31.5079 16.5933 31.5577 16.544 31.5909 16.5103 cv31.8462 16.2579 31.8707 16.23 32.0132 16.0323 cvf18.2481 13.0728 mo18.3218 13.3497 li18.3873 13.5977 18.4371 13.794 18.4673 13.9376 cv18.6998 14.9859 18.896 15.2623 19.4043 15.2623 cv19.6963 15.2623 19.9395 15.1001 20.0118 14.856 cv20.1226 14.4878 li20.147 14.4039 20.211 14.3545 20.2969 14.3545 cv20.4976 14.3545 20.5909 14.5616 20.5997 15.022 cv20.6045 15.1539 20.646 15.4542 20.7291 15.9229 cv20.7764 16.1988 20.8028 16.4673 20.8028 16.7251 cv20.8028 16.9595 20.7837 17.0582 20.6924 17.3018 cv20.7559 17.6612 20.8028 18.147 20.8028 18.4258 cv20.8028 18.8809 20.7193 19.3033 20.5811 19.525 cv20.6592 19.8301 20.6753 19.9502 20.6753 20.2168 cv20.6753 20.4126 20.6543 20.625 20.6187 20.8301 cv20.5381 21.272 20.5215 21.3843 20.5215 21.4649 cv20.5215 21.5479 20.5352 21.6319 20.564 21.7115 cv20.5997 21.8174 20.6187 21.8921 20.6187 21.9312 cv20.6187 21.9834 20.5938 22.0245 20.564 22.0245 cv20.1958 21.878 li19.792 21.6573 li19.6597 21.5855 19.5694 21.5137 19.3682 21.3257 cv19.0113 21.648 18.9068 21.6954 17.9717 21.9498 cv17.7857 22.0015 17.6485 22.0577 17.5674 22.1163 cv17.4517 22.2002 17.3663 22.2447 17.3228 22.2447 cv17.1656 22.2447 17.0879 21.9908 17.0879 21.4654 cv17.0879 21.0772 17.129 20.7134 17.2007 20.4429 cv16.9263 20.336 16.6929 20.2779 16.544 20.2779 cv16.5162 20.2779 16.4209 20.2896 16.2627 20.3155 cv16.1949 20.3204 li16.1412 20.3204 16.0953 20.2403 16.0953 20.1441 cv16.0953 20.0723 16.1446 19.8951 16.2076 19.7447 cv16.3907 19.3047 li16.4585 19.1441 16.6089 18.961 16.8331 18.771 cv17.0147 18.6153 17.1792 18.522 17.3101 18.4957 cv17.9717 18.3672 li18.3653 18.2906 18.5987 18.0826 18.5987 17.8096 cv18.5987 17.5459 18.4205 17.3643 18.0279 17.2276 cv17.2364 16.9512 li17.0337 16.8814 16.7935 16.7632 16.5201 16.6016 cv16.0821 16.3433 16.0079 16.3086 15.9029 16.3086 cv15.7457 16.3086 15.6543 16.4268 15.6543 16.6338 cv15.6543 16.9615 15.8663 17.191 16.168 17.191 cv16.233 17.191 16.295 17.1792 16.355 17.1534 cv16.4429 17.1177 16.5064 17.0982 16.544 17.0982 cv16.626 17.0982 16.6729 17.1465 16.6729 17.2369 cv16.667 17.3189 li16.6299 17.6319 li16.5997 17.8985 16.4263 18.2217 16.042 18.7349 cv15.8765 18.9551 li15.7291 19.5459 15.3609 20.084 14.8848 20.4068 cv14.7652 20.4874 14.6958 20.5367 14.6836 20.5538 cv14.6666 20.5718 14.6172 20.6578 14.5357 20.8116 cv14.4976 20.8804 14.375 21.0289 14.1685 21.252 cv14.0113 21.4209 13.8584 21.5626 13.7081 21.6749 cv13.503 21.8306 13.379 21.9419 13.3409 22.0064 cv13.1548 22.3189 li13.1231 22.3755 13.066 22.4112 13.0093 22.4112 cv12.8467 22.4112 12.6968 22.2408 12.6055 21.9498 cv12.5376 21.7354 12.4786 21.6749 12.3384 21.6749 cv12.2676 21.6749 12.1578 21.6934 12.0186 21.7305 cv11.7608 21.7671 li11.0982 21.7671 li10.7686 21.7671 10.3003 21.8521 10.0875 21.9498 cv10.002 21.9908 9.93653 22.0113 9.89844 22.0113 cv9.85108 22.0113 9.82471 21.9854 9.77393 21.8956 cv9.74268 21.8355 9.73389 21.8077 9.73389 21.7476 cv9.73389 21.4136 9.97315 20.7808 10.2911 20.2784 cv10.4898 19.96 10.5518 19.8863 10.7857 19.6895 cv10.7095 19.3775 10.5113 19.1358 10.271 19.066 cv9.9585 18.9732 li9.91553 18.961 9.88526 18.9249 9.88526 18.8829 cv9.88526 18.7876 10.0347 18.6583 10.3067 18.5137 cv10.667 18.3257 11.0289 18.2198 11.3179 18.2198 cv11.6226 18.2198 11.9175 18.3409 12.2549 18.6065 cv12.754 18.9957 12.8882 19.0669 13.1314 19.0669 cv13.525 19.0669 13.898 18.7076 13.898 18.3306 cv13.898 18.0777 13.7647 17.8086 13.4146 17.356 cv12.9009 16.6939 12.7476 16.3501 12.7476 15.8614 cv12.7476 15.5596 12.8409 15.1749 12.9546 15.004 cv13.1382 14.7286 li13.1773 14.6675 13.1993 14.606 13.1993 14.5513 cv13.1993 14.4292 13.0577 14.3394 12.8667 14.3394 cv12.5767 14.3394 12.0196 14.5474 11.5748 14.8194 cv11.3545 14.9556 11.2066 15.1124 11.2066 15.211 cv11.2066 15.2676 11.233 15.3233 11.2813 15.3526 cv11.4849 15.4815 li11.5079 15.4971 11.5235 15.5259 11.5235 15.5577 cv11.5235 15.5845 11.4932 15.6421 11.4478 15.7012 cv11.0811 16.1797 li10.8892 16.4268 10.5953 16.7339 10.3067 16.9893 cv10.211 17.0728 10.1504 17.1348 10.1236 17.1734 cv10.1226 17.1753 10.0723 17.2676 9.97803 17.4478 cv9.84766 17.6939 9.49756 18.0503 9.16797 18.2745 cv9.03272 18.3672 8.94629 18.4361 8.91065 18.4766 cv8.88526 18.5088 8.83497 18.5938 8.76221 18.7349 cv8.71582 18.8248 8.6377 18.9542 8.52588 19.1197 cv8.34473 19.3863 8.19727 19.5772 8.0835 19.6895 cv7.57032 20.2046 li7.41163 20.3628 7.27149 20.6709 7.05469 21.3443 cv6.92383 21.75 6.80811 21.9874 6.73829 21.9874 cv6.70948 21.9874 6.65772 21.9468 6.59522 21.878 cv6.23047 21.461 5.917 21.2139 5.75245 21.2139 cv5.71582 21.2139 5.64551 21.2466 5.54981 21.3067 cv5.41309 21.3921 5.24415 21.4542 5.05176 21.4913 cv4.37159 21.6197 li3.85938 21.7173 3.65723 21.8287 3.36231 22.1719 cv3.29053 22.253 3.23145 22.2994 3.20118 22.2994 cv3.14405 22.2994 3.10254 22.2085 3.10254 22.0855 cv3.12159 21.9151 li3.21387 21.4175 li3.31348 20.8882 3.43409 20.4918 3.58106 20.2217 cv3.89356 19.6539 li3.95362 19.542 3.98584 19.441 3.98584 19.3541 cv3.98584 18.9312 3.54834 18.5445 3.01026 18.4957 cv2.87647 18.4834 2.8252 18.4498 2.8252 18.375 cv2.8252 18.2813 2.97364 18.0977 3.17774 17.9439 cv3.54493 17.6651 4.02784 17.4664 4.33692 17.4664 cv4.52149 17.4664 4.80958 17.543 5.16211 17.6866 cv5.56544 17.8531 li5.71729 17.9131 5.85499 17.9458 5.97608 17.9458 cv6.4043 17.9458 6.81885 17.5572 7.33057 16.6758 cv7.56006 16.2808 7.66309 15.9918 7.66309 15.7334 cv7.66309 15.2676 7.44044 14.9849 7.07862 14.9849 cv6.80225 14.9849 6.50098 15.1172 6.28223 15.335 cv6.09717 15.5201 6.00147 15.7149 6.00147 15.9029 cv6.00684 16.107 li6.00879 16.1524 li6.00879 16.3243 5.95313 16.418 5.84815 16.418 cv5.6753 16.418 5.42286 16.1709 4.70166 15.2984 cv4.16456 14.6451 4.04493 14.3658 4.021 13.7159 cv3.39795 12.9205 3.24512 12.584 3.24512 12.0186 cv3.26905 11.6397 li2.8379 11.1211 2.71485 10.8389 2.71485 10.3599 cv2.71485 10.188 2.74512 10.086 2.84668 9.87598 cv2.62696 9.55469 2.55713 9.40918 2.49659 9.15967 cv2.40333 8.77295 li2.34278 8.50977 2.24415 8.28321 2.10987 8.09327 cv1.94239 7.8545 1.92627 7.82227 1.92627 7.74122 cv1.92627 7.52784 2.07374 7.44239 2.71778 7.28516 cv2.69239 7.1045 2.67969 6.96827 2.67969 6.87745 cv2.67969 6.76856 2.69239 6.66651 2.73682 6.43799 cv2.86329 5.75831 li2.91602 5.48389 2.94336 5.28711 2.94336 5.16846 cv2.94336 5.042 2.92188 4.95118 2.80909 4.58204 cv2.74512 4.37354 2.68946 4.22999 2.64502 4.16065 cv2.58497 4.06641 2.53174 3.9502 2.53174 3.90772 cv2.53174 3.84278 2.57862 3.80665 2.65967 3.80665 cv2.84131 3.80665 3.32325 4.09815 3.82032 4.51026 cv4.87549 5.38233 5.09327 5.73292 5.23584 6.78809 cv5.24708 6.87012 5.26416 6.99317 5.29053 7.15626 cv5.79688 7.52979 6.06202 7.97706 6.06202 8.45899 cv6.06202 8.83887 5.92383 9.28174 5.69434 9.63672 cv5.32813 10.2066 li5.21924 10.3746 5.16211 10.5855 5.16211 10.8155 cv5.16211 11.1617 5.26221 11.4771 5.51124 11.9161 cv5.79249 12.4112 6.03077 12.6143 6.33008 12.6143 cv6.81299 12.6143 7.23877 11.7706 7.23877 10.8126 cv7.23877 10.6846 li7.23438 10.3516 li7.23438 10.1661 7.24659 9.97999 7.27637 9.74756 cv7.30811 9.46094 7.32764 9.28418 7.33057 9.21338 cv7.34815 8.77295 li7.35499 8.48243 li7.35499 8.37891 7.30079 8.2754 7.16553 8.12989 cv6.76172 7.68848 li6.17627 7.05127 5.85401 6.45264 5.85401 6.00245 cv5.85401 5.44483 6.25684 5.02588 6.79444 5.02588 cv6.90137 5.02588 6.99805 5.04297 7.18311 5.09717 cv7.18311 4.97266 li7.18311 4.1626 7.34815 3.5625 7.57325 3.5625 cv7.66114 3.59083 li7.99317 3.88331 li8.396 4.1421 li8.50831 4.25147 li8.50831 4.02491 8.51856 4.00147 8.74659 3.73682 cv8.8003 3.67334 8.88624 3.55713 9.00342 3.38868 cv9.09571 3.25245 9.15772 3.16163 9.18702 3.11182 cv9.21436 3.06543 9.24415 3.01075 9.27881 2.94629 cv9.32764 2.85254 9.37598 2.81006 9.43213 2.81006 cv9.4834 2.81006 9.52344 2.87745 9.59034 3.07618 cv9.63526 3.20264 9.66309 3.23536 9.97803 3.51661 cv10.0875 3.61524 10.1622 3.69727 10.1978 3.75635 cv10.2286 3.80665 10.2764 3.92969 10.3443 4.12354 cv10.355 4.15577 10.375 4.20411 10.3995 4.27002 cv10.5372 4.09815 10.6036 4.03809 10.7686 3.93946 cv11.043 3.77344 li11.1465 3.71143 11.2193 3.67969 11.2486 3.67969 cv11.2706 3.67969 11.3052 3.72266 11.3375 3.79249 cv11.3663 3.85596 11.4161 3.9502 11.4849 4.06836 cv11.6792 4.40967 11.7452 4.57422 11.7452 4.73243 cv11.7413 4.91407 li11.7413 5.13331 li12.3438 5.32325 12.5718 5.63575 12.5718 6.28516 cv12.5718 6.75391 12.3252 7.29053 11.8516 7.8545 cv11.5367 8.2295 11.5 8.3042 11.5 8.5669 cv11.5 9.92774 12.4449 10.7144 14.1128 10.7383 cv15.3418 10.7579 li16.1363 10.7696 16.607 10.8467 17.3482 11.0894 cv18.2208 11.3726 18.4737 11.4385 18.7276 11.4385 cv18.8135 11.4385 18.896 11.4122 18.9639 11.3633 cv19.0333 11.316 19.0748 11.2559 19.0748 11.2012 cv19.0748 10.9424 18.6241 10.7364 17.1436 10.3165 cv14.1138 9.45801 12.8257 8.23829 12.8257 6.23047 cv12.8257 4.6792 14.1168 3.47657 15.7847 3.47657 cv16.3213 3.47657 17.1485 3.61915 17.6221 3.79249 cv18.3755 4.06836 li18.5137 4.11866 18.6465 4.14502 18.772 4.14502 cv19.0284 4.14502 19.1583 3.92969 19.1661 3.49854 cv19.1714 3.26612 19.2242 3.18506 19.3755 3.18506 cv19.5884 3.18506 19.9156 3.45215 20.2149 3.86622 cv20.5157 4.28614 20.7115 4.75635 20.7115 5.07227 cv20.7115 5.49024 20.5157 5.78126 20.0674 6.0337 cv19.6548 6.66163 19.147 6.95362 18.4644 6.95362 cv17.9332 6.95362 17.1792 6.65284 15.9327 5.94239 cv15.4971 5.69483 15.2735 5.61084 15.0459 5.61084 cv14.7217 5.61084 14.5079 5.80079 14.5079 6.08936 cv14.5079 6.35401 14.7134 6.52588 15.2535 6.71534 cv16.045 6.99122 16.2422 7.09961 16.5567 7.43165 cv17.4918 7.59327 17.9009 7.75586 18.4883 8.20411 cv20.0997 8.71485 21.1001 9.81446 21.1001 11.0777 cv21.1001 12.3023 20.271 13.1851 19.1177 13.1851 cv18.8414 13.1851 18.6744 13.1641 18.2481 13.0728 cvtrue sop0 0 0 1 cmykf52.5425 13.0728 mo52.6168 13.3497 li52.6827 13.5977 52.7315 13.794 52.7642 13.9376 cv52.9957 14.9859 53.1905 15.2623 53.7022 15.2623 cv53.9908 15.2623 54.2344 15.1001 54.3067 14.856 cv54.418 14.4878 li54.4429 14.4039 54.5064 14.3555 54.5928 14.3555 cv54.793 14.3555 54.8985 14.5748 54.9141 15.022 cv54.9195 15.1924 54.9576 15.4918 55.024 15.9229 cv55.0728 16.232 55.0972 16.5162 55.0972 16.7735 cv55.0972 16.9585 55.0748 17.0694 54.9869 17.3018 cv55.024 17.5225 li55.0845 17.8848 55.1021 18.024 55.1021 18.1944 cv55.1021 18.9834 55.064 19.2178 54.878 19.525 cv54.9527 19.8267 54.9737 19.9668 54.9737 20.1832 cv54.9737 20.3223 54.9546 20.5215 54.9141 20.8301 cv54.8394 21.3804 li54.8589 21.7115 li54.9063 21.8326 54.9322 21.9073 54.9322 21.9312 cv54.9322 21.9834 54.8985 22.0245 54.8589 22.0245 cv54.4913 21.878 li54.087 21.6573 li53.9566 21.5855 53.8653 21.5137 53.6646 21.3257 cv53.3096 21.6407 53.2579 21.6709 52.8374 21.7862 cv52.2256 21.9527 52.0015 22.0303 51.8809 22.1163 cv51.7632 22.2002 51.6739 22.2437 51.6285 22.2437 cv51.483 22.2437 51.3843 21.9683 51.3843 21.5635 cv51.3843 20.9742 51.4185 20.6719 51.5132 20.4429 cv51.1553 20.3233 50.9751 20.2779 50.8448 20.2779 cv50.7955 20.2779 50.7666 20.2813 50.5767 20.3155 cv50.4932 20.3233 li50.441 20.3233 50.4097 20.2554 50.4097 20.146 cv50.4097 19.9668 50.5357 19.6065 50.7051 19.3047 cv50.9361 18.8936 51.3126 18.5513 51.6065 18.4957 cv52.2676 18.3672 li52.6597 18.2906 52.8951 18.0826 52.8951 17.8086 cv52.8951 17.5459 52.7217 17.3692 52.3228 17.2276 cv51.5494 16.9512 li51.2901 16.8584 51.0455 16.7413 50.815 16.6016 cv50.6202 16.4839 50.4854 16.4043 50.4097 16.3638 cv50.3443 16.3272 50.275 16.3077 50.2105 16.3077 cv50.0469 16.3077 49.9478 16.4268 49.9478 16.6221 cv49.9478 16.9341 50.1895 17.1919 50.4805 17.1919 cv50.5479 17.1919 50.6114 17.1792 50.6675 17.1534 cv50.752 17.1177 50.8091 17.0982 50.837 17.0982 cv50.9205 17.0982 50.9815 17.1792 50.9815 17.294 cv50.9815 17.6202 50.7764 18.1861 50.5582 18.4585 cv50.336 18.7349 li50.1734 18.9551 li50.1104 19.4283 49.647 20.1055 49.1797 20.4068 cv49.0669 20.4791 48.9996 20.5274 48.9766 20.5538 cv48.9629 20.5718 48.9126 20.6578 48.8292 20.8116 cv48.792 20.8804 48.67 21.0289 48.4625 21.252 cv48.3077 21.419 48.1524 21.5626 48.0035 21.6749 cv47.7979 21.8306 47.6734 21.9419 47.6353 22.0064 cv47.4512 22.3189 li47.4146 22.3834 47.3672 22.4141 47.3086 22.4141 cv47.1431 22.4141 46.9918 22.2418 46.9009 21.9498 cv46.8331 21.7354 46.7735 21.6749 46.6343 21.6749 cv46.5626 21.6749 46.4546 21.6934 46.3121 21.7305 cv46.0552 21.7671 li45.4107 21.7671 li45.0635 21.7671 44.5977 21.8501 44.3829 21.9498 cv44.2989 21.9898 44.2344 22.0103 44.1919 22.0103 cv44.0992 22.0103 44.0484 21.9131 44.0484 21.7286 cv44.0484 21.1465 44.4971 20.2613 45.0806 19.6895 cv44.9947 19.3516 44.8169 19.126 44.5835 19.066 cv44.376 19.0103 44.2642 18.9786 44.253 18.9732 cv44.2198 18.9551 44.1978 18.9234 44.1978 18.8858 cv44.1978 18.7671 44.3287 18.6524 44.6202 18.5137 cv45.1421 18.2667 45.296 18.2198 45.586 18.2198 cv45.92 18.2198 46.2032 18.3321 46.5513 18.6065 cv47.0484 18.9952 47.1866 19.0674 47.4263 19.0674 cv47.8169 19.0674 48.1954 18.7085 48.1954 18.3321 cv48.1954 18.0767 48.0533 17.7955 47.7085 17.356 cv47.2208 16.731 47.0464 16.3233 47.0464 15.792 cv47.0464 15.4371 47.1177 15.2442 47.4332 14.7286 cv47.4825 14.646 47.5093 14.5787 47.5093 14.5328 cv47.5093 14.4322 47.3433 14.3394 47.1563 14.3394 cv46.961 14.3394 46.7178 14.4117 46.3853 14.5616 cv45.8311 14.816 45.504 15.0533 45.504 15.1968 cv45.504 15.2535 45.5386 15.313 45.5938 15.3526 cv45.7798 15.4815 li45.8028 15.4981 45.8194 15.5269 45.8194 15.5577 cv45.8194 15.5889 45.7837 15.6524 45.7432 15.7012 cv45.7061 15.7437 45.5826 15.9029 45.3746 16.1797 cv45.1172 16.522 44.8736 16.7784 44.6036 16.9893 cv44.5059 17.0645 44.4449 17.127 44.419 17.1734 cv44.2725 17.4478 li44.1495 17.6788 43.7867 18.0577 43.4825 18.2745 cv43.3443 18.3741 43.2564 18.4419 43.2242 18.4766 cv43.1876 18.5186 43.1324 18.6045 43.0601 18.7349 cv42.8697 19.0713 42.5748 19.4874 42.3804 19.6895 cv41.8829 20.2046 li41.7398 20.3521 41.5425 20.7764 41.3497 21.3443 cv41.1993 21.7886 41.1011 21.9874 41.0347 21.9874 cv41.003 21.9874 40.9507 21.9468 40.8912 21.878 cv40.5342 21.4693 40.2144 21.2149 40.0572 21.2149 cv40.0166 21.2149 39.9434 21.2476 39.8428 21.3067 cv39.7002 21.3941 39.5328 21.4542 39.3467 21.4913 cv38.6841 21.6197 li38.1319 21.7266 37.9122 21.8453 37.6563 22.1719 cv37.5914 22.252 37.5381 22.2994 37.5093 22.2994 cv37.4434 22.2994 37.3956 22.2046 37.3956 22.0757 cv37.417 21.9151 li37.4195 21.8965 37.4512 21.7315 37.5084 21.4175 cv37.6041 20.8956 37.7369 20.462 37.876 20.2217 cv38.2076 19.6539 li38.2671 19.5499 38.2984 19.4473 38.2984 19.356 cv38.2984 18.9322 37.9043 18.5889 37.3057 18.4957 cv37.1832 18.4766 37.1216 18.4302 37.1216 18.3614 cv37.1216 18.2774 37.2662 18.1148 37.4898 17.9439 cv37.8804 17.6495 38.3111 17.4664 38.6148 17.4664 cv38.8199 17.4664 39.0923 17.5381 39.4576 17.6866 cv39.8614 17.8531 li40.0118 17.9131 40.1514 17.9458 40.2701 17.9458 cv40.6973 17.9458 41.1138 17.5572 41.6255 16.6758 cv41.8575 16.2779 41.9551 15.9927 41.9551 15.7305 cv41.9551 15.2642 41.7398 14.9849 41.378 14.9849 cv41.0938 14.9849 40.8213 15.1055 40.5953 15.335 cv40.3965 15.5376 40.2906 15.7383 40.2906 15.919 cv40.3013 16.107 li40.3082 16.2046 li40.3082 16.3541 40.2598 16.418 40.1485 16.418 cv40.0108 16.418 39.8487 16.2847 39.5308 15.9048 cv39.4004 15.7466 39.2276 15.5445 39.0147 15.2984 cv38.4566 14.6451 38.3414 14.3819 38.3174 13.7159 cv37.6934 12.9205 37.5411 12.4805 37.5411 12.0186 cv37.563 11.6397 li37.1177 11.1031 37.0298 10.896 37.0298 10.3667 cv37.0298 10.1294 37.044 10.0674 37.1407 9.87598 cv36.9219 9.55469 36.8501 9.40918 36.793 9.15967 cv36.7002 8.77295 li36.6373 8.50977 36.5401 8.28516 36.4063 8.09327 cv36.2398 7.85694 36.2212 7.82032 36.2212 7.75196 cv36.2212 7.55909 36.4053 7.43653 36.8663 7.32081 cv37.0132 7.28516 li36.9878 7.1045 36.9742 6.96827 36.9742 6.87745 cv36.9742 6.76856 36.9878 6.66651 37.0298 6.43799 cv37.1592 5.75831 li37.2095 5.49219 37.2349 5.29004 37.2349 5.1543 cv37.2349 4.99756 37.2095 4.8711 37.1226 4.58204 cv37.0655 4.39502 37.0035 4.25147 36.9385 4.16065 cv36.8692 4.05713 36.8277 3.97266 36.8277 3.917 cv36.8277 3.85401 36.8921 3.80665 36.9742 3.80665 cv37.0186 3.80665 37.0972 3.83106 37.1592 3.86622 cv37.7793 4.20411 38.4576 4.74219 38.9419 5.28028 cv39.3584 5.74366 39.4903 6.12891 39.5845 7.15626 cv40.1485 7.5752 40.3599 7.95606 40.3599 8.54981 cv40.3599 8.90577 40.2437 9.24708 39.9893 9.63672 cv39.7657 9.98096 39.6436 10.1709 39.6216 10.2066 cv39.5132 10.3897 39.4556 10.6055 39.4556 10.8296 cv39.4556 11.1617 39.5567 11.4732 39.8062 11.9161 cv40.0801 12.4034 40.3272 12.6143 40.6202 12.6143 cv41.1001 12.6143 41.5376 11.7823 41.5376 10.8648 cv41.5328 10.6846 li41.5328 10.188 li41.5899 9.74756 li41.6255 9.21338 li41.6626 8.77295 li41.6749 8.52686 li41.6749 8.34571 41.6392 8.29346 41.0733 7.68848 cv40.4498 7.01954 40.1534 6.45557 40.1534 5.93555 cv40.1534 5.43995 40.5811 5.02588 41.0899 5.02588 cv41.1963 5.02588 41.292 5.04297 41.4781 5.09717 cv41.4781 4.87647 li41.4966 4.48975 li41.607 4.01221 li41.6949 3.63233 41.7364 3.56153 41.8668 3.56153 cv41.9551 3.59083 li42.2872 3.88331 li42.6919 4.1421 li42.8018 4.25147 li42.8272 4.02198 42.8492 3.97657 43.0401 3.73682 cv43.1373 3.61719 43.2222 3.50147 43.2979 3.38868 cv43.4825 3.11182 li43.5928 2.94629 li43.6656 2.8379 43.6973 2.80811 43.7457 2.80811 cv43.794 2.80811 43.8287 2.87208 43.8853 3.07618 cv43.9092 3.15967 43.9673 3.24317 44.0513 3.31446 cv44.2901 3.51661 li44.4849 3.68067 44.6143 3.9209 44.6939 4.27002 cv44.8399 4.08838 44.9112 4.02491 45.0626 3.93946 cv45.3565 3.77344 li45.4654 3.71192 45.5308 3.68067 45.5494 3.68067 cv45.5694 3.68067 45.6026 3.72364 45.6319 3.79249 cv45.6763 3.88819 45.7247 3.9795 45.7798 4.06836 cv46.0171 4.44825 46.0376 4.50245 46.0376 4.76026 cv46.0376 4.91407 li46.0376 5.13331 li46.6334 5.29834 46.8643 5.61963 46.8643 6.27881 cv46.8643 6.77344 46.6382 7.28418 46.1646 7.8545 cv45.8516 8.23145 45.7984 8.34864 45.7984 8.63233 cv45.7984 9.93067 46.7735 10.7144 48.4249 10.7383 cv49.6397 10.7579 li50.4302 10.7696 50.9136 10.8506 51.6412 11.0894 cv52.4937 11.3682 52.7701 11.4385 53.0284 11.4385 cv53.2154 11.4385 53.3707 11.3345 53.3707 11.2085 cv53.3707 10.9424 52.9258 10.7364 51.4405 10.3165 cv48.4141 9.46094 47.1216 8.23731 47.1216 6.23047 cv47.1216 4.67676 48.4161 3.47754 50.0923 3.47754 cv50.6207 3.47754 51.4468 3.6211 51.9175 3.79249 cv52.671 4.06836 li52.8077 4.11866 52.9424 4.14502 53.066 4.14502 cv53.3262 4.14502 53.4234 3.9834 53.4615 3.49854 cv53.48 3.28077 53.5469 3.18506 53.6856 3.18506 cv53.8785 3.18506 54.2554 3.48926 54.5274 3.86622 cv54.8062 4.25147 55.004 4.76612 55.004 5.09913 cv55.004 5.48926 54.8003 5.78711 54.3619 6.0337 cv53.9507 6.66163 53.4415 6.95362 52.7593 6.95362 cv52.2369 6.95362 51.3492 6.59913 50.2266 5.94239 cv49.7872 5.68506 49.5923 5.61084 49.3477 5.61084 cv49.0157 5.61084 48.8038 5.79786 48.8038 6.08936 cv48.8038 6.35499 49.0005 6.52051 49.5464 6.71534 cv50.4166 7.02344 50.6026 7.12696 50.8526 7.43165 cv51.7886 7.59327 52.1954 7.75586 52.7813 8.20411 cv54.46 8.7417 55.3931 9.77784 55.3931 11.1031 cv55.3931 12.3121 54.5728 13.1832 53.4346 13.1832 cv53.1334 13.1832 52.9742 13.1651 52.5425 13.0728 cvf18.5977 47.774 mo18.7584 48.1792 18.8126 48.375 18.8345 48.6363 cv18.8721 49.4083 li18.9009 50.1812 19.1583 50.5679 19.6441 50.5679 cv19.8208 50.5679 19.9664 50.521 20.0484 50.439 cv20.2525 50.2334 li20.3316 50.2125 li20.461 50.2125 20.5298 50.2964 20.5298 50.4517 cv20.5093 50.751 li20.4927 50.8863 20.5186 51.17 20.5811 51.5953 cv20.6187 51.8467 20.6382 52.0938 20.6382 52.336 cv20.6382 52.7295 20.6089 52.8775 20.4732 53.232 cv20.5997 53.5928 20.6734 54 20.6734 54.3414 cv20.6734 54.7393 20.607 55.0118 20.4522 55.2354 cv20.5264 55.5533 20.545 55.6797 20.545 55.8589 cv20.545 56.0425 20.5196 56.2754 20.4732 56.5591 cv20.4058 56.9415 20.3809 57.2393 20.4 57.4405 cv20.4 57.4874 li20.4 57.6031 20.3638 57.6617 20.2925 57.6617 cv20.2247 57.6617 20.1392 57.6065 20.0674 57.5142 cv19.9542 57.3697 19.8824 57.3179 19.7979 57.3179 cv19.6705 57.3179 19.6319 57.3853 19.4424 57.9385 cv19.3834 58.107 19.2344 58.337 19.0005 58.6182 cv18.8174 58.836 18.7056 59.0171 18.6714 59.15 cv18.6109 59.3707 18.5762 59.4986 18.5601 59.5347 cv18.5396 59.5855 18.4971 59.6216 18.4488 59.628 cv18.4249 59.6299 li18.125 59.6299 17.7764 58.9815 17.4205 57.7525 cv17.3208 57.4082 17.1919 57.2525 17.0049 57.2525 cv16.8716 57.2525 16.7364 57.3389 16.6866 57.4585 cv16.5738 57.7168 li16.5557 57.7613 16.5181 57.7916 16.4781 57.7916 cv16.3316 57.7916 16.1089 57.522 15.9693 57.1827 cv15.855 56.9039 15.7891 56.5967 15.7891 56.3404 cv15.7891 55.7637 16.2129 55.3326 17.4947 54.608 cv18.0513 54.2969 18.2676 53.898 18.2676 53.1749 cv18.2676 52.605 18.0958 52.2798 17.6045 51.9083 cv17.2178 51.6143 16.9927 51.503 16.7857 51.503 cv16.6109 51.503 16.4761 51.6192 16.4761 51.7662 cv16.4761 51.94 16.5738 52.0435 16.814 52.1299 cv17.0972 52.2295 17.2217 52.3306 17.2217 52.4566 cv17.2217 52.5708 17.1021 52.8243 16.9073 53.1226 cv16.6988 53.4385 16.607 53.5318 16.3174 53.7286 cv16.233 54.233 15.9927 54.5557 15.4351 54.9234 cv15.3243 55.2398 15.2623 55.3516 15.0684 55.6036 cv14.6836 56.0992 li14.5616 56.254 14.4253 56.5342 14.4068 56.6695 cv14.3668 56.9502 14.3409 57.0005 14.2315 57.0005 cv14.087 57.0005 13.7876 56.7413 13.4878 56.3565 cv13.3091 56.129 13.2681 56.021 13.2476 55.7491 cv13.0567 55.9009 12.9981 55.92 12.6231 55.9708 cv12.4014 56.002 12.2334 56.0445 12.1285 56.0992 cv11.8448 56.2496 11.7525 56.2896 11.7007 56.2896 cv11.6255 56.2896 11.6011 56.2496 11.5953 56.1163 cv11.5748 55.7134 li11.5748 55.1563 11.795 54.5093 12.1285 54.0762 cv11.8067 53.7979 11.4849 53.6285 11.2281 53.5992 cv11.1182 53.587 11.0904 53.5738 11.0904 53.5337 cv11.0904 53.4644 11.1617 53.3233 11.2637 53.1934 cv11.4004 53.021 11.5123 52.897 11.5953 52.8292 cv11.855 52.6031 12.3062 52.4405 12.6597 52.4405 cv12.899 52.4405 13.2505 52.5289 13.7081 52.6983 cv13.8716 52.7588 14.0201 52.7911 14.1465 52.7911 cv14.3487 52.7911 14.4625 52.6597 14.4625 52.4283 cv14.4625 52.0938 14.2979 51.5708 13.9292 50.7315 cv13.6768 50.1641 13.564 49.7823 13.564 49.5176 cv13.564 48.8824 13.8638 48.2198 14.2403 48.0289 cv14.0626 47.9405 13.9854 47.919 13.8311 47.919 cv13.6475 47.919 13.501 47.9654 13.2667 48.1026 cv12.9942 48.2613 12.8428 48.4029 12.8428 48.4957 cv12.8428 48.5323 12.897 48.5899 12.9922 48.6539 cv13.1343 48.753 13.1587 48.7935 13.1587 48.9268 cv13.1587 49.3804 12.7823 49.9874 12.2549 50.3834 cv12.1392 51.0274 11.8438 51.4156 11.2637 51.688 cv11.1866 52.0367 11.1377 52.1407 10.8599 52.5308 cv10.379 53.209 10.2662 53.42 10.1797 53.8018 cv10.1348 53.9966 10.0894 54.0811 10.0279 54.0811 cv9.94971 54.0811 9.78711 53.9585 9.61084 53.7637 cv9.45508 53.5972 9.35792 53.48 9.31641 53.4161 cv9.23731 53.2935 9.19629 53.1749 9.11377 52.8292 cv8.98194 52.8638 8.94483 52.8707 8.85157 52.8707 cv8.58008 52.8619 li8.39893 52.8599 li7.99415 52.8599 7.56788 52.9488 7.34815 53.0826 cv7.27051 53.1334 7.21485 53.1587 7.18946 53.1587 cv7.07129 53.1587 6.97413 52.9087 6.97413 52.6011 cv6.97413 51.9351 7.16016 51.3892 7.5879 50.7872 cv7.42969 50.6558 7.37794 50.6055 7.23877 50.4576 cv7.17823 50.3926 7.12891 50.3453 7.09327 50.3272 cv6.89063 50.2173 li6.81983 50.1812 6.7793 50.1343 6.7793 50.0982 cv6.7793 49.9996 7.04688 49.7442 7.36719 49.5367 cv7.72071 49.3091 8.00049 49.2056 8.25782 49.2056 cv8.55909 49.2056 8.71973 49.2813 9.09473 49.6109 cv9.35401 49.8375 9.5337 49.9415 9.66114 49.9415 cv9.74952 49.9415 9.84668 49.8809 9.92188 49.7754 cv9.98292 49.691 10.0162 49.5962 10.0162 49.501 cv10.0162 49.1504 9.59717 48.5567 9.13038 48.2505 cv8.78418 48.023 8.40528 47.9004 8.03663 47.9004 cv7.52491 47.9004 7.08448 48.1553 6.89063 48.563 cv6.6875 48.9864 li6.63868 49.0845 6.5796 49.1348 6.5127 49.1348 cv6.39356 49.1348 6.33204 49.0811 5.91602 48.5997 cv5.43799 48.0499 li5.29053 47.8794 5.19043 47.7168 5.14405 47.5689 cv5.10059 47.4341 5.06836 47.356 5.05176 47.3321 cv5.03418 47.3096 4.97266 47.2584 4.86817 47.1827 cv4.49756 46.9229 4.23194 46.4068 4.07813 45.6602 cv4.06543 45.6055 4.04883 45.525 4.021 45.4214 cv3.57276 44.8707 3.30274 44.1866 3.30274 43.5933 cv3.30274 43.5152 3.30958 43.4805 3.34229 43.3443 cv3.08106 43.0796 3.05127 43.0152 2.84668 42.3135 cv2.69874 41.813 2.60596 41.6006 2.42432 41.3575 cv2.37598 41.296 2.3501 41.2452 2.3501 41.2159 cv2.3501 41.1187 2.50391 41.0337 2.77295 40.9922 cv3.02393 40.9498 3.04053 40.9478 3.1421 40.9478 cv3.50831 40.9727 li3.48438 40.4678 li3.48438 40.1729 3.50831 39.981 3.58106 39.6319 cv3.61817 39.4566 3.63624 39.3282 3.63624 39.2476 cv3.63624 39.2154 3.62403 39.1104 3.59961 38.9332 cv3.58008 38.7969 3.5625 38.7032 3.54395 38.6568 cv3.5171 38.587 3.50538 38.5342 3.50538 38.501 cv3.50538 38.4415 3.54395 38.4117 3.61524 38.4117 cv3.66553 38.4117 3.74415 38.4376 3.85743 38.4922 cv4.17676 38.6485 4.44239 38.8086 4.64795 38.9688 cv5.2793 39.4644 5.7793 40.2286 5.7793 40.7012 cv5.76856 40.8438 li5.74317 41.0084 5.73194 41.0997 5.73194 41.1168 cv5.73194 41.1949 5.77637 41.2999 5.86036 41.4141 cv6.06202 41.6905 li6.24122 41.9341 6.35938 42.2188 6.35938 42.4102 cv6.35938 42.5811 6.32276 42.6573 6.0254 43.0865 cv5.80469 43.4073 5.7129 43.6475 5.7129 43.9083 cv5.7129 44.2413 5.84424 44.6578 6.08106 45.0718 cv6.29688 45.4517 6.54834 45.6626 6.78956 45.6626 cv7.19825 45.6626 7.37598 45.2969 7.44044 44.3179 cv7.47461 43.8057 7.52393 43.3482 7.5879 42.9205 cv7.60645 42.67 li7.60645 42.5567 7.57227 42.4898 7.42334 42.3135 cv6.8711 41.6724 li6.34424 41.0567 6.18555 40.7403 6.18555 40.3013 cv6.18555 39.795 6.52051 39.4439 7.00049 39.4439 cv7.21876 39.4659 li7.2168 39.3218 li7.2168 39.2056 7.24903 39.0386 7.31202 38.8233 cv7.42627 38.4278 7.57325 38.1246 7.64795 38.1246 cv7.67432 38.1246 7.73487 38.1563 7.82618 38.2154 cv7.85547 38.2349 7.96778 38.2784 8.15772 38.3453 cv8.26124 38.3799 8.33399 38.4175 8.52588 38.5303 cv8.61231 38.2115 8.67823 38.066 8.81934 37.8853 cv9.05616 37.5796 9.32666 37.3326 9.41993 37.3326 cv9.47852 37.3326 9.58594 37.4131 9.72022 37.5547 cv10.0684 37.9214 li10.1275 37.9839 10.1949 38.1011 10.271 38.271 cv10.3443 38.4376 li10.4429 38.3799 10.5157 38.3375 10.564 38.3082 cv10.7095 38.2217 10.8086 38.1666 10.8599 38.1426 cv11.0821 38.0376 11.2002 37.983 11.2076 37.9761 cv11.3042 37.9151 11.3682 37.8834 11.3985 37.8834 cv11.4595 37.8834 11.4942 37.9918 11.6299 38.6021 cv11.7247 39.0176 11.7383 39.106 11.7608 39.4102 cv12.3467 39.4922 12.6231 39.8287 12.6231 40.4595 cv12.6231 41.0533 12.3331 41.6402 11.7051 42.3135 cv11.5347 42.4966 11.4932 42.584 11.4932 42.7544 cv11.4932 44.3794 12.0582 44.8916 14.0938 45.1089 cv15.3448 45.2408 15.7164 45.3179 17.2188 45.7681 cv18.0088 46.0064 18.4634 46.1065 18.7564 46.1065 cv19.1006 46.1065 19.2974 45.9786 19.2974 45.7559 cv19.2974 45.4156 19.0494 45.3072 17.5875 44.9976 cv14.1812 44.2818 12.8428 43.1163 12.8428 40.8726 cv12.8428 39.2715 14.0425 38.0699 15.6412 38.0699 cv16.3443 38.0699 16.9747 38.2823 17.9717 38.8589 cv18.897 39.3956 19.087 39.4839 19.2999 39.4839 cv19.5459 39.4839 19.646 39.3282 19.646 38.9273 cv19.646 38.6719 19.7217 38.5474 19.8843 38.5474 cv20.0298 38.5474 20.2535 38.6968 20.4522 38.9332 cv20.7588 39.292 20.8765 39.4781 20.8765 39.9761 cv20.8765 40.6416 20.5225 41.0743 19.8292 41.2671 cv19.7544 41.3487 19.6993 41.4107 19.6626 41.4502 cv19.2857 41.8755 18.9532 42.0201 18.3506 42.0201 cv17.8272 42.0201 17.1714 41.8052 16.7232 41.4859 cv15.8394 40.8633 li15.4595 40.5923 15.1817 40.4766 14.9146 40.4766 cv14.5386 40.4766 14.314 40.7022 14.314 41.0787 cv14.314 41.4483 14.5567 41.7486 14.9571 41.8726 cv15.7852 42.1304 li16.0767 42.2203 16.2183 42.2823 16.5738 42.4615 cv16.7793 42.4297 16.8746 42.4219 16.9854 42.4219 cv17.5 42.4219 18.0552 42.5606 18.5416 42.8106 cv18.6958 42.8897 18.8067 42.9385 18.8721 42.9576 cv19.3311 43.0865 li20.375 43.3785 21.2281 44.546 21.2281 45.6836 cv21.2281 46.9859 20.3834 47.793 19.023 47.793 cv18.5977 47.774 lif50.5767 47.4966 mo50.8951 47.919 51.3477 48.1983 51.7168 48.1983 cv51.8311 48.1983 52.0279 48.167 52.211 48.1216 cv52.3126 48.0972 52.3931 48.0865 52.4566 48.0865 cv52.545 48.0865 52.5821 48.1177 52.5821 48.2027 cv52.5821 48.2662 52.5386 48.4219 52.4869 48.544 cv52.4288 48.6846 52.3931 48.7964 52.377 48.876 cv52.3042 49.2608 li52.1207 49.5943 li51.8628 49.8306 li51.7896 49.9043 li51.7896 50.0718 li51.7896 50.1534 li51.7896 50.6011 51.6558 50.8565 51.293 51.0997 cv51.2623 51.1182 51.2198 51.15 51.1631 51.1929 cv51.127 51.3379 li51.0464 51.6778 50.9834 51.8931 50.9439 51.9815 cv50.898 52.0782 50.7803 52.2515 50.5943 52.4947 cv50.3721 52.7862 50.2286 53.0245 50.1353 53.2486 cv50.0591 53.4327 50.003 53.4883 49.8819 53.4883 cv49.7002 53.4883 49.5225 53.2608 49.4932 52.9918 cv49.4498 53.0479 49.419 53.0845 49.4004 53.1036 cv49.1797 53.2486 li48.8292 53.4883 li48.6744 53.5943 48.5777 53.6685 48.5347 53.709 cv48.3345 53.9122 li48.2979 53.9483 48.2603 53.9668 48.2281 53.9668 cv48.1358 53.9668 48.0391 53.8101 47.9478 53.5064 cv47.7642 52.899 li47.7139 52.7383 47.6895 52.5376 47.6895 52.3072 cv47.6895 52.0025 47.7105 51.8931 47.8184 51.65 cv47.4512 51.69 47.3482 51.712 47.1573 51.7798 cv47.1006 51.8003 47.0308 51.8174 46.9966 51.8174 cv46.9366 51.8174 46.899 51.775 46.899 51.7032 cv46.899 51.6607 46.9346 51.5347 46.9722 51.4312 cv47.2129 50.8062 li47.3975 50.3204 47.9966 49.8809 48.4712 49.8809 cv48.5855 49.8809 48.7418 49.9146 48.9419 49.9791 cv49.0611 50.0166 49.1578 50.0376 49.2178 50.0376 cv49.4332 50.0376 49.6036 49.8809 49.6036 49.6871 cv49.6036 49.5904 49.5357 49.482 49.4556 49.4439 cv49.4249 49.4317 49.2037 49.3638 48.794 49.2437 cv48.4854 49.1524 48.3326 49.0381 47.9854 48.6363 cv47.732 48.3453 47.6353 48.2632 47.542 48.2632 cv47.4712 48.2632 47.4332 48.3077 47.4332 48.3931 cv47.4512 48.6363 li47.4581 48.7491 li47.4581 49.2588 47.3057 49.7476 46.9376 50.4175 cv46.4219 51.357 li46.1783 51.8023 46.0728 52.1377 46.0728 52.4781 cv46.0728 52.8502 46.2334 53.1749 46.441 53.232 cv46.7178 53.3062 li46.7505 53.3145 46.7823 53.3335 46.8067 53.358 cv46.8443 53.399 46.8643 53.4336 46.8643 53.4664 cv46.8643 53.5064 46.8321 53.5684 46.771 53.6353 cv46.7398 53.6739 46.6299 53.815 46.441 54.0601 cv46.1221 54.4732 45.9244 54.6211 45.5406 54.7393 cv45.3179 55.2789 44.9576 55.5909 44.3082 55.8057 cv44.2354 55.9351 li44.0157 56.3169 43.5313 56.6695 43.2212 56.6695 cv43.1504 56.6695 li43.1089 57.0059 42.8697 57.356 42.5079 57.6065 cv42.2574 57.7794 42.1158 57.8863 42.0865 57.917 cv42.0616 57.9424 42.0313 58 41.9937 58.0845 cv41.9102 58.2662 41.8345 58.3418 41.7315 58.3418 cv41.5347 58.3418 41.3721 58.1602 41.2584 57.8072 cv41.1832 57.8555 41.1285 57.8912 41.0918 57.917 cv40.8853 58.0655 40.7681 58.1451 40.7427 58.1582 cv40.6587 58.1988 40.4444 58.2593 40.1011 58.3399 cv39.65 58.4473 39.2598 58.6402 39.1626 58.8008 cv38.9976 59.0743 li38.9224 59.108 li38.8326 59.108 38.7286 58.9815 38.6841 58.8169 cv38.5811 58.4371 38.5176 58.0416 38.5176 57.7876 cv38.5176 57.1334 38.7354 56.7071 39.4024 56.0445 cv39.4004 55.8868 li39.4004 54.8707 40.1744 54.1827 41.314 54.1827 cv41.4966 54.1866 li42.1226 54.2242 li42.1797 54.2242 li42.5191 54.2242 42.8292 54.0982 43.169 53.8189 cv43.6172 53.4517 43.7486 53.2261 43.7486 52.8135 cv43.7486 52.6856 43.7125 52.5328 43.5728 52.0733 cv43.4825 51.771 43.438 51.4859 43.438 51.2085 cv43.438 50.4517 43.9947 49.5074 44.751 48.9864 cv44.9454 48.8511 45.0889 48.6739 45.0889 48.5679 cv45.0889 48.5274 45.0669 48.4918 45.0401 48.4918 cv44.9913 48.4918 44.9063 48.544 44.8057 48.6363 cv44.7173 48.7173 44.5689 48.8106 44.3633 48.9141 cv44.0694 49.0601 li43.7393 49.1876 li43.6377 49.2281 43.5884 49.2813 43.5884 49.3545 cv43.5884 49.3936 43.6011 49.4507 43.6299 49.5176 cv43.6524 49.5792 43.6656 49.6255 43.6656 49.6543 cv43.6656 49.6958 43.6338 49.7691 43.5728 49.8682 cv43.3165 50.2911 li43.0655 50.7042 42.8829 50.8799 42.5635 51.0274 cv42.3565 51.6294 42.0606 51.94 41.6255 51.9991 cv41.2798 52.7002 40.9737 52.9434 40.358 53.0103 cv40.273 53.2784 40.1255 53.5044 39.8062 53.8565 cv39.6744 53.9981 39.5972 54.1002 39.5684 54.1504 cv39.4244 54.4092 39.4112 54.4273 39.3448 54.4273 cv39.2598 54.4273 39.0669 54.3008 38.9244 54.1504 cv38.8589 54.0811 38.8028 54.0069 38.7579 53.9288 cv38.5928 53.6353 li38.5396 53.5406 38.4849 53.4981 38.4161 53.4981 cv38.2984 53.5064 li37.8946 53.5616 li37.6412 53.5972 37.2803 53.8047 37.1592 53.9859 cv36.9385 54.3155 li36.9166 54.3511 36.8834 54.3716 36.8501 54.3716 cv36.6856 54.3716 36.585 54.0069 36.585 53.4044 cv36.585 52.8775 36.6666 52.5269 36.8477 52.275 cv37.3619 51.5591 li37.4327 51.4581 37.4722 51.3609 37.4722 51.2789 cv37.4722 51.1993 37.44 51.1153 37.3809 51.0445 cv37.272 50.9156 37.167 50.8355 37.0865 50.8248 cv36.7002 50.7676 li36.6304 50.7598 36.6041 50.7427 36.6041 50.711 cv36.6041 50.6792 36.6246 50.6348 36.6641 50.5835 cv36.7911 50.4263 36.9458 50.2881 37.1226 50.1812 cv37.5777 49.9024 37.876 49.793 38.1841 49.793 cv38.4942 49.793 38.8335 49.9043 39.1446 50.1065 cv39.6773 50.4576 li39.7525 50.5059 39.8418 50.5293 39.9341 50.5293 cv40.1812 50.5293 40.3653 50.3853 40.5411 50.0499 cv40.709 49.7305 40.7837 49.4712 40.7837 49.2007 cv40.7837 48.5084 40.2896 48.0127 39.6045 48.0127 cv39.2852 48.0127 38.9605 48.1368 38.6495 48.3799 cv38.5547 48.4542 38.4913 48.5235 38.4634 48.5831 cv38.3174 48.9141 li38.2823 48.9898 38.23 49.0411 38.1861 49.0411 cv38.0933 49.0411 37.8843 48.7759 37.7115 48.4346 cv37.6207 48.2554 37.5333 48.0337 37.4532 47.774 cv37.3438 47.4136 37.2974 47.1402 37.2974 46.8545 cv37.3248 46.3584 li37.0752 45.9678 36.9913 45.6836 36.9913 45.2188 cv36.9913 45.0542 37.0186 44.9239 37.1226 44.5748 cv36.9673 44.3179 36.92 44.127 36.92 43.7554 cv36.9385 43.5274 li36.9932 43.2696 li37.0298 43.0489 li36.8531 42.816 36.8023 42.6641 36.6255 41.8536 cv36.5289 41.4 36.4659 41.1983 36.3882 41.0821 cv36.3521 41.0303 36.3331 40.9922 36.3331 40.9727 cv36.3331 40.8653 36.5894 40.7696 36.8814 40.7696 cv37.1407 40.7891 li37.0772 40.6182 37.0626 40.5523 37.0626 40.4175 cv37.0626 40.1919 37.1089 39.9395 37.1968 39.6871 cv37.293 39.4063 37.3126 39.3282 37.3126 39.2369 cv37.3126 39.0196 37.2823 38.7969 37.233 38.6758 cv37.0865 38.3082 li37.0533 38.2266 37.0401 38.168 37.0401 38.1182 cv37.0401 38.0821 37.0626 38.0699 37.1314 38.0699 cv37.4918 38.0699 38.1802 38.4585 38.7203 38.9688 cv39.2588 39.4761 39.4317 39.8858 39.4317 40.6426 cv39.4024 41.0464 li39.9019 41.483 40.1211 41.8472 40.1211 42.2422 cv40.1211 42.5293 40.0274 42.7193 39.7505 42.9947 cv39.2559 43.4874 39.1426 43.7427 39.1426 44.3785 cv39.1426 45.3536 39.4346 45.8819 39.9732 45.8819 cv40.4478 45.8819 40.8121 45.3672 40.8726 44.6114 cv40.9268 43.9141 li40.9415 43.733 40.9727 43.5132 41.0181 43.251 cv41.0484 43.0835 41.0743 42.8663 41.0743 42.772 cv41.0743 42.5259 40.9122 42.2149 40.4312 41.6504 cv39.9146 41.0484 39.7413 40.7232 39.7413 40.2505 cv39.7413 39.6871 40.1304 39.2735 40.6617 39.2735 cv40.7925 39.2735 40.8604 39.292 41.0181 39.3726 cv41.0264 39.0538 41.0396 38.9947 41.2208 38.5474 cv41.3638 38.191 41.5171 37.9405 41.5899 37.9405 cv41.6133 37.9405 41.6524 37.9664 41.6978 38.0132 cv41.7779 38.0923 41.8575 38.1597 41.9385 38.2154 cv42.0508 38.294 42.1119 38.3375 42.1226 38.3453 cv42.1626 38.378 42.2173 38.4327 42.2872 38.5084 cv42.4029 38.0972 42.5201 37.9053 42.8565 37.5728 cv43.1124 37.3223 43.21 37.2427 43.2588 37.2427 cv43.2989 37.2427 43.3482 37.2759 43.3907 37.3335 cv43.6099 37.6285 li43.9239 37.9761 li44.0411 38.1099 44.086 38.2237 44.1426 38.5474 cv44.3272 38.4376 li44.6202 38.271 li44.6749 38.2408 44.75 38.1919 44.8418 38.1246 cv44.8936 38.087 44.9341 38.0679 44.9585 38.0679 cv44.9883 38.0679 45.024 38.1207 45.044 38.1978 cv45.1543 38.6207 li45.3926 39.0972 li45.4654 39.2418 45.4859 39.3516 45.4859 39.5728 cv45.4844 39.6871 li45.6075 39.6812 li45.9688 39.6812 46.2828 40.1104 46.2828 40.6045 cv46.2828 41.2593 45.7603 42.1041 45.0806 42.5547 cv45.0181 42.774 45.003 42.8624 45.003 43.0401 cv45.003 44.501 45.3877 44.8111 47.6353 45.1451 cv48.1973 45.2276 48.7017 45.3331 49.1426 45.4576 cv49.2144 45.4766 49.6983 45.6368 50.5943 45.9351 cv51.0928 46.0997 51.4263 46.1734 51.6827 46.1734 cv51.9581 46.1734 52.1094 46.0948 52.1094 45.9502 cv52.1094 45.7007 51.7403 45.4756 50.6124 45.0347 cv49.0137 44.4078 li47.3892 43.7754 46.6207 42.7808 46.6207 41.3204 cv46.6207 39.6182 47.8965 38.3443 49.5997 38.3443 cv50.2442 38.3443 50.8692 38.4761 51.7701 38.8038 cv52.9307 39.2271 52.9918 39.2457 53.1168 39.2457 cv53.3399 39.2457 53.4624 39.0914 53.4976 38.7676 cv53.5284 38.4932 53.6021 38.3819 53.7544 38.3819 cv53.981 38.3819 54.2252 38.5899 54.398 38.9332 cv54.5508 39.2315 54.6373 39.5801 54.6373 39.8858 cv54.6373 40.4937 54.3184 40.8921 53.7378 41.0084 cv53.3487 41.5171 52.857 41.7681 52.2574 41.7681 cv51.5269 41.7681 51.1622 41.6255 49.9136 40.8438 cv49.4673 40.563 49.2764 40.4937 48.9468 40.4937 cv48.5088 40.4937 48.1861 40.7666 48.1861 41.1373 cv48.1861 41.4708 48.4581 41.6944 49.0689 41.8536 cv49.4341 41.9507 49.4864 41.9776 49.6753 42.1685 cv49.8218 42.1324 49.8892 42.1241 49.9805 42.1241 cv50.5787 42.1241 51.3126 42.4444 51.9361 42.9766 cv53.0689 43.3272 54.0752 44.5474 54.0752 45.5713 cv54.0752 46.7081 53.0938 47.7237 51.9971 47.7237 cv51.7002 47.7237 51.1094 47.628 50.5767 47.4966 cvf20.0674 21.1236 mo20.0162 20.9024 19.9991 20.7896 19.9991 20.6802 cv20.0118 20.5347 li20.0674 20.2413 li20.0845 20.004 li20.0845 19.7496 20.0425 19.565 19.9561 19.4522 cv19.7359 19.1568 li19.6626 19.0591 19.6011 18.9419 19.5528 18.8067 cv19.5269 18.7393 19.5142 18.6871 19.5142 18.6514 cv19.5142 18.5684 19.5645 18.5176 19.649 18.5176 cv19.6983 18.5176 19.7168 18.5259 19.8843 18.6236 cv19.9542 18.6646 20.0162 18.6871 20.0635 18.6871 cv20.1719 18.6871 20.2349 18.5088 20.2349 18.1973 cv20.2349 17.8433 20.1988 17.6451 20.1226 17.5572 cv19.8462 17.2442 li19.608 17.043 li19.5508 16.9937 19.5108 16.9312 19.5108 16.8829 cv19.5108 16.8038 19.5713 16.7486 19.6597 16.7486 cv19.7427 16.7486 19.919 16.7886 20.0674 16.8409 cv20.1519 16.8604 li20.2271 16.8604 20.2554 16.816 20.2554 16.7081 cv20.2525 16.6387 li20.1958 16.252 li20.0845 15.8482 li20.0503 15.7188 20.0328 15.6973 19.9483 15.6973 cv19.9019 15.7012 li19.4424 15.793 li19.3692 15.8018 li18.7671 15.8018 18.1319 15.2916 17.9351 14.6543 cv17.5674 13.4605 li17.4537 13.0909 17.1792 12.7413 16.6866 12.3379 cv16.5362 12.2173 16.4083 12.1456 16.3174 12.1363 cv15.9869 12.0992 li15.9263 12.0928 15.8863 12.0577 15.8863 12.0084 cv15.8863 11.9312 15.9576 11.898 16.1168 11.898 cv16.7232 11.9517 li16.9424 11.9722 17.2764 12.0586 17.7149 12.2105 cv18.2637 12.3985 18.6348 12.4805 18.9473 12.4805 cv19.8653 12.4805 20.4161 11.983 20.4161 11.1514 cv20.4161 10.5826 20.1177 9.94044 19.6626 9.5254 cv19.4043 9.29249 19.147 9.11963 19.0582 9.11963 cv19.0054 9.11963 18.9629 9.16358 18.9629 9.21631 cv18.9825 9.45313 li18.9844 9.4751 li18.9844 9.56739 18.9302 9.63672 18.8594 9.63672 cv18.7662 9.63672 18.6617 9.5171 18.5416 9.26905 cv18.1934 8.54639 17.6431 8.11524 17.0718 8.11524 cv16.9737 8.11524 16.9053 8.15577 16.9053 8.21387 cv16.9053 8.25196 16.9371 8.3418 16.9971 8.4795 cv17.1436 8.80958 li17.1832 8.89747 17.2046 8.95411 17.2046 8.97901 cv17.2046 9.00049 17.1685 9.02002 17.127 9.02002 cv17.0401 9.02002 16.9073 8.94532 16.814 8.84766 cv16.5391 8.55176 li16.3008 8.18506 li16.1089 7.89063 15.9537 7.75879 15.5464 7.54102 cv15.3184 7.42042 15.1709 7.33985 15.1045 7.30274 cv15.021 7.25391 14.9415 7.22852 14.8765 7.22852 cv14.8101 7.22852 14.7779 7.25977 14.7779 7.32569 cv14.7779 7.38428 14.8018 7.45264 14.8482 7.52442 cv14.9839 7.7334 15.0381 7.83692 15.0381 7.89258 cv15.0381 7.95166 14.9947 8.00098 14.9415 8.00098 cv14.7999 8.00098 14.5025 7.71241 14.2403 7.32081 cv14.025 6.99903 13.9102 6.63672 13.9102 6.28711 cv13.9102 5.49805 14.4859 4.91309 15.2657 4.91309 cv15.6695 4.91309 16.1778 5.08252 16.649 5.37256 cv17.5127 5.90577 li17.8126 6.09034 18.2559 6.23682 18.5162 6.23682 cv18.6338 6.23682 18.8775 6.19629 19.0562 6.14502 cv19.1363 6.12256 19.2095 6.09034 19.2769 6.05274 cv19.3272 6.02344 19.3638 5.98194 19.3638 5.9502 cv19.3638 5.91309 19.3438 5.87891 19.3145 5.86817 cv19.2042 5.83252 li18.7984 5.75831 li18.6939 5.74073 18.5269 5.67725 18.3023 5.5752 cv17.8179 5.35303 17.5108 5.19922 17.3838 5.11573 cv17.0826 4.91749 16.878 4.79981 16.7774 4.76612 cv16.628 4.71729 16.5362 4.64893 16.5362 4.5918 cv16.5362 4.5376 16.5626 4.51075 16.6172 4.51075 cv16.6709 4.51075 16.7393 4.53516 16.814 4.58204 cv17.0855 4.75049 17.3189 4.83985 17.4947 4.83985 cv18.2857 5.11573 li18.6773 5.25196 19.2491 5.37256 19.5064 5.37256 cv19.8399 5.37256 20.1099 5.1001 20.1099 4.76612 cv20.1099 4.54932 19.983 4.22559 19.792 3.9585 cv19.7496 3.89747 19.7042 3.86426 19.6666 3.86426 cv19.5923 3.86426 19.5547 3.91651 19.5547 4.01172 cv19.5713 4.16065 li19.5992 4.3794 li19.5992 4.61768 19.439 4.80469 19.2344 4.80469 cv19.1602 4.80469 19.0626 4.78565 18.9444 4.74708 cv17.752 4.36231 li16.7505 4.03809 16.2872 3.93946 15.7852 3.93946 cv14.3545 3.94092 13.2667 4.92188 13.2667 6.21143 cv13.2667 7.67627 14.293 8.61963 16.8331 9.48926 cv19.3301 10.3462 19.6827 10.5567 19.6827 11.1983 cv19.6827 11.5679 19.3077 11.898 18.8887 11.898 cv18.7208 11.898 18.5733 11.8848 18.4488 11.8599 cv18.3643 11.8443 17.9483 11.7461 17.2007 11.566 cv16.4458 11.3863 15.7593 11.3091 14.9126 11.3091 cv13.1099 11.3091 12.1094 11.6246 11.2447 12.4668 cv11.0298 12.6778 10.9566 12.711 10.7076 12.711 cv10.5835 12.7051 li10.3277 12.6871 li10.292 12.6871 li10.0772 12.6871 9.91749 12.7881 9.77393 13.0176 cv9.58008 13.3301 9.47608 13.4947 9.4629 13.5142 cv9.41114 13.584 9.33155 13.625 9.25294 13.625 cv9.08594 13.625 8.98682 13.5005 8.8003 13.0562 cv8.70997 12.8394 8.57813 12.6514 8.41553 12.504 cv8.04688 12.1739 li7.98926 12.1192 7.95411 12.0689 7.95411 12.0313 cv7.95411 11.9922 7.98145 11.9312 8.02881 11.8599 cv8.20313 11.605 8.26514 11.4908 8.28565 11.3824 cv8.33497 11.1377 8.34278 11.125 8.44288 11.125 cv8.55665 11.125 8.58985 11.2388 8.59815 11.6597 cv8.60108 11.7793 8.65186 11.9483 8.74659 12.1543 cv8.94825 12.5953 li8.97413 12.6524 9.0376 12.688 9.11377 12.688 cv9.30567 12.688 9.5459 12.2417 9.61084 11.7686 cv9.66309 11.3731 9.70508 11.2544 9.78614 11.2544 cv9.82081 11.2544 9.8501 11.2676 9.86719 11.2911 cv9.88624 11.3169 9.94141 11.4278 10.0318 11.6216 cv10.0792 11.7232 10.1612 11.8174 10.271 11.898 cv10.377 11.9751 10.4522 12.0186 10.4913 12.0264 cv10.5147 12.0293 li10.6631 12.0293 10.7144 11.9302 10.7496 11.586 cv10.7686 11.4014 li10.7305 11.1436 li10.7037 10.9673 li10.7037 10.8467 10.7466 10.7754 10.8145 10.7754 cv10.855 10.7754 10.9034 10.8023 10.9498 10.8506 cv11.1348 11.0328 li11.2569 11.1553 11.3804 11.2183 11.5 11.2183 cv11.6514 11.2183 11.7452 11.1553 11.7452 11.0538 cv11.7452 10.9673 11.7105 10.879 11.5748 10.6294 cv11.4478 10.3897 li11.2984 10.1148 11.1822 10.004 11.044 10.004 cv10.8599 10.022 li10.6397 10.1148 li10.5728 10.1417 10.5235 10.1563 10.4942 10.1563 cv10.4629 10.1563 10.4376 10.1246 10.4376 10.0831 cv10.4376 9.91749 10.545 9.65967 10.7496 9.3335 cv10.8946 9.10157 10.9957 8.60499 11.043 7.89063 cv11.107 6.93165 11.233 6.31055 11.3677 6.31055 cv11.4605 6.31055 11.4942 6.3877 11.4942 6.59229 cv11.4849 6.84376 li11.4771 7.01954 li11.4771 7.19092 11.5147 7.3296 11.5606 7.3296 cv11.7183 7.3296 11.9043 7.0962 12.0538 6.71534 cv12.1163 6.55616 12.1475 6.42872 12.1475 6.34034 cv12.1285 6.25489 li11.7608 5.5752 li11.3921 5.46338 li11.3248 5.44483 11.2774 5.41309 11.2637 5.38233 cv11.2637 5.13331 li11.2637 4.93213 li11.2281 4.71045 li11.1534 4.52637 li11.0601 4.32471 li10.6592 4.54444 10.4673 4.6875 10.3277 4.87647 cv10.1812 5.06788 10.1021 5.14112 10.0298 5.14112 cv9.98096 5.14112 9.94141 5.09717 9.94141 5.04493 cv9.94141 5.00049 9.9585 4.90137 9.99415 4.74708 cv10.0093 4.64405 li10.0093 4.25049 9.76758 3.85938 9.37061 3.6084 cv9.26026 3.75635 li9.13038 3.93946 li8.91065 4.19678 li8.8418 4.27833 8.77979 4.40284 8.72657 4.56348 cv8.70215 4.64307 8.68946 4.71241 8.68946 4.77344 cv8.69044 4.80372 li8.69141 4.86915 li8.69141 5.021 8.6753 5.06202 8.60645 5.06202 cv8.56202 5.042 li8.4336 4.85889 li8.23047 4.63721 li7.91846 4.43653 li7.75294 4.30665 li7.72071 4.38038 7.69678 4.43555 7.68018 4.47315 cv7.62256 4.59961 7.59229 4.69922 7.5879 4.76612 cv7.57032 5.06006 li7.5503 5.37256 li7.55225 5.42579 li7.55225 5.58643 7.51465 5.6504 7.41553 5.6504 cv7.38428 5.6504 7.29151 5.60987 7.20264 5.55665 cv7.12012 5.50831 7.02686 5.48194 6.93409 5.48194 cv6.64991 5.48194 6.46582 5.68018 6.46582 5.98975 cv6.46582 6.35792 6.57374 6.7085 6.76172 6.95362 cv6.99952 7.26514 li7.06495 7.3501 7.18799 7.42139 7.19239 7.37598 cv7.23877 6.99024 li7.18311 6.67823 li7.17042 6.53809 li7.17042 6.41846 7.2129 6.34717 7.28223 6.34717 cv7.38526 6.34717 7.44776 6.45899 7.51465 6.76954 cv7.66114 7.44874 li7.80762 8.31348 li7.84766 8.54639 7.92139 8.79297 8.02881 9.04834 cv8.17432 9.39405 8.2793 9.61084 8.34082 9.69239 cv8.54297 9.95362 8.56641 9.98975 8.56641 10.0469 cv8.56641 10.0923 8.53272 10.1334 8.48926 10.1334 cv8.44922 10.1334 8.39307 10.1143 8.32374 10.0772 cv8.25928 10.045 8.18653 10.021 8.10352 10.0049 cv7.95801 9.98389 li7.66407 9.98389 7.60157 10.2369 7.60157 11.4644 cv7.60157 12.2125 7.76026 13.2286 7.95606 13.7159 cv8.34082 14.6915 li8.40235 14.8453 8.4336 15.0005 8.4336 15.148 cv8.4336 16.4878 6.65577 18.5914 4.70166 19.5611 cv3.97657 19.9214 3.7461 20.2671 3.69043 21.0684 cv3.67334 21.3067 li3.96876 21.1543 4.09034 21.1041 4.29786 21.0499 cv4.8462 20.9073 4.95215 20.8389 5.03321 20.5728 cv5.10547 20.3335 li5.13526 20.2432 5.18165 20.211 5.60206 19.9849 cv5.74756 19.9068 5.84913 19.8248 5.89795 19.7447 cv5.9917 19.5904 6.0669 19.5093 6.1167 19.5093 cv6.16016 19.5093 6.18555 19.5279 6.18555 19.5665 cv6.17237 19.6358 li5.98877 20.1587 li5.96729 20.2876 li5.96729 20.6763 6.18116 20.9937 6.57569 21.1973 cv6.64161 20.7701 6.68653 20.625 6.81592 20.4258 cv7.146 19.9107 li7.27051 19.7198 7.32081 19.4874 7.32081 19.1241 cv7.32081 18.9185 7.30372 18.7066 7.27637 18.5503 cv7.26221 18.4029 li7.26221 18.3111 7.31006 18.2564 7.39307 18.2564 cv7.45801 18.2564 7.50782 18.2793 7.51465 18.3111 cv7.5879 18.6612 li7.60352 18.7354 7.67823 18.7886 7.76807 18.7886 cv7.94385 18.7886 8.17432 18.5611 8.41553 18.147 cv8.50538 17.9913 8.55176 17.8248 8.55176 17.6602 cv8.52588 17.4107 li8.4712 17.1358 li8.46534 17.0826 li8.46534 16.9615 8.53272 16.8785 8.62745 16.8785 cv8.66944 16.8785 8.70264 16.8936 8.7085 16.9161 cv8.81934 17.3375 li8.85645 17.4781 8.95313 17.5757 9.05713 17.5757 cv9.18165 17.5757 9.3921 17.3643 9.51758 17.1177 cv9.62794 16.898 9.6836 16.648 9.6836 16.3648 cv9.6836 15.9722 9.72461 15.8609 9.86719 15.8609 cv9.91407 15.8609 9.95166 15.8775 9.9585 15.9048 cv10.0318 16.1431 li10.0596 16.23 10.1128 16.2901 10.1631 16.2901 cv10.2398 16.2901 10.4459 16.0669 10.5835 15.8301 cv10.6216 15.7696 10.6397 15.709 10.6397 15.6583 cv10.6397 15.5816 10.587 15.503 10.4732 15.4078 cv10.2813 15.2486 10.2701 15.2242 10.2701 14.983 cv10.2701 14.7535 10.3067 14.6324 10.4732 14.3414 cv10.5611 14.1861 10.6412 14.0376 10.7125 13.9 cv10.9459 13.4463 11.0274 13.3292 11.1133 13.3292 cv11.1822 13.3292 11.2466 13.4063 11.2466 13.4908 cv11.2466 13.5386 11.233 13.5909 11.2076 13.6431 cv11.1587 13.7457 11.1319 13.8194 11.1319 13.8624 cv11.1319 13.9351 11.1954 13.9932 11.2706 13.9932 cv11.3545 13.9932 11.4654 13.9546 11.5953 13.8824 cv11.6436 13.8536 11.8155 13.7867 12.1075 13.6807 cv12.7149 13.4605 li12.816 13.4234 12.9385 13.4039 13.085 13.4039 cv13.1968 13.4039 13.3062 13.4166 13.4146 13.4415 cv13.6304 13.4908 13.772 13.5142 13.8379 13.5142 cv14.004 13.5142 14.1509 13.3721 14.1509 13.21 cv14.1509 13.087 14.024 12.8458 13.8555 12.6504 cv13.7925 12.5787 13.7608 12.521 13.7608 12.4839 cv13.7828 12.4122 li13.8052 12.3667 13.8428 12.3379 13.8814 12.3379 cv14.004 12.3379 14.293 12.6475 14.5528 13.0562 cv16.1363 15.5474 16.7042 16.1504 17.7706 16.4737 cv18.8516 16.8028 19.1329 17.0542 19.1329 17.6978 cv19.1329 18.0474 18.9532 18.4585 18.5601 19.0103 cv17.7613 20.1294 17.5674 20.5811 17.5674 21.3194 cv17.5674 21.4542 li17.6592 21.4166 17.7261 21.3853 17.7706 21.3628 cv17.9209 21.2862 18.0181 21.2437 18.065 21.2339 cv18.523 21.1417 li18.6617 21.1138 18.7837 20.9376 18.7837 20.7667 cv18.7813 20.7193 li18.7247 20.3155 li18.7208 20.2613 li18.7208 20.1177 18.7935 19.9532 18.8917 19.8741 cv18.92 19.8497 18.9532 19.836 18.9864 19.836 cv19.0381 19.836 19.1006 19.8824 19.1299 19.9473 cv19.4234 20.5728 li19.544 20.8282 19.6856 20.9478 20.0674 21.1236 cvfalse sop0 0.085 0.94 0 cmykf5.25 7.79834 mo5.11573 7.79834 5.04688 7.91456 5.03321 8.16749 cv4.99659 8.51465 li4.95411 8.8418 4.95215 8.87598 4.95215 8.95997 cv4.95215 9.22315 5.0293 9.41602 5.13526 9.41602 cv5.25294 9.41602 5.43702 9.19336 5.52832 8.93848 cv5.58545 8.78272 5.61182 8.64893 5.61182 8.50831 cv5.61182 8.38624 5.58252 8.23877 5.52832 8.09327 cv5.46241 7.90626 5.35938 7.79834 5.25 7.79834 cvf3.56348 4.93213 mo3.56543 5.09131 li3.56543 5.31934 3.50977 5.59131 3.32325 6.292 cv3.28956 6.42334 3.26905 6.54786 3.26905 6.62598 cv3.26905 6.75 3.31446 6.88331 3.41407 7.04542 cv3.47461 7.14063 3.53223 7.2046 3.58106 7.22852 cv3.80079 7.33887 li3.83887 7.59717 li3.82813 7.69678 3.84717 7.83448 3.89356 8.00098 cv3.94434 8.18409 3.96973 8.36817 3.96973 8.54981 cv3.96973 8.7046 3.95655 8.76514 3.9209 8.76514 cv3.85206 8.76514 3.72901 8.5752 3.61817 8.29542 cv3.44043 7.85157 3.28174 7.68653 3.03272 7.68653 cv2.83204 7.68653 2.69874 7.72071 2.45948 7.83497 cv2.51612 7.90674 2.55323 7.95606 2.57081 7.98145 cv2.58497 8.0044 2.64014 8.11036 2.73682 8.29542 cv2.99415 8.792 li3.17139 9.13526 3.27588 9.33106 3.30469 9.37989 cv3.37208 9.48633 3.46094 9.57374 3.56348 9.63672 cv3.59473 9.65577 3.69336 9.71143 3.85743 9.80274 cv3.94532 9.85157 4.00733 9.92139 4.00733 9.97168 cv4.00733 10.0547 3.94043 10.1148 3.8501 10.1148 cv3.83887 10.1148 li3.59961 10.0772 li3.46534 10.064 li3.39307 10.064 3.36133 10.1294 3.36133 10.2681 cv3.36133 10.7657 3.75538 11.3404 4.44532 11.8423 cv4.52784 11.9024 4.59376 11.9908 4.59376 12.0396 cv4.59376 12.1011 4.53028 12.1553 4.45801 12.1553 cv4.41309 12.1553 4.30665 12.1211 4.22413 12.0816 cv4.17334 12.0567 4.12891 12.0425 4.09717 12.0425 cv4.00684 12.0425 3.94727 12.1172 3.94727 12.2295 cv3.94727 12.3609 4.05323 12.6211 4.28028 13.0562 cv4.42969 13.3404 4.64942 13.5547 4.90528 13.6607 cv5.73194 14.0103 li5.77637 14.0298 5.80567 14.0723 5.80567 14.1221 cv5.80567 14.1871 5.75635 14.2432 5.69434 14.2496 cv5.52832 14.2691 li5.38233 14.2857 li5.14405 14.2691 li5.10743 14.2681 li4.9917 14.2681 4.94727 14.2906 4.94727 14.3477 cv4.94727 14.4405 5.04883 14.6675 5.2168 14.9483 cv5.41309 15.2764 5.58545 15.4625 5.6919 15.4625 cv5.73389 15.4625 5.77735 15.4268 5.80567 15.3716 cv6.00684 14.9483 li6.042 14.8746 6.20752 14.7476 6.48584 14.5811 cv6.66163 14.4747 6.83497 14.4058 6.99952 14.379 cv7.33057 14.3233 li7.41553 14.3096 7.4629 14.2486 7.4629 14.1495 cv7.45899 14.1036 li7.40284 13.753 li7.36719 13.3682 li7.33057 13.0176 li7.29346 12.6143 li7.28956 12.5108 7.25977 12.4634 7.20264 12.4634 cv7.15821 12.4634 7.08448 12.523 7.03565 12.5953 cv6.74708 13.0357 6.54834 13.1832 6.23926 13.1832 cv5.26075 13.1832 4.51856 11.4595 4.51856 9.18067 cv4.51856 8.98194 4.53028 8.7295 4.55469 8.42334 cv4.60303 7.83985 4.61182 7.69385 4.61182 7.47706 cv4.61182 6.4878 4.40479 5.79297 3.98584 5.37256 cv3.72706 5.11573 li3.56348 4.93213 lif5.93409 18.3672 mo5.6753 18.3287 5.55665 18.2999 5.40137 18.2383 cv5.35694 18.2198 5.24073 18.1705 5.05176 18.0914 cv4.7544 17.9654 4.53418 17.9068 4.34864 17.9068 cv4.07032 17.9068 3.84327 17.9986 3.58106 18.2198 cv3.74756 18.3482 li4.11377 18.6065 li4.46338 18.8809 li4.55469 18.9522 4.66114 18.9922 4.7671 18.9922 cv5.12647 18.9922 5.43995 18.8238 5.93409 18.3672 cvf13.0093 21.7115 mo13.1099 21.483 13.1587 21.4209 13.378 21.2339 cv13.8912 20.7945 14.1304 20.4668 14.1304 20.2046 cv14.1304 20.021 li14.1304 19.8003 li14.1304 19.565 14.1705 19.4874 14.292 19.4874 cv14.3487 19.4874 14.3921 19.5093 14.4068 19.542 cv14.4976 19.7623 li14.5186 19.815 14.5801 19.8477 14.6524 19.8477 cv14.7237 19.8477 14.8292 19.7632 14.9205 19.6358 cv15.1045 19.3765 li15.1963 19.2491 15.2388 19.1382 15.2388 19.0196 cv15.2388 18.9468 15.2232 18.875 15.1963 18.8067 cv15.1817 18.771 15.1402 18.6734 15.0684 18.5137 cv15.0254 18.4185 14.9927 18.2925 14.9927 18.2256 cv14.9927 18.106 15.0538 18.0347 15.1587 18.0347 cv15.211 18.0347 15.2603 18.0562 15.2876 18.0914 cv15.4351 18.2745 li15.4673 18.315 15.5201 18.3379 15.5748 18.3379 cv15.6421 18.3379 15.7203 18.2745 15.7667 18.1841 cv15.9131 17.8897 li15.9512 17.8126 15.9712 17.7579 15.9712 17.7242 cv15.9712 17.6675 15.9112 17.6084 15.8028 17.5572 cv15.5645 17.4478 li15.2486 17.3028 15.0103 16.7964 15.0103 16.2686 cv15.0103 16.1988 15.024 16.1304 15.0494 16.0694 cv15.1778 15.7574 li15.2154 15.668 15.233 15.5684 15.233 15.4625 cv15.233 15.2735 15.1709 15.0796 15.0494 14.8926 cv14.9014 14.6666 14.8213 14.5367 14.8101 14.5074 cv14.7027 14.2159 14.6456 14.1348 14.5557 14.1348 cv14.4625 14.1578 li14.3326 14.2305 li14.1304 14.3414 li13.8921 14.6353 li13.6353 14.7637 li13.4805 14.8423 13.335 15.1685 13.335 15.4405 cv13.335 15.9161 13.3902 16.0499 14.0201 17.1358 cv14.2652 17.5562 14.3941 17.919 14.3941 18.1871 cv14.3941 18.941 13.7193 19.4766 12.3658 19.8003 cv11.5206 20.003 li10.8985 20.1519 10.5313 20.5782 10.3995 21.3067 cv10.6573 21.1753 10.7579 21.1563 11.2144 21.1563 cv11.4849 21.1592 li11.5274 21.1602 li11.772 21.1602 11.8057 21.1417 11.9615 20.9209 cv12.1421 20.667 12.3213 20.5152 12.5679 20.4068 cv12.8633 20.2784 li13.1021 20.149 li13.1753 20.1304 li13.2413 20.1304 13.2759 20.1568 13.2759 20.2056 cv13.2759 20.2769 13.209 20.398 13.1021 20.5176 cv12.8882 20.753 12.8082 20.9517 12.8082 21.2281 cv12.8082 21.4058 12.8506 21.5103 13.0093 21.7115 cvf10.6954 18.8624 mo10.9043 18.9952 11.1192 19.1876 11.2447 19.3599 cv11.4209 19.5992 11.4459 19.6163 11.6197 19.6163 cv11.6939 19.6163 11.7852 19.6031 11.8877 19.5792 cv12.0538 19.542 li12.3565 19.4854 12.4595 19.44 12.4595 19.3648 cv12.4595 19.3218 12.4253 19.2662 12.3658 19.2115 cv12.1651 19.0293 li11.9615 18.8443 li11.8326 18.7266 11.5748 18.6397 11.3555 18.6397 cv11.1358 18.6397 11.0074 18.6832 10.6954 18.8624 cvf16.649 19.8555 mo16.7588 19.837 li16.9249 19.8189 li17.0909 19.837 li17.1714 19.8428 li17.5796 19.8428 17.9717 19.4957 17.9717 19.1329 cv17.9717 19.0054 17.8555 18.9351 17.6475 18.9351 cv17.1524 18.9351 16.8418 19.2232 16.649 19.8555 cvf54.3619 21.1236 mo54.3184 20.9556 54.3042 20.8755 54.3042 20.7857 cv54.3243 20.5347 li54.3707 20.1919 54.3858 20.0269 54.3858 19.8199 cv54.3858 19.6846 54.3453 19.5762 54.252 19.4522 cv54.0313 19.1568 li53.8882 18.9659 53.8287 18.8204 53.8287 18.6553 cv53.8287 18.5494 53.8545 18.5137 53.9297 18.5137 cv54.0132 18.5328 li54.0225 18.5376 54.0772 18.5669 54.1788 18.6236 cv54.252 18.6646 54.3155 18.6871 54.3619 18.6871 cv54.4722 18.6871 54.5274 18.5147 54.5274 18.1695 cv54.5274 17.6929 54.4371 17.4634 54.1602 17.2442 cv53.9024 17.043 li53.8575 17.0069 53.8267 16.9473 53.8267 16.8936 cv53.8267 16.8047 53.8804 16.7481 53.9644 16.7481 cv54.0142 16.7481 54.0874 16.7613 54.1788 16.7862 cv54.3809 16.8409 li54.459 16.8594 li54.5215 16.8594 54.5499 16.8106 54.5499 16.7042 cv54.5455 16.6387 li54.4913 16.252 li54.4341 15.8511 54.3668 15.6983 54.2481 15.6983 cv54.2144 15.7012 li53.7378 15.793 li53.6573 15.8018 li53.0826 15.8018 52.4073 15.2574 52.2295 14.6543 cv51.8809 13.4605 li51.7769 13.1026 51.4678 12.709 50.9991 12.3379 cv50.8458 12.2173 50.711 12.1475 50.6124 12.1363 cv50.2823 12.0992 li50.2227 12.0928 50.1822 12.0567 50.1822 12.0093 cv50.1822 11.9322 50.2452 11.897 50.3824 11.897 cv50.8477 11.897 51.3467 11.9932 52.0103 12.2105 cv52.6143 12.4083 52.9444 12.4805 53.2378 12.4805 cv54.1592 12.4805 54.7124 12.0005 54.7124 11.2042 cv54.7124 10.8077 54.5689 10.3047 54.3619 9.98487 cv54.1832 9.71094 53.8814 9.42676 53.4976 9.17676 cv53.4415 9.13965 53.3892 9.11963 53.3531 9.11963 cv53.3013 9.11963 53.2588 9.1626 53.2588 9.21241 cv53.2774 9.45313 li53.2803 9.47413 li53.2803 9.56348 53.2261 9.63672 53.1607 9.63672 cv53.0596 9.63672 52.9532 9.5171 52.8374 9.26905 cv52.4986 8.54981 51.9532 8.11719 51.3892 8.11719 cv51.2681 8.11719 51.1963 8.16065 51.1963 8.23633 cv51.1963 8.29346 51.2315 8.37794 51.293 8.4795 cv51.3511 8.57227 51.4058 8.68311 51.4581 8.80958 cv51.4869 8.88038 51.5035 8.93458 51.5035 8.9668 cv51.5035 9.00147 51.4727 9.02002 51.4185 9.02002 cv51.337 9.02002 51.1993 8.94532 51.1094 8.84766 cv50.9253 8.65088 50.8335 8.55274 50.8335 8.55176 cv50.5943 8.18506 li50.4097 7.9004 50.2056 7.72168 49.8589 7.54102 cv49.4004 7.30274 li49.3072 7.25391 49.2261 7.22852 49.1636 7.22852 cv49.1075 7.22852 49.0767 7.25782 49.0767 7.31055 cv49.0767 7.37012 49.1065 7.44239 49.1617 7.52442 cv49.2588 7.66797 49.3306 7.82129 49.3306 7.89063 cv49.3306 7.95264 49.2906 8.00098 49.2398 8.00098 cv49.1124 8.00098 48.8785 7.77002 48.5552 7.32081 cv48.3228 7 48.2042 6.65088 48.2042 6.28907 cv48.2042 5.51514 48.8008 4.91309 49.5694 4.91309 cv49.9625 4.91309 50.4561 5.07813 50.9439 5.37256 cv51.8272 5.90577 li52.1412 6.09668 52.5674 6.23682 52.8355 6.23682 cv52.981 6.23682 53.0235 6.2295 53.3506 6.14502 cv53.4478 6.11963 53.5289 6.08838 53.5904 6.05274 cv53.6304 6.0293 53.6573 5.98633 53.6573 5.94532 cv53.6573 5.87208 53.6124 5.84082 53.4976 5.83252 cv53.0889 5.80176 52.2378 5.46729 51.6788 5.11573 cv51.3531 4.91114 51.15 4.79444 51.0723 4.76612 cv50.9205 4.71241 50.8189 4.63428 50.8189 4.57129 cv50.8189 4.54346 50.8516 4.52637 50.899 4.52637 cv51.0074 4.54639 li51.8072 4.83985 li52.5792 5.11573 li52.9561 5.25098 53.545 5.37256 53.816 5.37256 cv54.1631 5.37256 54.4044 5.13038 54.4044 4.78272 cv54.4044 4.60596 54.3599 4.40772 54.2881 4.27002 cv54.1758 4.05127 54.0284 3.86524 53.9683 3.86524 cv53.8985 3.86524 53.8575 3.93848 53.8575 4.06153 cv53.8653 4.16065 li53.8892 4.396 li53.8892 4.64502 53.7535 4.80567 53.543 4.80567 cv53.4585 4.80567 53.3589 4.78565 53.2408 4.74708 cv52.0469 4.36231 li51.0088 4.02686 50.6045 3.93946 50.0953 3.93946 cv48.6495 3.93946 47.5621 4.91553 47.5621 6.21143 cv47.5621 7.67725 48.566 8.59522 51.147 9.48926 cv53.6485 10.357 53.9761 10.5567 53.9761 11.2164 cv53.9761 11.5953 53.6192 11.898 53.1758 11.898 cv53.0113 11.898 52.8668 11.8848 52.7447 11.8599 cv52.6353 11.8404 52.2203 11.7403 51.4942 11.566 cv50.7266 11.3824 50.0782 11.3091 49.2095 11.3091 cv47.3853 11.3091 46.5108 11.587 45.5591 12.4668 cv45.3379 12.6724 45.2491 12.711 45.003 12.711 cv44.878 12.7051 li44.5889 12.6871 li44.3697 12.6871 44.2037 12.793 44.0694 13.0176 cv43.7764 13.5142 li43.7364 13.5831 43.6553 13.625 43.5645 13.625 cv43.3765 13.625 43.2725 13.4996 43.0958 13.0562 cv43.002 12.8199 42.8755 12.6304 42.7276 12.504 cv42.3428 12.1739 li42.2842 12.1231 42.2496 12.0748 42.2496 12.0386 cv42.2496 12.0015 42.2833 11.939 42.3428 11.8599 cv42.399 11.7862 42.4537 11.7007 42.5079 11.6031 cv42.5655 11.501 42.5953 11.4258 42.5992 11.3824 cv42.6182 11.2173 li42.6324 11.1626 42.6866 11.126 42.7486 11.126 cv42.8697 11.126 42.8926 11.2061 42.8936 11.6597 cv42.8936 11.775 42.9434 11.9434 43.0401 12.1543 cv43.2432 12.5953 li43.2686 12.6524 43.3345 12.688 43.4083 12.688 cv43.6001 12.688 43.8394 12.2413 43.9053 11.7686 cv43.9566 11.376 43.9991 11.2544 44.0821 11.2544 cv44.1553 11.2544 44.189 11.3008 44.3462 11.6216 cv44.3956 11.7212 44.4703 11.8155 44.5669 11.898 cv44.6568 11.9732 44.7325 12.0186 44.7867 12.0264 cv44.8057 12.0284 li44.9585 12.0284 45.0088 11.9322 45.044 11.586 cv45.0626 11.4014 li45.0259 11.1436 li44.9996 10.9673 li44.9996 10.8467 45.042 10.7754 45.1099 10.7754 cv45.1504 10.7754 45.1978 10.8023 45.2471 10.8506 cv45.4307 11.0328 li45.5533 11.1563 45.6783 11.2193 45.7994 11.2193 cv45.9571 11.2193 46.0552 11.1495 46.0552 11.0376 cv46.0552 10.9444 46.0347 10.9014 45.8702 10.6294 cv45.8555 10.6045 45.8126 10.5245 45.7432 10.3897 cv45.5792 10.0801 45.504 10.004 45.3594 10.004 cv45.1734 10.022 li44.9341 10.1148 li44.8638 10.1417 44.814 10.1563 44.7876 10.1563 cv44.7564 10.1563 44.731 10.1236 44.731 10.0821 cv44.731 9.91553 44.8399 9.65577 45.044 9.3335 cv45.1695 9.13526 45.2774 8.64258 45.3565 7.89063 cv45.4473 7.02735 li45.5049 6.49756 45.5626 6.31055 45.6705 6.31055 cv45.709 6.31055 45.7383 6.32569 45.7432 6.34815 cv45.7984 6.62256 li45.7984 6.84376 li45.7984 7.11182 45.8262 7.3296 45.8604 7.3296 cv45.938 7.3296 46.0523 7.23731 46.1646 7.08155 cv46.2452 6.9712 46.3082 6.84766 46.3492 6.71534 cv46.4097 6.51954 46.441 6.35792 46.441 6.23292 cv46.441 5.80762 46.2627 5.62452 45.6871 5.46338 cv45.6294 5.44874 45.5909 5.42872 45.5782 5.40967 cv45.5591 5.24463 li45.5591 4.93213 li45.521 4.71045 li45.4473 4.52637 li45.3565 4.32471 li45.21 4.417 li44.8331 4.65284 44.7442 4.72217 44.6202 4.87647 cv44.4551 5.08643 44.3956 5.14014 44.3272 5.14014 cv44.2759 5.14014 44.2354 5.1045 44.2354 5.06006 cv44.3082 4.74708 li44.316 4.69336 li44.316 4.29102 44.0879 3.90235 43.6822 3.6084 cv43.5557 3.75635 li43.4273 3.93946 li43.2056 4.19678 li43.0787 4.34571 43.001 4.5503 43.001 4.74219 cv43.0049 4.80372 li43.0059 4.86377 li43.0059 5.00928 42.9839 5.05811 42.9161 5.05811 cv42.8755 5.042 li42.7276 4.85889 li42.5455 4.63721 li42.2129 4.43653 li42.0479 4.30665 li41.8707 4.69239 41.8619 4.7334 41.8619 5.22706 cv41.8648 5.38233 li41.8648 5.54786 41.8116 5.64844 41.7222 5.64844 cv41.6768 5.64844 41.6011 5.6167 41.4966 5.55665 cv41.4146 5.50831 41.3165 5.48194 41.2227 5.48194 cv40.9561 5.48194 40.7608 5.70899 40.7608 6.01954 cv40.7608 6.35792 40.8326 6.58643 41.0547 6.95362 cv41.1993 7.1919 41.3902 7.38624 41.4781 7.38624 cv41.4888 7.38624 41.5113 7.21436 41.5328 6.99024 cv41.4781 6.67823 li41.4659 6.53809 li41.4659 6.41846 41.5069 6.34717 41.5772 6.34717 cv41.6797 6.34717 41.7418 6.45899 41.8101 6.76954 cv41.9551 7.44874 li42.1031 8.31348 li42.1431 8.54639 42.2173 8.79297 42.3243 9.04834 cv42.4683 9.39405 42.5748 9.61084 42.6353 9.69239 cv42.8384 9.95362 42.8633 9.98975 42.8633 10.0469 cv42.8633 10.0923 42.8252 10.1334 42.7828 10.1334 cv42.7447 10.1334 42.6876 10.1143 42.6182 10.0772 cv42.5547 10.045 42.48 10.0196 42.397 10.0049 cv42.2627 9.98487 li41.959 9.98487 41.898 10.2295 41.898 11.4488 cv41.898 12.2115 42.0538 13.2251 42.2496 13.7159 cv42.6353 14.6915 li42.6978 14.8453 42.7286 15.0005 42.7286 15.149 cv42.7286 16.4937 40.9122 18.6417 38.9976 19.5611 cv38.252 19.9195 38.0318 20.2925 37.9678 21.3067 cv38.2862 21.1568 38.4146 21.106 38.6109 21.0499 cv39.1539 20.8975 39.2701 20.8228 39.3467 20.5728 cv39.4205 20.3335 li39.4517 20.231 39.522 20.1797 39.899 19.9849 cv40.0406 19.9107 40.1412 19.8282 40.1929 19.7447 cv40.2886 19.5879 40.3619 19.5103 40.4097 19.5103 cv40.462 19.5103 40.4918 19.545 40.4918 19.6031 cv40.4849 19.6358 li40.2847 20.1587 li40.2608 20.2886 li40.2608 20.6729 40.4776 20.9947 40.8726 21.1973 cv40.898 21.1001 40.9161 21.0259 40.9268 20.9766 cv40.9913 20.6963 41.0538 20.5093 41.1109 20.4258 cv41.4605 19.9107 li41.5879 19.7237 41.6094 19.6011 41.6094 19.127 cv41.5899 18.5503 li41.5772 18.4014 li41.5772 18.3072 41.6236 18.2544 41.7051 18.2544 cv41.7691 18.2544 41.8233 18.2793 41.8272 18.3111 cv41.8829 18.6612 li41.8946 18.7349 41.9717 18.7886 42.0616 18.7886 cv42.2378 18.7886 42.4683 18.563 42.709 18.147 cv42.8038 17.9854 42.8404 17.8584 42.8404 17.7076 cv42.8404 17.5914 42.8169 17.3335 42.7828 17.1358 cv42.775 17.0289 li42.775 16.9371 42.8292 16.8785 42.9161 16.8785 cv42.9615 16.8785 42.9981 16.8936 43.0049 16.9161 cv43.1334 17.3375 li43.1758 17.4791 43.2725 17.5757 43.3746 17.5757 cv43.6563 17.5757 43.9478 16.9986 43.9786 16.3834 cv43.9971 15.9937 44.0455 15.8589 44.1636 15.8589 cv44.209 15.8589 44.2461 15.8765 44.253 15.9048 cv44.3272 16.1431 li44.3536 16.23 44.4078 16.2901 44.459 16.2901 cv44.5049 16.2901 44.5987 16.2085 44.7134 16.0694 cv44.7784 15.9908 44.8331 15.9102 44.878 15.8301 cv44.9141 15.7662 44.9341 15.6993 44.9341 15.6373 cv44.9341 15.5445 44.9141 15.5181 44.7676 15.4078 cv44.6348 15.3052 44.5669 15.1758 44.5669 15.021 cv44.5669 14.7564 44.6797 14.4693 45.0069 13.9 cv45.3072 13.3848 45.3462 13.3243 45.421 13.3243 cv45.4898 13.3243 45.5406 13.3931 45.5406 13.4825 cv45.5406 13.5357 45.5298 13.5909 45.504 13.6431 cv45.4546 13.7481 45.4288 13.8233 45.4288 13.8624 cv45.4288 13.9351 45.4932 13.9932 45.5743 13.9932 cv45.6626 13.9932 45.7769 13.9546 45.9078 13.8824 cv45.9864 13.8389 46.1519 13.7715 46.4043 13.6807 cv46.7461 13.5567 46.9551 13.4844 47.0289 13.4605 cv47.1431 13.4234 47.2764 13.4039 47.4078 13.4039 cv47.5127 13.4039 47.6202 13.4166 47.7271 13.4415 cv47.938 13.4908 48.0792 13.5142 48.15 13.5142 cv48.3179 13.5142 48.4483 13.3877 48.4483 13.2251 cv48.4483 13.1534 48.397 13.0123 48.3345 12.9078 cv48.2388 12.754 48.1841 12.6675 48.169 12.6504 cv48.0875 12.566 48.0552 12.5191 48.0552 12.4859 cv48.0772 12.4122 li48.1001 12.3667 48.1377 12.3379 48.1783 12.3379 cv48.3257 12.3379 48.6089 12.6329 48.8663 13.0562 cv50.3082 15.4078 51.0054 16.1524 52.0645 16.4737 cv53.17 16.8067 53.4292 17.0411 53.4292 17.6998 cv53.4292 18.0484 53.2427 18.4722 52.8541 19.0103 cv52.1207 20.0279 51.8609 20.626 51.8609 21.3038 cv51.8628 21.4542 li51.9532 21.4166 52.021 21.3853 52.0645 21.3628 cv52.2144 21.2862 52.3145 21.2437 52.3609 21.2339 cv52.8165 21.1417 li52.961 21.1128 53.0767 20.9415 53.0767 20.7569 cv53.0748 20.7193 li53.0391 20.3155 li53.0362 20.252 li53.0362 20.023 53.147 19.837 53.2832 19.837 cv53.336 19.837 53.3951 19.8824 53.4244 19.9473 cv53.7193 20.5728 li53.8384 20.8282 53.9791 20.9478 54.3619 21.1236 cvf39.2911 8.51465 mo39.272 8.80958 li39.2686 8.98877 li39.2686 9.28858 39.315 9.41602 39.4263 9.41602 cv39.5474 9.41602 39.7403 9.1875 39.8248 8.93848 cv39.878 8.78272 39.9185 8.56495 39.9185 8.43946 cv39.9185 8.35157 39.897 8.26856 39.8248 8.09327 cv39.7413 7.89258 39.6568 7.79834 39.5542 7.79834 cv39.3975 7.79834 39.3243 8.00098 39.2911 8.51465 cvf37.858 4.93213 mo37.8619 5.09131 li37.8619 5.26075 37.8072 5.57032 37.7305 5.86817 cv37.6602 6.13086 37.6246 6.27198 37.6187 6.292 cv37.5943 6.39844 37.5826 6.51075 37.5826 6.62598 cv37.5826 6.88526 37.7066 7.12794 37.8946 7.22852 cv38.0982 7.33887 li38.1338 7.59717 li38.1246 7.69678 38.1446 7.83448 38.188 8.00098 cv38.2388 8.18506 38.2642 8.37012 38.2642 8.55274 cv38.2642 8.70752 38.251 8.76514 38.2168 8.76514 cv38.1465 8.76514 38.0259 8.5752 37.9141 8.29542 cv37.7349 7.85157 37.5787 7.68653 37.3277 7.68653 cv37.1255 7.68653 36.9952 7.72071 36.7559 7.83497 cv36.9468 8.08252 37.0626 8.29249 37.2891 8.792 cv37.5806 9.4419 37.6934 9.57471 38.1524 9.80274 cv38.254 9.85352 38.3208 9.92042 38.3208 9.97217 cv38.3208 10.0586 38.254 10.1148 38.1534 10.1148 cv38.1124 10.1148 37.9942 10.0982 37.8946 10.0772 cv37.7588 10.064 li37.6866 10.064 37.6553 10.1294 37.6553 10.275 cv37.6553 10.7618 38.0723 11.3536 38.7579 11.8423 cv38.8511 11.9073 38.9063 11.9781 38.9063 12.0293 cv38.9063 12.0586 38.8858 12.0909 38.8511 12.1172 cv38.8184 12.1421 38.7837 12.1553 38.752 12.1553 cv38.7144 12.1553 38.6285 12.127 38.5376 12.0816 cv38.4839 12.0538 38.4376 12.0406 38.4034 12.0406 cv38.3145 12.0406 38.2579 12.126 38.2579 12.2549 cv38.2579 12.4234 38.3809 12.7168 38.5928 13.0562 cv38.7876 13.3658 38.9996 13.5767 39.2007 13.6607 cv40.0264 14.0103 li40.0708 14.0298 40.1011 14.0704 40.1011 14.1158 cv40.1011 14.1802 40.0538 14.2364 39.9893 14.2496 cv39.8428 14.2691 li39.6773 14.2857 li39.4576 14.2691 li39.4195 14.2671 li39.3042 14.2671 39.2598 14.2906 39.2598 14.3497 cv39.2598 14.4376 39.3428 14.6231 39.5308 14.9483 cv39.7334 15.3013 39.875 15.4625 39.9834 15.4625 cv40.0284 15.4625 40.0718 15.4268 40.1011 15.3716 cv40.3013 14.9483 li40.3301 14.8907 40.4942 14.7637 40.7808 14.5811 cv40.9537 14.4693 41.1285 14.4 41.295 14.379 cv41.7364 14.3194 41.774 14.2999 41.774 14.1158 cv41.774 14.0513 41.7549 13.9302 41.7173 13.753 cv41.6978 13.6607 41.6797 13.5318 41.6626 13.3682 cv41.6255 13.0176 li41.5899 12.6143 li41.585 12.5127 41.5547 12.4634 41.4976 12.4634 cv41.4585 12.4634 41.398 12.5181 41.3497 12.5953 cv41.1314 12.9488 40.8155 13.1832 40.5572 13.1832 cv39.5308 13.1832 38.8326 11.5474 38.8326 9.14502 cv38.8511 8.42334 li38.9053 7.56006 li38.9146 7.25294 li38.9146 6.51465 38.6573 5.74854 38.2803 5.37256 cv38.023 5.11573 li37.858 4.93213 lif40.2286 18.3672 mo39.8418 18.3008 39.7813 18.2833 39.3467 18.0914 cv39.046 17.959 38.8511 17.9058 38.6573 17.9058 cv38.3658 17.9058 38.1416 17.9961 37.876 18.2198 cv38.0411 18.3482 li38.4092 18.6065 li38.7579 18.8809 li38.8492 18.9522 38.9576 18.9922 39.0669 18.9922 cv39.4288 18.9922 39.7315 18.8287 40.2286 18.3672 cvf47.3057 21.7115 mo47.4078 21.483 47.4542 21.4209 47.6714 21.2339 cv48.1861 20.7945 48.4249 20.4668 48.4249 20.2046 cv48.4249 20.021 li48.4249 19.8003 li48.4249 19.565 48.4664 19.4874 48.5889 19.4874 cv48.6421 19.4874 48.6866 19.5093 48.7027 19.542 cv48.794 19.7623 li48.8145 19.813 48.8765 19.8458 48.9488 19.8458 cv49.0796 19.8458 49.1719 19.7496 49.4004 19.3765 cv49.4961 19.2203 49.5337 19.1168 49.5337 19.0142 cv49.5337 18.9468 49.5186 18.8775 49.4932 18.8067 cv49.4781 18.773 49.4341 18.6744 49.3614 18.5137 cv49.3199 18.4185 49.2862 18.2916 49.2862 18.2256 cv49.2862 18.106 49.3497 18.0347 49.4537 18.0347 cv49.5064 18.0347 49.5552 18.0562 49.5845 18.0914 cv49.7295 18.2745 li49.7632 18.315 49.7715 18.3379 49.8277 18.3379 cv49.8941 18.3379 50.0157 18.2745 50.0621 18.1841 cv50.2085 17.8897 li50.2452 17.815 50.2652 17.7579 50.2652 17.7222 cv50.2652 17.6612 50.2066 17.5958 50.1163 17.5572 cv49.8589 17.4478 li49.5572 17.3189 49.3072 16.7999 49.3072 16.3077 cv49.3072 16.252 49.3257 16.1729 49.3614 16.0694 cv49.4742 15.7574 li49.5088 15.6524 49.5289 15.5494 49.5289 15.4512 cv49.5289 15.2706 49.4722 15.0982 49.3448 14.8926 cv49.2178 14.6876 49.1446 14.5596 49.1236 14.5074 cv49.0196 14.2344 48.9527 14.1426 48.8633 14.1426 cv48.7989 14.1426 48.7378 14.1656 48.628 14.2305 cv48.4454 14.3414 li48.1861 14.6353 li47.9297 14.7637 li47.7735 14.8423 47.6285 15.1749 47.6285 15.4512 cv47.6285 15.8501 47.7159 16.065 48.3155 17.1358 cv48.5689 17.5894 48.6895 17.9249 48.6895 18.1822 cv48.6895 18.9312 47.9258 19.5459 46.6797 19.8003 cv45.1905 20.1055 44.8658 20.3521 44.6939 21.3067 cv44.9517 21.1753 45.0533 21.1563 45.5088 21.1563 cv45.7798 21.1592 li45.8213 21.1602 li46.066 21.1602 46.1016 21.1417 46.2584 20.9209 cv46.4371 20.667 46.6168 20.5152 46.8633 20.4068 cv47.1573 20.2784 li47.3965 20.149 li47.4693 20.1304 li47.5362 20.1304 47.5713 20.1568 47.5713 20.2071 cv47.5713 20.2701 47.5118 20.376 47.3965 20.5176 cv47.2198 20.733 47.1158 20.9546 47.1158 21.1236 cv47.1158 21.3702 47.1553 21.4932 47.3057 21.7115 cvf44.9883 18.8624 mo45.2007 18.9952 45.4136 19.1876 45.5406 19.3599 cv45.7168 19.5992 45.7422 19.6163 45.9156 19.6163 cv45.9883 19.6163 46.0787 19.6031 46.1846 19.5792 cv46.3492 19.542 li46.6617 19.4825 46.7564 19.438 46.7564 19.3541 cv46.7564 19.3047 46.7291 19.253 46.6797 19.2115 cv46.4595 19.0293 li46.2584 18.8443 li46.1319 18.7315 45.876 18.6407 45.6783 18.6407 cv45.4498 18.6407 45.2637 18.7007 44.9883 18.8624 cvf50.9439 19.8555 mo51.0538 19.837 li51.2374 19.8189 li51.3853 19.837 li51.4839 19.8428 li51.67 19.8428 51.7671 19.8228 51.8438 19.7623 cv51.9581 19.6773 52.0738 19.5367 52.1934 19.3409 cv52.2418 19.2623 52.2676 19.1895 52.2676 19.1329 cv52.2676 19.0074 52.1539 18.9351 51.9512 18.9351 cv51.4468 18.9351 51.1397 19.2188 50.9439 19.8555 cvf18.2857 58.6905 mo18.3946 58.4712 li18.6524 58.1939 li18.8711 57.96 18.9864 57.6304 18.9864 57.2442 cv18.9864 57.0542 18.9532 56.8487 18.8917 56.6514 cv18.8453 56.503 18.8155 56.3785 18.8155 56.3252 cv18.8155 56.209 18.9019 56.0977 18.9908 56.0977 cv19.0284 56.0977 19.0777 56.1319 19.1299 56.1905 cv19.4043 56.503 li19.5752 56.6968 19.6334 56.7305 19.8462 56.7789 cv19.8653 56.521 li19.8843 56.2183 li19.8843 55.7798 19.7217 55.2881 19.4786 54.9786 cv19.3311 54.792 19.2662 54.6768 19.2662 54.6109 cv19.2662 54.5435 19.3155 54.482 19.3663 54.482 cv19.3834 54.482 19.4107 54.4971 19.4424 54.5196 cv19.6182 54.6504 19.711 54.7042 19.7593 54.7042 cv19.8482 54.7042 19.9268 54.4839 19.9268 54.2393 cv19.9268 53.8912 19.7823 53.4893 19.5528 53.2129 cv19.4361 53.0694 19.3628 52.9781 19.3311 52.9385 cv19.3077 52.9024 19.2955 52.8668 19.2955 52.8331 cv19.2955 52.7535 19.3619 52.6983 19.4542 52.6983 cv19.523 52.6983 19.5665 52.7149 19.6827 52.7911 cv19.7359 52.8262 19.7852 52.8462 19.8223 52.8462 cv19.9664 52.8462 20.0171 52.6431 20.0171 52.0958 cv20.0118 51.8726 li19.9937 51.5416 li19.9703 51.15 19.9395 51.0801 19.773 51.0801 cv19.626 51.0801 li18.7295 51.0801 18.3121 50.5142 18.0816 48.9864 cv17.9161 47.8814 17.503 47.0958 16.9971 46.9268 cv16.6958 46.8262 16.5865 46.7603 16.5865 46.6822 cv16.5865 46.628 16.6719 46.5762 16.7608 46.5762 cv16.8277 46.5762 16.9825 46.6187 17.1089 46.6695 cv17.8414 46.9668 18.4585 47.1119 18.9966 47.1119 cv19.8775 47.1119 20.5728 46.4625 20.5728 45.6412 cv20.5728 45.0118 20.273 44.3765 19.7359 43.8575 cv19.5894 43.7173 19.4302 43.6231 19.2769 43.5806 cv19.2422 43.5787 li19.148 43.6099 li19.1846 43.877 li19.2584 44.0601 li19.2779 44.1382 li19.2779 44.1778 19.2403 44.2076 19.1915 44.2076 cv19.1382 44.2076 19.087 44.1797 19.0562 44.1334 cv18.7247 43.6377 li18.4644 43.2422 17.8887 42.9161 17.4625 42.9161 cv17.3121 42.9161 17.2178 42.9849 17.2178 43.0923 cv17.2178 43.1441 17.2667 43.2359 17.3287 43.3072 cv17.4234 43.4112 17.4961 43.5411 17.4961 43.5992 cv17.4742 43.6734 li17.4556 43.7154 17.4283 43.7427 17.4019 43.7476 cv17.3838 43.7496 li17.295 43.7496 17.251 43.71 16.8501 43.251 cv16.5235 42.8775 15.856 42.5142 15.4971 42.5142 cv15.4454 42.5142 15.398 42.5357 15.3628 42.5713 cv15.3384 42.5967 15.3262 42.6226 15.3262 42.6431 cv15.3262 42.6978 15.3716 42.772 15.4537 42.8472 cv15.5674 42.9512 15.6592 43.0748 15.6592 43.1265 cv15.6592 43.1646 15.6109 43.1958 15.5557 43.1958 cv15.4502 43.1958 15.2149 43.046 14.774 42.6998 cv14.0889 42.1597 13.7828 41.6524 13.7828 41.0635 cv13.7828 40.3516 14.2901 39.795 14.9395 39.795 cv15.3204 39.795 15.8238 39.9761 16.17 40.2374 cv17.0718 40.9161 li17.483 41.2286 17.9883 41.396 18.5181 41.396 cv18.6329 41.396 18.7413 41.3692 18.8345 41.3223 cv18.9156 41.2818 18.9639 41.2334 18.9639 41.1983 cv18.9639 41.1753 18.897 41.1446 18.7984 41.1207 cv18.4737 41.0396 18.211 40.9288 18.0279 40.7891 cv17.1089 40.0899 li16.7676 39.8326 16.5284 39.6666 16.3907 39.5943 cv15.9063 39.3404 15.8111 39.2798 15.8111 39.2242 cv15.8111 39.1954 15.8594 39.1714 15.917 39.1714 cv15.9673 39.1714 16.022 39.1851 16.0792 39.2095 cv16.5567 39.4102 li16.711 39.4761 16.9683 39.6294 17.3287 39.8702 cv18.3111 40.5279 18.8135 40.7383 19.3902 40.7383 cv19.9405 40.7383 20.3453 40.3472 20.3453 39.8204 cv20.3453 39.7149 20.3174 39.6011 20.2691 39.503 cv20.1778 39.3199 li20.146 39.252 20.0845 39.2037 20.0674 39.2271 cv20.0118 39.3003 li19.9561 39.6871 li19.9561 39.7017 19.9366 39.7432 19.9019 39.8155 cv19.8653 39.8897 19.8223 39.9502 19.773 40 cv19.6734 40.0967 19.5894 40.128 19.4371 40.128 cv19.1519 40.128 18.8311 39.9761 17.9717 39.4297 cv17.1011 38.875 16.3155 38.5826 15.6924 38.5826 cv14.3716 38.5826 13.3038 39.6504 13.3038 40.9668 cv13.3038 42.8106 14.4253 43.6397 17.9542 44.4078 cv19.2935 44.6998 19.8843 45.0938 19.8843 45.69 cv19.8843 46.2344 19.4434 46.5792 18.7461 46.5792 cv18.5337 46.5792 18.3682 46.5645 18.2481 46.542 cv18.129 46.5171 17.4981 46.3448 16.355 46.025 cv15.5665 45.8077 14.6827 45.6817 13.9 45.6817 cv12.5181 45.6817 11.5845 46.0938 10.9498 46.982 cv10.877 47.0865 10.8047 47.149 10.7549 47.149 cv10.7183 47.149 10.6631 47.1236 10.6026 47.0733 cv10.3443 46.8731 li10.1641 46.731 9.87647 46.6207 9.68458 46.6207 cv9.5459 46.6207 9.41309 46.6763 9.29737 46.7793 cv9.20411 46.8643 9.13868 46.9087 9.10938 46.9087 cv9.00538 46.9087 8.81739 46.6783 8.67334 46.3755 cv8.46729 45.9473 8.36084 45.5166 8.36084 45.126 cv8.36084 44.9419 8.41553 44.813 8.49854 44.813 cv8.56202 44.813 8.60938 44.8648 8.63624 44.9615 cv8.78321 45.4937 li8.86426 45.7906 9.03174 46.0269 9.15772 46.0269 cv9.21436 46.0269 9.3125 45.9473 9.42676 45.8057 cv9.49366 45.7237 9.54297 45.6358 9.57374 45.5484 cv9.6875 45.2105 9.71729 45.1622 9.80713 45.1622 cv9.91553 45.1622 9.96924 45.2295 10.043 45.5669 cv10.0557 45.6285 10.0762 45.7217 10.1602 45.879 cv10.2369 46.0191 10.3086 46.1329 10.3799 46.2115 cv10.4376 46.2706 10.5064 46.3067 10.5728 46.3067 cv10.7334 46.3067 10.8819 46.0357 10.8819 45.7403 cv10.879 45.6602 li10.856 45.3179 li10.856 45.1851 10.877 45.1465 10.9498 45.1465 cv10.9957 45.1465 11.0289 45.1705 11.0811 45.2378 cv11.1587 45.337 11.2657 45.4234 11.3921 45.4937 cv11.504 45.5542 11.5953 45.5865 11.6539 45.5865 cv11.7085 45.5865 11.772 45.5523 11.8326 45.4937 cv11.8829 45.4478 11.9092 45.3936 11.9092 45.3501 cv11.9092 45.293 11.8438 45.2105 11.6504 45.0157 cv11.5445 44.9112 11.418 44.6597 11.2813 44.2818 cv11.23 44.1382 11.1617 44.042 11.1075 44.042 cv11.0933 44.042 11.0528 44.0533 10.9883 44.0796 cv10.7496 44.1714 li10.5835 44.2432 li10.5196 44.2579 li10.4429 44.2579 10.379 44.1988 10.379 44.1294 cv10.379 44.0582 10.5459 43.8604 10.7496 43.6919 cv10.8946 43.5723 10.982 43.3926 10.9883 43.1958 cv10.9996 42.8897 11.0557 42.6451 11.1172 42.6451 cv11.1724 42.003 li11.1983 41.6778 11.3316 41.0704 11.4478 40.7349 cv11.4693 40.6685 11.5 40.625 11.5206 40.625 cv11.5728 40.625 11.6177 40.7618 11.6177 40.9151 cv11.6128 41.0084 li11.6031 41.1949 li11.6031 41.4292 11.6407 41.5474 11.7125 41.5474 cv11.7911 41.5474 11.8829 41.4332 11.9615 41.2305 cv12.1285 40.8072 li12.1763 40.6836 12.2007 40.5669 12.2007 40.4659 cv12.2007 40.1065 11.9874 39.8487 11.691 39.8487 cv11.5586 39.8702 li11.4869 39.896 11.4429 39.9068 11.4278 39.9068 cv11.3296 39.9068 11.2496 39.8013 11.2496 39.6758 cv11.2637 39.4102 li11.2447 39.043 li11.1724 38.6568 li11.1534 38.4732 li10.9883 38.565 li10.7857 38.7295 li10.4913 38.9688 li10.2535 39.1714 li10.211 39.2076 10.1622 39.2271 10.1158 39.2271 cv9.97706 39.2271 9.95752 39.1905 9.95752 38.9034 cv9.9585 38.8316 li9.9585 38.6001 9.85694 38.4185 9.48047 37.9761 cv9.45997 37.9527 9.43018 37.9161 9.38819 37.8668 cv9.31641 37.9952 li9.11377 38.3257 li8.91065 38.8404 li8.87403 39.1714 li8.86426 39.2666 8.82862 39.3384 8.79004 39.3384 cv8.75294 39.3384 8.69044 39.292 8.6167 39.2095 cv8.33692 38.8868 8.24708 38.8277 7.82618 38.6758 cv7.78956 38.8038 li7.72364 39.0215 7.6875 39.1504 7.68018 39.1905 cv7.66114 39.5386 li7.66114 39.6851 li7.66309 39.8042 li7.66309 39.9039 7.62256 39.9629 7.56202 39.9629 cv7.5503 39.9615 li7.54493 39.959 7.50586 39.9273 7.44044 39.8702 cv7.39844 39.8335 7.32081 39.814 7.2168 39.814 cv6.875 39.814 6.65772 40 6.65772 40.2935 cv6.65772 40.5142 6.73389 40.6768 7.07374 41.1929 cv7.22168 41.4195 7.39454 41.6006 7.46534 41.6006 cv7.50879 41.6006 7.54834 41.4795 7.54834 41.3384 cv7.51465 41.1207 li7.4795 41.0132 7.46192 40.919 7.46192 40.8375 cv7.46192 40.7349 7.4917 40.6797 7.54834 40.6797 cv7.71192 40.6797 7.88379 41.1568 7.95606 41.8165 cv8.02881 42.4966 li8.05616 42.7403 8.12989 42.9878 8.25 43.2339 cv8.41651 43.5767 8.58106 43.8101 8.72657 43.9141 cv8.90284 44.0372 9.01026 44.1573 9.01026 44.2271 cv9.01026 44.2837 8.96485 44.3365 8.91456 44.3365 cv8.9087 44.3365 8.78321 44.292 8.54297 44.2076 cv8.38916 44.1817 li8.02149 44.1817 7.9004 44.3936 7.9004 45.0259 cv7.9004 45.7906 8.41456 46.8916 8.98487 47.3492 cv9.83106 48.0289 li10.2574 48.375 10.5835 48.9458 10.5835 49.3545 cv10.5835 49.8912 9.99415 50.4195 8.98487 50.7872 cv8.37745 51.0093 li7.90674 51.1802 7.71876 51.481 7.5337 52.3682 cv7.77393 52.292 7.87891 52.273 8.03956 52.273 cv8.12061 52.275 li8.39502 52.2837 li8.6421 52.2837 8.81934 52.1338 8.81934 51.9273 cv8.81934 51.7627 li8.81934 51.712 8.88721 51.6436 8.98487 51.5953 cv9.14893 51.5152 9.23487 51.4727 9.24219 51.4668 cv9.44385 51.3023 li9.47608 51.274 9.51416 51.2618 9.54688 51.2618 cv9.60303 51.2618 9.64698 51.3101 9.64698 51.3721 cv9.64698 51.4185 9.63526 51.4756 9.61084 51.5416 cv9.54688 51.7032 9.51416 51.9253 9.51416 52.1719 cv9.51416 52.6216 9.58204 52.8619 9.81006 53.1934 cv9.83301 53.0738 9.85108 52.9937 9.86719 52.9551 cv9.90528 52.8619 10.0103 52.6954 10.1797 52.4585 cv10.4571 52.0713 10.6622 51.5972 10.6622 51.3428 cv10.6583 51.2637 li10.6026 50.8418 li10.6026 50.7666 10.6368 50.69 10.6954 50.6416 cv10.7334 50.6036 10.7769 50.5835 10.8204 50.5835 cv10.8975 50.5835 10.9459 50.6329 11.0074 50.7676 cv11.0508 50.8692 11.1031 50.9351 11.1377 50.9351 cv11.2027 50.9351 11.3277 50.7666 11.4112 50.5679 cv11.4693 50.4195 11.503 50.2881 11.503 50.1792 cv11.503 50.1104 11.4849 50.0313 11.4478 49.9405 cv11.4102 49.8492 11.3892 49.7754 11.3892 49.7334 cv11.3892 49.6871 11.4043 49.6612 11.4654 49.6109 cv11.4942 49.5875 11.5274 49.5752 11.5586 49.5752 cv11.5953 49.5752 11.6329 49.5875 11.668 49.6109 cv11.8326 49.7203 li11.8877 49.7593 11.9385 49.7774 11.981 49.7774 cv12.0547 49.7774 12.1578 49.6958 12.2383 49.5752 cv12.3975 49.3277 12.4991 49.1255 12.4991 49.0499 cv12.4991 49.0035 12.4688 48.9649 12.3658 48.8946 cv12.0005 48.6363 11.7588 48.2447 11.7588 47.9107 cv11.7588 47.835 11.7784 47.7447 11.8155 47.6431 cv11.9981 47.149 li12.0909 46.9 12.1412 46.7691 12.1446 46.7623 cv12.1993 46.7418 li12.2618 46.7418 12.3003 46.792 12.3003 46.8834 cv12.3003 46.9439 12.2847 47.0142 12.2549 47.0918 cv12.2105 47.2139 12.1783 47.358 12.1783 47.4429 cv12.1783 47.5733 12.2457 47.6431 12.3711 47.6431 cv12.462 47.6431 12.5669 47.6177 12.6773 47.5689 cv13.2354 47.3301 13.6749 47.2012 13.941 47.2012 cv14.19 47.2012 14.3458 47.2564 14.608 47.4429 cv14.6778 47.4908 14.7364 47.5166 14.7779 47.5166 cv14.8101 47.5166 14.8501 47.4893 14.8848 47.4429 cv14.9078 47.4107 14.9205 47.3785 14.9205 47.3521 cv14.9205 47.2837 14.8814 47.1993 14.8101 47.1119 cv14.7164 46.9937 14.6817 46.9249 14.6817 46.8536 cv14.6817 46.792 14.7198 46.7554 14.7808 46.7554 cv15.0674 46.7554 15.5201 47.6705 15.9502 49.1133 cv16.2901 50.2569 16.3848 50.3731 17.4742 50.9874 cv18.398 51.5103 18.7481 52.0279 18.7481 52.8668 cv18.7481 53.6944 18.521 54.7505 18.0445 56.1353 cv17.8956 56.5752 17.8272 56.8726 17.8272 57.1163 cv17.8272 57.3111 17.8677 57.4966 18.0088 57.9913 cv18.0767 58.2281 18.1192 58.3692 18.1373 58.4136 cv18.1583 58.4683 18.2081 58.5611 18.2857 58.6905 cvf14.0201 56.1163 mo14.1304 55.8628 14.1646 55.8018 14.3697 55.4932 cv14.6666 55.0411 14.774 54.8042 14.774 54.5918 cv14.774 54.2969 li14.774 54.0201 14.8233 53.8931 14.9336 53.8931 cv14.9727 53.8931 15.0084 53.9141 15.0313 53.9498 cv15.1226 54.0962 li15.1519 54.1426 15.2012 54.1719 15.2535 54.1719 cv15.3082 54.1719 15.4053 54.0962 15.4595 54.0152 cv15.5928 53.815 15.6753 53.5567 15.6753 53.358 cv15.6573 53.1587 li15.6382 52.9473 li15.6382 52.8374 15.6836 52.7911 15.7872 52.7911 cv15.8614 52.7911 15.8902 52.8204 15.9502 52.9551 cv15.9918 53.0464 16.045 53.1055 16.0899 53.1055 cv16.1402 53.1055 16.1968 53.0606 16.2432 52.9918 cv16.3907 52.772 li16.502 52.605 li16.5293 52.5186 li16.5293 52.4668 16.4898 52.4195 16.3907 52.3497 cv16.0503 52.1041 15.9019 51.7266 15.8765 51.0445 cv15.8575 50.5274 15.8272 50.1866 15.7852 50.0337 cv15.7754 49.9996 15.6631 49.7354 15.4537 49.2437 cv15.3716 49.0499 15.2964 48.8287 15.233 48.5831 cv15.1905 48.4117 15.1373 48.3609 15.0035 48.3609 cv14.504 48.3609 14.1285 48.7876 14.1285 49.3516 cv14.1285 49.6822 14.2642 50.2066 14.5171 50.8418 cv14.8716 51.7354 14.9659 52.0528 14.9659 52.3682 cv14.9659 53.045 14.6939 53.337 13.7627 53.6739 cv12.711 54.0513 12.2173 54.5918 12.0357 55.565 cv12.1182 55.5332 12.1783 55.5079 12.2193 55.4932 cv12.337 55.4454 12.4234 55.4126 12.4756 55.4 cv12.771 55.3262 li13.0225 55.2657 13.2256 55.1221 13.2667 54.9786 cv13.3409 54.7183 li13.3599 54.6578 13.3941 54.6163 13.4512 54.5918 cv13.6153 54.5196 li13.7828 54.4468 li13.8184 54.5196 li13.7461 54.7564 li13.7203 54.835 13.7081 54.9805 13.7081 55.1851 cv13.7081 55.5879 13.7876 55.8248 14.0201 56.1163 cvf4.15088 39.1172 mo4.17579 39.2183 4.18848 39.2881 4.18848 39.3218 cv4.18848 39.3804 4.16358 39.5386 4.11377 39.7974 cv4.08155 40.171 li4.08155 40.5 4.13916 40.8467 4.24366 41.1373 cv4.3379 41.4019 4.36133 41.4859 4.36133 41.5577 cv4.35254 41.6343 li4.33985 41.712 4.30665 41.7647 4.28223 41.7647 cv4.24561 41.7647 4.17969 41.7261 4.09522 41.6524 cv3.88526 41.4688 3.6543 41.375 3.417 41.375 cv3.33887 41.375 3.23243 41.3892 3.1045 41.4141 cv3.19483 41.6172 li3.47071 42.296 li3.85743 42.8838 li4.26124 43.1597 li4.30176 43.1876 4.33985 43.2232 4.37159 43.2696 cv4.4087 43.3204 4.42774 43.3628 4.42774 43.3907 cv4.42774 43.4229 4.39502 43.4512 4.35254 43.4537 cv3.98584 43.4703 li3.92872 43.4751 3.88526 43.5113 3.88526 43.5508 cv3.88526 43.6119 3.93604 43.796 4.042 44.0972 cv4.22413 44.6299 li4.5376 44.9249 li4.86817 45.1622 li4.96534 45.2334 5.02393 45.3121 5.02393 45.3731 cv5.02393 45.4214 4.9917 45.4727 4.96045 45.4756 cv4.7754 45.4937 li4.71534 45.5 4.68067 45.5523 4.68067 45.6412 cv4.68067 45.7784 4.81055 46.0269 5.05176 46.3584 cv5.33497 46.7452 5.53516 46.8731 5.86036 46.8731 cv6.13526 46.8731 li6.2671 46.8731 6.34815 46.9356 6.34815 47.0406 cv6.34815 47.1275 6.29297 47.1768 6.17237 47.2042 cv5.917 47.2564 5.84082 47.3096 5.84082 47.4253 cv5.84082 47.4737 5.87305 47.543 5.93409 47.626 cv6.08106 47.8262 li6.20362 47.9957 6.34034 48.1055 6.4292 48.1055 cv6.47852 48.1055 6.59522 48.0552 6.69874 47.9366 cv6.86133 47.7476 7.05176 47.5953 7.29346 47.5328 cv7.93018 47.3707 8.0669 47.3067 8.0669 47.1583 cv8.0669 47.1075 8.04053 47.0337 7.99317 46.9463 cv7.78858 46.5831 7.71582 46.3467 7.71582 46.0455 cv7.71582 45.8184 7.65577 45.6602 7.57325 45.6602 cv7.53858 45.6602 7.4834 45.7149 7.42334 45.8057 cv7.27149 46.0391 7.01368 46.1944 6.7793 46.1944 cv6.14405 46.1944 5.37647 45.1978 4.99659 43.877 cv4.90918 43.5723 4.86084 43.2212 4.86084 42.8848 cv4.86084 42.5376 4.90918 42.1509 4.99659 41.7637 cv5.11915 41.2237 5.1875 40.9249 5.19874 40.8633 cv5.22315 40.6143 li5.22315 40.1568 4.80176 39.5704 4.15088 39.1172 cvf5.4751 41.6724 mo5.33838 41.9273 5.21485 42.5015 5.21485 42.8687 cv5.21485 43.0816 5.28516 43.251 5.37549 43.251 cv5.40528 43.251 5.4419 43.2173 5.4751 43.1597 cv5.6753 42.7911 li5.70997 42.7295 5.74317 42.6661 5.80762 42.5694 cv5.88086 42.4585 5.93506 42.3526 5.93506 42.294 cv5.93506 42.0767 5.73487 41.8082 5.4751 41.6724 cvf7.49659 49.96 mo7.5376 50.0015 7.56788 50.0337 7.5879 50.0499 cv7.66846 50.1304 7.71582 50.1812 7.73487 50.1978 cv8.09376 50.5699 8.146 50.6055 8.31885 50.6055 cv8.47852 50.6055 8.81348 50.5142 9.00342 50.4175 cv9.08301 50.3799 9.13038 50.3292 9.13038 50.2925 cv9.13038 50.2701 9.06495 50.1954 8.94825 50.0879 cv8.74659 49.9043 li8.59424 49.7671 8.36524 49.6387 8.25782 49.6387 cv8.04688 49.6387 7.83008 49.7305 7.49659 49.96 cvf11.7608 53.2872 mo11.9556 53.3697 12.0274 53.4044 12.1285 53.4683 cv12.293 53.5801 12.3907 53.6407 12.4224 53.6524 cv12.4786 53.6773 12.5767 53.6924 12.711 53.6924 cv12.7964 53.6924 12.8721 53.6773 12.9351 53.6524 cv13.3223 53.5064 li13.6895 53.3799 li13.7906 53.3438 13.8555 53.2886 13.8555 53.2383 cv13.8555 53.211 13.772 53.171 13.6519 53.1392 cv13.5708 53.1207 13.4786 53.0889 13.378 53.0479 cv12.9253 52.8668 12.8594 52.8394 12.6983 52.8394 cv12.3384 52.8394 11.9751 53.0123 11.7608 53.2872 cvf16.4102 56.9795 mo16.5333 56.6861 16.6172 56.6348 17.0347 56.6143 cv17.5069 56.5889 17.9561 55.7422 17.9561 55.1705 cv17.9561 55.1133 17.9351 55.0655 17.9122 55.0655 cv17.8887 55.0655 17.8472 55.086 17.7876 55.126 cv17.6553 55.212 17.564 55.2676 17.5127 55.2911 cv16.9805 55.5294 li16.625 55.688 16.3116 56.1607 16.3116 56.5362 cv16.3116 56.6617 16.3345 56.7691 16.4102 56.9795 cvf49.9136 52.5889 mo49.9883 52.3853 li50.0621 52.1299 li50.0752 52.0782 50.1426 51.9737 50.2637 51.8155 cv50.4507 51.5708 50.545 51.2637 50.545 50.9009 cv50.545 50.7872 50.5162 50.6851 50.4478 50.5489 cv50.4097 50.4747 50.3916 50.4156 50.3916 50.378 cv50.3916 50.3521 50.4043 50.3204 50.4297 50.2911 cv50.4517 50.2608 50.4795 50.2408 50.5025 50.2334 cv50.5152 50.2334 li50.563 50.2334 50.6416 50.2881 50.7051 50.3643 cv50.7833 50.4576 50.8516 50.5103 50.8902 50.5103 cv50.9742 50.5103 51.0621 50.3731 51.1094 50.1622 cv51.1348 50.0499 51.147 49.9913 51.147 49.98 cv51.147 49.8892 51.0723 49.6592 50.9795 49.4634 cv50.9458 49.3916 50.9273 49.3248 50.9273 49.2784 cv50.9273 49.2105 50.9722 49.1597 51.0289 49.1597 cv51.0811 49.1597 51.1695 49.2164 51.274 49.3174 cv51.3248 49.3663 51.3741 49.3916 51.4126 49.3916 cv51.5289 49.3916 51.6114 49.2725 51.6963 48.9864 cv51.752 48.8067 51.771 48.7256 51.771 48.6993 cv51.771 48.6441 51.7471 48.6119 51.7061 48.6119 cv51.6412 48.6187 li51.4244 48.6402 li51.0879 48.6402 50.6153 48.4117 50.3926 48.1397 cv49.878 47.5166 li49.6783 47.272 49.4024 46.9087 49.419 46.9087 cv48.9947 46.6329 li48.9258 46.5894 48.8853 46.5328 48.8853 46.4815 cv48.8853 46.4136 48.9546 46.3672 49.0591 46.3672 cv49.1587 46.3672 49.4585 46.4747 50.0059 46.7066 cv50.5367 46.9317 51.3682 47.1119 51.8697 47.1119 cv52.7476 47.1119 53.4727 46.4034 53.4727 45.5411 cv53.4727 45.0689 53.2618 44.6319 52.7447 44.024 cv52.6475 43.9083 52.482 43.7999 52.4053 43.7999 cv52.3458 43.7999 52.3042 43.8414 52.3042 43.9063 cv52.3042 43.9566 52.3228 44.0279 52.3609 44.1148 cv52.3824 44.1734 52.397 44.2281 52.397 44.2837 cv52.397 44.3682 52.3638 44.4166 52.3077 44.4166 cv52.1915 44.4166 52.0718 44.2271 51.9737 43.8951 cv51.8516 43.4854 51.6114 43.2403 51.0538 42.9576 cv50.8399 42.8501 50.5621 42.7486 50.4717 42.7486 cv50.4351 42.7486 50.4097 42.7837 50.4097 42.8292 cv50.4097 42.8995 50.4371 42.9766 50.4844 43.0489 cv50.566 43.1729 50.6172 43.2935 50.6309 43.3995 cv50.6319 43.4161 li50.6319 43.4874 50.5953 43.5274 50.5298 43.5274 cv50.4117 43.5274 50.3838 43.4986 50.1163 43.0865 cv49.9791 42.8736 49.6089 42.5967 49.2891 42.4615 cv49.1885 42.419 49.0826 42.3941 48.9766 42.3873 cv48.9659 42.3873 li48.8995 42.3873 48.8492 42.419 48.8492 42.4585 cv48.8492 42.4742 48.8765 42.5308 48.9307 42.6275 cv48.959 42.7295 li48.959 42.7876 48.9205 42.8292 48.8721 42.8292 cv48.7618 42.8292 48.421 42.5503 48.15 42.2422 cv47.8589 41.9039 47.6714 41.4756 47.6714 41.1412 cv47.6714 40.4385 48.3428 39.814 49.0962 39.814 cv49.2833 39.814 49.4439 39.8448 49.5655 39.9068 cv50.2085 40.2374 li50.9625 40.7349 li51.396 41.0191 51.9893 41.2334 52.3506 41.2334 cv52.483 41.2334 52.584 41.2139 52.9297 41.1207 cv53.1084 41.0704 53.2212 40.9981 53.2212 40.9332 cv53.2134 40.9161 li53.15 40.8794 li52.7447 40.8438 li52.5201 40.8243 52.0103 40.5923 51.6065 40.3301 cv50.7598 39.7774 li50.0059 39.4659 li49.9498 39.4429 49.9126 39.4043 49.9126 39.3682 cv49.9126 39.3306 49.9522 39.3003 49.9986 39.3003 cv50.0005 39.3003 50.0708 39.3111 50.2085 39.3365 cv50.9063 39.5386 li51.0811 39.5904 51.3643 39.7193 51.753 39.9253 cv52.5201 40.3331 53.0181 40.5123 53.3863 40.5123 cv53.8111 40.5123 54.1226 40.2212 54.1226 39.8238 cv54.1226 39.6919 54.0933 39.4737 54.0494 39.3003 cv54.0284 39.2154 53.9908 39.1334 53.9395 39.0621 cv53.9063 39.0157 53.8731 38.9888 53.8472 38.9888 cv53.796 38.9888 53.7647 39.045 53.7647 39.1397 cv53.775 39.2637 li53.7813 39.3697 li53.7813 39.71 53.6485 39.8287 53.2725 39.8287 cv52.9688 39.8287 52.5596 39.7081 51.6236 39.3365 cv50.7481 38.9903 50.2017 38.857 49.6563 38.857 cv48.2725 38.857 47.0606 39.9883 47.0606 41.2769 cv47.0606 42.3873 47.7999 43.2359 49.3072 43.8575 cv50.8692 44.501 li52.1617 45.0337 52.6353 45.4136 52.6353 45.9166 cv52.6353 46.336 52.2466 46.6036 51.6387 46.6036 cv51.377 46.6036 51.0499 46.5298 50.4478 46.3399 cv48.9839 45.8736 48.0342 45.6797 47.1983 45.6797 cv45.8331 45.6797 44.8628 46.0533 44.0879 46.8731 cv43.9859 46.98 43.9253 47.0142 43.834 47.0142 cv43.7735 47.0142 43.71 46.9883 43.5728 46.9087 cv43.4332 46.8262 43.2803 46.775 43.168 46.775 cv43.0362 46.775 42.8262 46.8916 42.7276 47.0201 cv42.5455 47.2584 li42.4908 47.3282 42.4302 47.3687 42.3819 47.3687 cv42.2486 47.3687 42.0123 47.1402 41.8648 46.8731 cv41.774 46.7066 41.712 46.545 41.6807 46.3931 cv41.6553 46.2774 41.6421 46.0899 41.6421 45.8907 cv41.6626 45.5484 li41.7173 45.1812 li41.7427 45.0059 41.7632 44.9014 41.773 44.8687 cv41.7867 44.8267 41.8233 44.7945 41.8609 44.7945 cv41.9551 44.7945 41.9981 44.8838 41.9981 45.0826 cv41.9937 45.1998 li41.9898 45.2828 li41.9898 45.8057 42.1983 46.2847 42.4249 46.2847 cv42.6041 46.2847 42.7618 45.9639 42.8936 45.3296 cv42.9205 45.1998 42.9727 45.126 43.0342 45.126 cv43.1089 45.126 43.1524 45.2188 43.2056 45.4937 cv43.2403 45.6734 43.357 45.9205 43.4825 46.0826 cv43.5547 46.1753 43.6309 46.2305 43.6915 46.2305 cv43.8423 46.2305 43.9405 46.0015 44.0147 45.4756 cv44.0455 45.2696 44.105 45.1431 44.1758 45.1431 cv44.2066 45.1431 44.2344 45.1563 44.253 45.1812 cv44.2671 45.1978 44.3101 45.2657 44.3829 45.3834 cv44.4283 45.4576 44.4981 45.521 44.5835 45.5684 cv44.6768 45.6158 44.751 45.6412 44.7984 45.6412 cv44.8555 45.6412 44.919 45.6143 44.9698 45.5684 cv45.0523 45.4937 45.0992 45.438 45.0992 45.4175 cv45.0992 45.3882 45.0596 45.3331 44.9883 45.2554 cv44.8677 45.1241 44.7754 44.9537 44.6578 44.649 cv44.5806 44.4468 44.5264 44.3077 44.4937 44.2247 cv44.4659 44.1592 44.4332 44.1128 44.4 44.0972 cv44.3414 44.084 li44.2354 44.0972 li44.2139 44.105 44.086 44.1382 43.8501 44.2076 cv43.7291 44.2227 li43.6783 44.2227 43.6436 44.19 43.6436 44.1382 cv43.6436 44.0879 43.7081 43.9986 43.794 43.9312 cv44.2584 43.5626 44.5352 42.9415 44.6392 42.0372 cv44.7037 41.4898 44.7745 41.2818 45.0069 40.9537 cv45.0586 40.8838 45.0992 40.8438 45.1211 40.8438 cv45.1934 40.8438 45.231 40.9009 45.231 41.0069 cv45.231 41.0757 45.211 41.1675 45.1734 41.2671 cv45.1465 41.336 45.1338 41.4141 45.1338 41.4898 cv45.1363 41.5601 li45.1734 41.6724 li45.3746 41.5987 li45.5938 41.3404 li45.7266 41.191 45.836 40.8438 45.836 40.5889 cv45.836 40.4141 45.7935 40.2916 45.6871 40.1641 cv45.5723 40.0264 45.4922 39.9703 45.4087 39.9703 cv45.2837 39.981 li45.1524 39.9883 li45.0337 39.9883 44.9747 39.9551 44.9747 39.8819 cv45.0069 39.7413 li45.0259 39.5386 li44.9161 39.0806 li44.8228 38.8589 li44.7676 38.6758 li44.6392 38.7676 li44.3633 38.9332 li44.294 38.9747 44.2188 39.044 44.1426 39.1353 cv43.8829 39.4527 43.8643 39.4659 43.7608 39.4659 cv43.6934 39.4659 43.6563 39.4419 43.6563 39.3965 cv43.6656 39.3199 li43.7032 39.1504 43.7203 39.0215 43.7203 38.9371 cv43.7203 38.6158 43.4883 38.1334 43.2056 37.8668 cv42.8243 38.2339 42.6182 38.6397 42.6182 39.0264 cv42.6182 39.2457 li42.6182 39.3306 42.5899 39.3746 42.5337 39.3746 cv42.5264 39.3726 li42.481 39.3663 42.4346 39.3316 42.397 39.2818 cv42.1768 38.9888 li42.1617 38.9668 42.0616 38.8868 41.8829 38.7496 cv41.8482 38.7222 41.7999 38.6797 41.7364 38.6207 cv41.6626 38.7676 li41.481 39.1319 41.4166 39.3497 41.4058 39.6504 cv41.396 39.896 41.376 39.9649 41.3194 39.9649 cv41.292 39.9649 41.2505 39.9532 41.2032 39.9253 cv40.9249 39.7666 40.899 39.7574 40.7779 39.7574 cv40.4468 39.7574 40.2217 39.9952 40.2217 40.3433 cv40.2217 40.4786 40.2989 40.6836 40.4478 40.9537 cv40.6172 41.2535 40.8697 41.5298 40.9795 41.5298 cv41.0132 41.5298 41.021 41.5069 41.021 41.4156 cv41.0181 41.376 li41.001 41.0635 li40.9629 40.8262 li40.961 40.793 li40.961 40.7232 40.9883 40.69 41.0435 40.69 cv41.211 40.69 41.3555 41.1773 41.4781 42.149 cv41.5879 43.004 41.8233 43.5933 42.1954 43.9312 cv42.2911 44.0186 42.3438 44.0889 42.3438 44.1294 cv42.3438 44.1631 42.3111 44.1885 42.2706 44.1885 cv42.2173 44.1885 42.1334 44.1573 42.0293 44.0972 cv41.9639 44.0582 41.8965 44.0391 41.8311 44.0391 cv41.6465 44.0391 41.4405 44.254 41.4058 44.482 cv41.2393 45.5318 li41.1109 46.9986 li41.086 47.2798 41.1226 47.6519 41.2208 48.1026 cv41.3077 48.5005 41.3497 48.7916 41.3497 48.9756 cv41.3497 50.0777 40.6626 50.9478 39.5308 51.2847 cv38.3536 51.6314 li37.6207 51.8506 37.2593 52.3326 37.1592 53.232 cv37.3472 53.0796 37.4043 53.0567 37.6934 53.0103 cv38.0411 52.9551 li38.188 52.9327 38.295 52.9004 38.3536 52.8619 cv38.3868 52.8433 38.4556 52.7759 38.5557 52.6617 cv38.8682 52.3135 li38.9874 52.1802 39.0914 52.1041 39.1578 52.1041 cv39.2017 52.1041 39.2378 52.1509 39.2378 52.2129 cv39.2378 52.2798 39.1924 52.3824 39.1075 52.5137 cv39.0206 52.6495 38.9737 52.8135 38.9737 52.9869 cv38.9737 53.2232 39.0367 53.3716 39.272 53.709 cv39.3033 53.5992 39.3282 53.5235 39.3467 53.4883 cv39.3775 53.4283 39.4688 53.2994 39.6216 53.1036 cv39.876 52.774 40.0591 52.4283 40.063 52.275 cv40.0679 51.9883 40.0938 51.8951 40.1641 51.8951 cv40.2276 51.8951 40.2374 51.9126 40.2647 52.0733 cv40.273 52.1133 40.292 52.1509 40.3213 52.1832 cv40.3624 52.2315 40.4043 52.2593 40.4332 52.2593 cv40.4566 52.2593 40.5064 52.2315 40.5782 52.1832 cv40.7051 52.1001 40.8042 52.0113 40.8726 51.9273 cv40.9488 51.8345 41.0093 51.7198 41.0547 51.5953 cv41.1168 51.4346 41.148 51.3165 41.148 51.2496 cv41.147 51.0108 li41.147 50.9478 41.1734 50.897 41.2081 50.897 cv41.2515 50.897 41.3458 50.9922 41.4058 51.0997 cv41.4463 51.1714 41.4708 51.1929 41.522 51.1929 cv41.5328 51.1929 li41.5992 51.1841 41.6568 51.1583 41.6978 51.1182 cv41.9244 50.899 42.0674 50.628 42.0674 50.4297 cv42.0479 50.0879 li41.9756 49.8135 li41.9717 49.7891 li41.9717 49.7334 42.0132 49.6851 42.0606 49.6851 cv42.1451 49.6851 42.2349 49.8008 42.3589 50.0718 cv42.42 50.1978 42.4742 50.2569 42.5284 50.2569 cv42.6168 50.2569 42.6846 50.1944 42.8565 49.9405 cv43.0225 49.7037 li43.0601 49.6514 43.0787 49.5855 43.0787 49.5176 cv43.0787 49.4546 43.0601 49.3916 43.0225 49.3335 cv42.8755 49.1133 li42.8501 49.0782 42.8375 49.0127 42.8375 48.9278 cv42.8375 48.6822 42.9288 48.396 43.1143 48.0674 cv43.2491 47.8262 43.3282 47.6724 43.3536 47.6075 cv43.3819 47.5289 43.4122 47.4966 43.4556 47.4966 cv43.4883 47.4966 43.5181 47.5411 43.5181 47.5894 cv43.4996 47.793 li43.4996 47.9366 li43.4996 48.0865 li43.5245 48.1509 43.5708 48.1792 43.6583 48.1792 cv43.7154 48.1792 43.7803 48.1651 43.8501 48.1397 cv44.3082 47.9761 li44.4175 47.9346 44.5601 47.8672 44.731 47.774 cv45.4517 47.3741 45.6734 47.2925 46.0289 47.2925 cv46.2413 47.2925 46.5118 47.3721 46.9009 47.5518 cv46.98 47.5894 47.0435 47.6094 47.0899 47.6094 cv47.1421 47.6094 47.2002 47.5733 47.2496 47.5166 cv47.2847 47.4737 47.3057 47.4239 47.3057 47.3765 cv47.3057 47.3096 47.2798 47.23 47.2315 47.149 cv47.171 47.0464 47.1197 46.9195 47.1197 46.8731 cv47.1197 46.8248 47.1519 46.792 47.2027 46.792 cv47.2461 46.792 47.3086 46.8389 47.3418 46.8916 cv47.3965 46.9761 47.5362 47.2227 47.7642 47.626 cv48.107 48.233 48.5518 48.6573 48.9419 48.7476 cv49.7491 48.9307 li49.9986 48.9878 50.063 49.0826 50.063 49.3975 cv50.063 49.9673 49.7925 50.4698 49.3257 50.7676 cv48.6651 51.1929 li48.4239 51.3467 48.2232 51.7662 48.2232 52.1216 cv48.2232 52.3477 48.2793 52.7466 48.3521 53.0655 cv48.482 52.9385 li48.794 52.7535 li49.0689 52.4781 li49.2159 52.0733 li49.3614 51.7051 li49.4341 51.5279 49.5186 51.4117 49.5767 51.4117 cv49.6416 51.4117 49.6773 51.5103 49.6773 51.6929 cv49.6753 51.7432 li49.6734 51.8111 li49.6734 52.0748 49.7085 52.1919 49.9136 52.5889 cvf39.0528 58.1582 mo39.2759 57.9512 39.3121 57.9366 39.9346 57.8072 cv40.4376 57.7032 40.6739 57.4786 40.7808 56.9795 cv40.8594 56.6143 40.9102 56.5464 41.2393 56.3565 cv41.3458 56.296 41.4263 56.2325 41.4781 56.1734 cv41.5191 56.127 41.5518 56.0992 41.5699 56.0992 cv41.607 56.0992 41.6343 56.1338 41.6343 56.1817 cv41.6343 56.2457 41.5948 56.3477 41.5152 56.4859 cv41.4649 56.5723 41.4405 56.6812 41.4405 56.8365 cv41.4405 57.1314 41.502 57.3321 41.6626 57.5713 cv41.774 57.3233 41.8355 57.2564 42.1226 57.0542 cv42.4869 56.7984 42.6255 56.501 42.6919 55.8404 cv42.7193 55.5611 42.773 55.4175 42.8492 55.4175 cv42.8829 55.4175 42.9141 55.4395 42.9307 55.4742 cv43.0601 55.7491 li43.0757 55.7867 43.1207 55.8101 43.1749 55.8101 cv43.2261 55.8101 43.3243 55.7554 43.4083 55.6758 cv43.6656 55.4366 li43.7745 55.3374 43.8472 55.084 43.8853 54.6661 cv43.9 54.5142 43.9527 54.4082 44.0137 54.4082 cv44.0523 54.4082 44.0899 54.4468 44.107 54.4991 cv44.2168 54.8668 li44.2442 54.9546 44.296 55.0166 44.3482 55.0166 cv44.3707 55.0166 44.4224 54.9825 44.4937 54.9234 cv44.5918 54.837 44.6788 54.7437 44.751 54.6456 cv44.8331 54.5323 44.878 54.4034 44.878 54.2798 cv44.878 53.9668 li44.878 53.9 44.9043 53.8272 44.9517 53.7637 cv44.9874 53.7173 45.0181 53.6905 45.0337 53.6905 cv45.0748 53.6905 45.1153 53.7256 45.1363 53.7828 cv45.21 53.9859 li45.2418 54.0723 45.3111 54.1314 45.3824 54.1314 cv45.4795 54.1314 45.5772 54.0494 45.7247 53.8374 cv45.7662 53.7789 45.8028 53.7286 45.8331 53.6924 cv45.9166 53.5889 45.9629 53.5084 45.9629 53.4576 cv45.9629 53.4327 45.9371 53.3853 45.8897 53.3233 cv45.6207 52.9747 45.4844 52.5547 45.4844 52.0748 cv45.4844 51.462 45.7168 50.9498 46.4219 49.9976 cv46.8448 49.4268 47.085 48.8946 47.085 48.5254 cv47.085 48.418 47.0357 48.3658 46.938 48.3658 cv46.8736 48.3658 46.8057 48.3892 46.7178 48.4346 cv46.6485 48.4703 46.6006 48.4893 46.5772 48.4893 cv46.544 48.4893 46.5015 48.4629 46.4595 48.4166 cv46.3301 48.2701 li46.2393 48.1216 li46.2032 48.0645 46.1451 48.0289 46.086 48.0289 cv46.0767 48.0289 46.0289 48.042 45.9444 48.0674 cv45.7798 48.0865 li45.586 48.0933 45.5171 48.1602 45.5171 48.3423 cv45.521 48.4542 li45.525 48.5342 li45.525 48.6963 45.3834 48.941 45.1905 49.1133 cv44.8418 49.4268 li44.4117 49.8116 44.0787 50.4263 44.0787 50.8335 cv44.0787 51.0093 44.1343 51.292 44.2354 51.6314 cv44.4 52.1832 44.459 52.4424 44.459 52.6216 cv44.459 53.5044 43.1114 54.6661 40.6143 55.9351 cv39.3487 56.5772 39.0313 56.9561 39.0313 57.8311 cv39.0528 58.1582 lif37.8399 38.878 mo37.8399 39.0621 li37.8418 39.3335 li37.8418 39.4317 37.8321 39.5 37.8033 39.6319 cv37.7437 39.8858 37.7276 39.9742 37.7276 40.0464 cv37.7276 40.3995 37.7789 40.5718 37.9869 40.9366 cv38.1011 41.1353 38.1739 41.378 38.1739 41.5542 cv38.1739 41.6255 38.1456 41.6724 38.0953 41.6724 cv38.064 41.6724 38.0298 41.6504 38.004 41.6172 cv37.858 41.4141 li37.7408 41.2535 37.6304 41.209 37.3316 41.209 cv37.0132 41.2305 li37.1407 41.5455 37.1812 41.6636 37.233 41.8726 cv37.3819 42.4722 37.4034 42.5142 37.7305 42.8106 cv38.0577 43.106 38.0875 43.1456 38.0875 43.251 cv38.0875 43.334 38.0318 43.3995 37.9605 43.3995 cv37.8399 43.3804 li37.7686 43.3736 li37.667 43.3736 37.5777 43.5567 37.5777 43.7623 cv37.5777 43.879 37.6246 44.0669 37.6934 44.2247 cv37.7388 44.3335 37.7823 44.4058 37.8213 44.4468 cv38.004 44.6299 li38.0528 44.6768 38.0792 44.7461 38.0792 44.8179 cv38.0792 44.9063 38.0279 44.9805 37.9668 44.9805 cv37.9307 44.9805 37.8741 44.9615 37.8033 44.9249 cv37.7559 44.8995 37.7125 44.8877 37.6739 44.8877 cv37.5914 44.8877 37.5528 44.9361 37.5528 45.0376 cv37.5826 45.3091 li37.6934 45.7886 li37.7154 45.8926 37.7862 46.0142 37.8946 46.1373 cv37.9883 46.2452 38.0826 46.3208 38.17 46.3584 cv38.4034 46.4585 38.5264 46.5137 38.5376 46.522 cv38.5718 46.5469 38.5928 46.6036 38.5928 46.6695 cv38.5928 46.7418 38.5376 46.7984 38.4712 46.7984 cv38.4507 46.7984 38.3868 46.7862 38.2803 46.7623 cv38.0933 46.7437 li37.9083 46.7437 37.8946 46.752 37.8946 46.9 cv37.8946 46.9903 37.9063 47.0865 37.9307 47.1827 cv38.004 47.4805 li38.0826 47.7881 38.1841 47.9571 38.295 47.9571 cv38.3194 47.9571 38.3658 47.9297 38.4278 47.8843 cv38.6939 47.6807 39.2276 47.4966 39.5606 47.4966 cv39.9078 47.4966 40.3013 47.5376 40.4478 47.5894 cv40.5342 47.6177 40.5933 47.6334 40.6275 47.6334 cv40.671 47.6334 40.6846 47.5875 40.688 47.4239 cv40.7251 47.0918 li40.7984 46.522 li40.8536 46.0997 li40.8536 45.8614 li40.7881 45.9175 40.7383 45.96 40.7051 45.9883 cv40.3931 46.2847 40.1958 46.3755 39.8731 46.3755 cv39.0274 46.3755 38.5435 45.4258 38.5435 43.7676 cv38.5435 43.0835 38.6446 42.1197 38.8326 41.0084 cv38.8721 40.774 38.8897 40.6143 38.8897 40.4981 cv38.8897 39.896 38.5074 39.3042 37.8399 38.878 cvf39.0894 42.9947 mo39.2549 42.8272 li39.4205 42.6807 li39.5547 42.5606 39.6685 42.3067 39.6685 42.1168 cv39.6685 42.0323 39.6485 41.9507 39.6045 41.8536 cv39.5396 41.7159 39.4175 41.5958 39.3428 41.5958 cv39.2808 41.5958 39.2237 41.7457 39.2007 41.9839 cv39.1626 42.2584 li39.1075 42.5357 li39.0894 42.8106 li39.0894 42.9947 lif37.4703 50.5103 mo37.6602 50.5816 37.6993 50.6143 37.8946 50.8418 cv38.1485 51.1397 38.2901 51.2115 38.6285 51.2115 cv38.7193 51.2115 38.8057 51.1963 38.8877 51.1714 cv39.127 51.0997 li39.3091 51.0445 li39.3975 51.0166 39.4576 50.9815 39.4576 50.9498 cv39.4576 50.9126 39.3121 50.7891 39.0894 50.6416 cv38.9419 50.5401 38.795 50.4556 38.6495 50.3834 cv38.4883 50.3033 38.3575 50.2701 38.2261 50.2701 cv37.9668 50.2701 37.7183 50.3472 37.4703 50.5103 cvf39.9712 55.897 mo40.296 55.7554 40.4097 55.6988 40.7808 55.4932 cv41.1021 55.3121 41.2798 55.2168 41.313 55.1978 cv41.6524 55.0181 41.8101 54.8912 41.8101 54.7969 cv41.8101 54.6749 41.6031 54.606 41.2457 54.606 cv40.5362 54.606 39.9522 55.0923 39.9522 55.6851 cv39.9712 55.897 lif47.4332 51.2286 mo47.6934 51.1734 47.7813 51.106 47.9117 51.1011 cv48.2427 51.1182 li48.2823 51.1011 48.356 51.0528 48.4625 50.9712 cv48.5196 50.9244 48.607 50.8643 48.7193 50.7872 cv49.0875 50.5347 49.1045 50.521 49.1045 50.44 cv49.1045 50.3365 48.9566 50.2881 48.648 50.2881 cv48.0674 50.2881 47.7159 50.5621 47.4332 51.2286 cvf9.75782 6.93409 mo9.66407 6.67823 li9.63916 6.5293 li9.63916 6.3794 9.71534 6.2959 9.92188 6.21827 cv10.2852 6.08106 10.3995 6.02051 10.5469 5.8877 cv10.7496 5.70411 li10.7686 5.69776 li10.8204 5.69776 10.8609 5.75635 10.8609 5.83448 cv10.8609 6.06885 10.6089 6.49952 10.3501 6.94092 cv10.1592 7.26368 10.0704 7.46827 9.99219 7.46827 cv9.90332 7.46827 9.81348 7.32764 9.79395 7.15626 cv9.75782 6.93409 litrue sop0 0 0 1 cmykf8.67334 6.19971 mo8.98487 6.36524 li9.07032 6.41065 9.11573 6.47266 9.11573 6.54297 cv9.09473 6.65967 li9.04932 6.81348 9.08594 6.98536 9.08301 7.05127 cv9.06739 7.37989 8.81739 7.37598 8.71582 7.37598 cv8.65821 7.37598 8.68848 7.3379 8.54297 7.17334 cv8.13916 6.71534 li8.01416 6.57129 7.90674 6.25 7.86329 5.8877 cv7.86133 5.84082 li7.86133 5.7417 7.89161 5.70166 7.97315 5.70166 cv8.02149 5.70166 8.11329 5.74366 8.17627 5.79542 cv8.67334 6.19971 lif9.77393 8.11231 mo10.0684 7.92872 li10.2417 7.9668 li10.4439 7.9668 10.4932 8.02588 10.4932 8.25 cv10.4932 8.57618 10.2881 8.71485 9.9209 9.63672 cv9.75879 10.044 9.72559 10.2813 9.48536 10.2813 cv9.21436 10.2813 9.01026 10.0621 8.8003 9.54444 cv8.56202 8.95606 li8.39307 8.54151 8.31885 8.29151 8.31885 8.14063 cv8.31885 7.99903 8.42676 7.90772 8.59424 7.90772 cv8.68311 7.90772 8.77295 7.93311 8.85645 7.98145 cv8.99659 8.0669 9.07129 8.11036 9.07813 8.11231 cv9.28956 8.13184 li9.38819 8.12989 li9.77393 8.11231 lif44.1138 6.9961 mo43.9605 6.67823 li43.9332 6.53126 li43.9332 6.37305 44.001 6.30274 44.2354 6.21827 cv44.4703 6.13379 44.7242 5.99463 44.8418 5.8877 cv45.044 5.70411 li45.0635 5.69776 li45.1153 5.69776 45.1553 5.75635 45.1553 5.83448 cv45.1553 6.06885 44.94 6.43799 44.6788 6.88233 cv44.4898 7.20264 44.3672 7.46827 44.2881 7.46827 cv44.1978 7.46827 44.1089 7.32764 44.0879 7.15626 cv44.1138 6.9961 lif42.9678 6.19971 mo43.2803 6.36524 li43.3677 6.41163 43.419 6.4917 43.419 6.58057 cv43.4083 6.65967 li43.3165 6.99024 li43.2588 7.35792 li43.2549 7.40137 43.2125 7.43262 43.1636 7.43262 cv43.1504 7.43165 li43.0738 7.4087 42.879 7.32569 42.7515 7.17823 cv42.4742 6.71631 li42.4312 6.66651 42.3233 6.4917 42.232 6.19971 cv42.1993 6.09327 42.1749 5.98975 42.1587 5.8877 cv42.1539 5.83545 li42.1539 5.74366 42.19 5.70166 42.2666 5.70166 cv42.3165 5.70166 42.4073 5.74366 42.4712 5.79542 cv42.9678 6.19971 lif44.0879 8.11231 mo44.3633 7.92872 li44.4703 7.9043 li44.6719 7.9043 44.9063 8.10743 44.9063 8.31885 cv44.9063 8.5 44.6636 8.60743 44.5669 8.86524 cv44.3633 9.69239 li44.2139 10.086 44.021 10.2808 43.7857 10.2808 cv43.5074 10.2808 43.2979 10.0577 43.0958 9.54444 cv43.001 9.30616 42.9224 9.11133 42.8565 8.95606 cv42.7027 8.59522 42.6211 8.32862 42.6211 8.18995 cv42.6211 8.01319 42.7237 7.90772 42.8926 7.90772 cv42.9791 7.90772 43.0689 7.93311 43.1504 7.98145 cv43.2896 8.06592 43.3638 8.1084 43.3726 8.11231 cv43.5855 8.13184 li43.6822 8.12989 li44.0879 8.11231 lif8.21241 40.5503 mo8.12061 40.274 li8.10059 40.1929 li8.10059 40.1661 8.13575 40.1441 8.17823 40.1441 cv8.22071 40.1441 8.31885 40.1939 8.396 40.2569 cv8.47754 40.3204 8.52784 40.316 8.65381 40.3472 cv9.15577 40.4786 9.26026 40.5699 9.26026 40.8121 cv9.24219 41.1207 li9.16797 41.396 li9.13672 41.5132 9.10743 41.5557 9.0503 41.5557 cv9.01026 41.5557 8.69434 41.3252 8.65381 41.2671 cv8.4712 41.0084 li8.21241 40.5503 lif10.4376 41.0069 mo10.1978 41.4332 li10.1397 41.4986 10.1084 41.5323 10.106 41.5337 cv10.0875 41.5367 li9.98975 41.5367 9.89112 41.3135 9.88526 41.0821 cv9.84864 40.7149 li9.87647 40.563 9.96729 40.4981 10.1978 40.4576 cv10.3829 40.4263 10.5093 40.3887 10.564 40.3472 cv10.7408 40.2232 10.8389 40.1548 10.8599 40.146 cv10.8892 40.1382 li10.9405 40.1382 10.9747 40.1749 10.9747 40.2295 cv10.9688 40.2569 li10.8409 40.5699 li10.4376 41.0069 lif9.9585 42.2584 mo10.2535 42.1128 li10.3038 42.0855 10.3521 42.0752 10.3926 42.0752 cv10.5362 42.0752 10.6412 42.1788 10.6412 42.3736 cv10.6412 42.5811 10.4781 42.8643 10.2535 43.2696 cv10.0103 43.71 9.8252 44.0049 9.63819 44.0049 cv9.375 44.0049 8.99854 43.5855 8.63624 42.8838 cv8.55079 42.7193 8.49659 42.523 8.49659 42.3736 cv8.49659 42.1412 8.59815 42.0181 8.79297 42.0181 cv8.87305 42.0181 8.94727 42.0372 9.00342 42.0767 cv9.16797 42.1876 li9.3125 42.2823 9.47608 42.3331 9.63721 42.3331 cv9.75049 42.3331 9.86084 42.3067 9.9585 42.2584 cvf41.8829 40.0347 mo42.1402 40.2007 li42.2872 40.2955 42.4102 40.3628 42.5079 40.4024 cv42.7911 40.5191 42.8936 40.5611 42.8936 40.6695 cv42.8936 40.711 42.8819 40.8082 42.8565 40.8794 cv42.8292 40.962 42.8111 41.0484 42.8018 41.1373 cv42.7769 41.3892 42.625 41.4502 42.5245 41.4502 cv42.4019 41.4502 42.2706 41.2593 42.0655 40.9 cv41.9756 40.7359 41.8443 40.4092 41.773 40.1641 cv41.7632 40.0948 li41.7632 40.0484 41.7901 40.0245 41.8404 40.0245 cv41.8829 40.0347 lif44.3633 40.6753 mo43.9424 41.1016 li43.792 41.2999 43.792 41.4708 43.7574 41.5069 cv43.7291 41.5337 43.6851 41.5523 43.6299 41.5601 cv43.6011 41.5621 li43.4947 41.5621 43.4151 41.4859 43.4083 41.376 cv43.3907 41.0635 li43.3726 40.752 li43.3726 40.7349 li43.3726 40.6124 43.438 40.5503 43.5323 40.5298 cv43.9239 40.4214 li44.3272 40.2193 li44.4449 40.1597 44.481 40.1451 44.5 40.1451 cv44.5464 40.1451 44.5884 40.1929 44.5884 40.2505 cv44.5884 40.2779 44.5728 40.3179 44.5464 40.3672 cv44.3633 40.6753 lif42.5079 41.9253 mo42.7828 42.1304 li42.8501 42.1705 42.9356 42.1929 43.0293 42.1929 cv43.1407 42.1929 43.3067 42.149 43.4625 42.0767 cv43.7032 41.9659 li43.7574 41.9395 43.8047 41.9273 43.8453 41.9273 cv43.9927 41.9273 44.1089 42.0816 44.1089 42.2803 cv44.1089 42.5484 43.9131 42.8272 43.6299 43.2339 cv43.4273 43.6563 li43.2666 43.8848 43.1607 43.9683 43.0293 43.9683 cv42.8101 43.9683 42.7056 43.8443 42.3804 43.1958 cv42.1431 42.7315 42.0479 42.4463 42.0479 42.2203 cv42.0479 42.0269 42.148 41.8907 42.293 41.8907 cv42.3526 41.8907 42.4278 41.8775 42.5079 41.9253 cvf9.37061 8.64405 mo9.13038 8.64405 li9.09571 8.64405 9.06202 8.66602 9.04151 8.69922 cv9.00342 8.792 li9.09473 9.23243 li9.16797 9.61866 li9.20752 9.83106 9.28663 9.91407 9.44483 9.91407 cv9.62598 9.91407 9.73487 9.79004 9.75782 9.56348 cv9.79395 9.15967 li9.81739 8.88916 9.83106 8.74952 9.83106 8.73877 cv9.83106 8.69922 9.81006 8.65918 9.77393 8.62549 cv9.74854 8.6001 9.71534 8.5879 9.68262 8.5879 cv9.66407 8.58887 li9.37061 8.64405 lifalse sop0 0.085 0.94 0 cmykf43.6656 8.64405 mo43.4458 8.64405 li43.4102 8.64405 43.3775 8.66602 43.3536 8.69922 cv43.3174 8.75196 43.2979 8.7837 43.2979 8.792 cv43.3907 9.23243 li43.4625 9.61866 li43.5035 9.83106 43.5391 9.91407 43.6973 9.91407 cv43.8765 9.91407 44.0313 9.79004 44.0513 9.56348 cv44.0879 9.15967 li44.1138 8.88916 44.125 8.74952 44.125 8.73877 cv44.125 8.69922 44.105 8.65918 44.0694 8.62549 cv44.0425 8.6001 44.0098 8.5879 43.9776 8.5879 cv43.9605 8.58887 li43.6656 8.64405 lif9.53565 42.6998 mo9.33301 42.6641 li9.30274 42.6602 li9.18702 42.6602 9.12842 42.7276 9.12842 42.8604 cv9.12842 43.046 9.27295 43.3907 9.4629 43.6563 cv9.49756 43.7032 9.55079 43.733 9.60303 43.733 cv9.72168 43.733 9.80518 43.5084 9.86719 43.1441 cv9.92188 42.8663 li9.92676 42.814 li9.92676 42.6998 9.89502 42.6602 9.79981 42.6602 cv9.75782 42.6641 li9.53565 42.6998 lif42.7457 42.9385 mo42.7657 43.2872 li42.773 43.4478 42.9053 43.6031 43.0323 43.6031 cv43.2017 43.6031 43.3223 43.3511 43.3907 42.9605 cv43.42 42.7808 43.4312 42.7535 43.4312 42.7017 cv43.4312 42.5694 43.3868 42.5328 43.2115 42.5328 cv43.1143 42.5357 li42.9859 42.5357 li42.9034 42.5308 li42.7891 42.5308 42.7447 42.6241 42.7447 42.855 cv42.7457 42.9385 lif22.0528 25.1304 mo23.9981 25.1304 li24.2178 24.6666 24.5186 24.4629 24.982 24.4629 cv25.4424 24.4629 25.7378 24.6558 26.001 25.1304 cv27.5948 25.1304 li27.7876 24.7066 28.1695 24.4629 28.6397 24.4629 cv29.0728 24.4629 29.4908 24.7442 29.6334 25.1304 cv31.1148 25.1304 li31.3384 24.6998 31.6827 24.4629 32.0875 24.4629 cv32.4996 24.4629 32.8345 24.65 33.0796 25.0191 cv33.1543 25.1304 li35.211 25.1304 li35.211 34.6558 li33.4126 34.6558 li33.4126 38.3082 li31.3008 38.3082 li31.3008 34.6558 li25.9629 34.6558 li25.9629 38.3082 li23.8497 38.3082 li23.8497 34.6192 li22.0528 34.6192 li22.0528 25.1304 litrue sop0 0 0 1 cmykf34.5059 33.9229 mo34.5059 25.9126 li22.8199 25.9126 li22.8199 33.9229 li34.5059 33.9229 lifalse sop0 0.91 0.87 0 cmykf24.0347 27.7452 mo23.7291 27.7452 23.4791 27.9918 23.4791 28.2999 cv23.4791 28.6075 23.7291 28.8555 24.0347 28.8555 cv24.3428 28.8555 24.5918 28.6075 24.5918 28.2999 cv24.5918 27.9918 24.3428 27.7452 24.0347 27.7452 cv0 0.085 0.94 0 cmykf0.2776 lw0 lc0 lj4 ml[] 0 dshtrue sadj24.0347 27.7452 mo23.7291 27.7452 23.4791 27.9918 23.4791 28.2999 cv23.4791 28.6075 23.7291 28.8555 24.0347 28.8555 cv24.3428 28.8555 24.5918 28.6075 24.5918 28.2999 cv24.5918 27.9918 24.3428 27.7452 24.0347 27.7452 cvcptrue sop0 0 0 1 cmyk@33.2095 27.7452 mo32.9034 27.7452 32.6534 27.9918 32.6534 28.2999 cv32.6534 28.6075 32.9034 28.8555 33.2095 28.8555 cv33.5181 28.8555 33.7666 28.6075 33.7666 28.2999 cv33.7666 27.9918 33.5181 27.7452 33.2095 27.7452 cvfalse sop0 0.085 0.94 0 cmykf33.2095 27.7452 mo32.9034 27.7452 32.6534 27.9918 32.6534 28.2999 cv32.6534 28.6075 32.9034 28.8555 33.2095 28.8555 cv33.5181 28.8555 33.7666 28.6075 33.7666 28.2999 cv33.7666 27.9918 33.5181 27.7452 33.2095 27.7452 cvcptrue sop0 0 0 1 cmyk@24.0347 32.0982 mo23.7291 32.0982 23.4791 32.3472 23.4791 32.6553 cv23.4791 32.9625 23.7369 33.2105 24.0547 33.2105 cv24.3526 33.2105 24.5918 32.9625 24.5918 32.6553 cv24.5918 32.3472 24.3428 32.0982 24.0347 32.0982 cvfalse sop0 0.085 0.94 0 cmykf24.0347 32.0982 mo23.7291 32.0982 23.4791 32.3472 23.4791 32.6553 cv23.4791 32.9625 23.7369 33.2105 24.0547 33.2105 cv24.3526 33.2105 24.5918 32.9625 24.5918 32.6553 cv24.5918 32.3472 24.3428 32.0982 24.0347 32.0982 cvcptrue sop0 0 0 1 cmyk@33.2095 32.0982 mo32.9034 32.0982 32.6534 32.3472 32.6534 32.6553 cv32.6534 32.9625 32.9034 33.2105 33.2095 33.2105 cv33.5181 33.2105 33.7666 32.9625 33.7666 32.6553 cv33.7666 32.3472 33.5181 32.0982 33.2095 32.0982 cvfalse sop0 0.085 0.94 0 cmykf33.2095 32.0982 mo32.9034 32.0982 32.6534 32.3472 32.6534 32.6553 cv32.6534 32.9625 32.9034 33.2105 33.2095 33.2105 cv33.5181 33.2105 33.7666 32.9625 33.7666 32.6553 cv33.7666 32.3472 33.5181 32.0982 33.2095 32.0982 cvcptrue sop0 0 0 1 cmyk@25.7779 30.4136 mo26.5323 31.3565 27.483 31.8213 28.6568 31.8213 cv29.7461 31.8213 30.4947 31.4332 31.3746 30.4136 cv30.4966 29.5118 29.6788 29.1338 28.6026 29.1338 cv27.4742 29.1338 26.4546 29.5962 25.7779 30.4136 cvfalse sop0 0.085 0.94 0 cmykf26.3345 30.4136 mo27.1109 29.8101 27.7657 29.5601 28.5757 29.5601 cv29.3941 29.5601 30.0049 29.7989 30.8008 30.4322 cv30.108 31.1187 29.4971 31.3785 28.5635 31.3785 cv27.7315 31.3785 26.9761 31.0484 26.3345 30.4136 cv0 0 0 1 cmykf27.2803 30.2276 mo27.7432 30.5162 28.1124 30.6363 28.5445 30.6363 cv29.0562 30.6363 29.4805 30.5064 29.8921 30.2276 cv29.4585 30.0191 29.0079 29.9126 28.5645 29.9126 cv28.1031 29.9126 27.669 30.0191 27.2803 30.2276 cv0 0.085 0.94 0 cmykf34.671 26.7315 mo34.671 26.3213 li22.6558 26.3213 li22.6558 26.7315 li34.671 26.7315 li0 0 0 1 cmykf0.0923 lw34.671 26.7315 mo34.671 26.3213 li22.6558 26.3213 li22.6558 26.7315 li34.671 26.7315 licp@24.5 25.7979 mo24.5 26.7437 li24.5 26.9473 li24.5 27.2203 24.7134 27.4283 24.9942 27.4283 cv25.3174 27.4283 25.5005 27.2554 25.5005 26.9473 cv25.5005 26.7437 li25.5005 25.8165 li25.5005 25.3799 25.3213 25.1094 25.0367 25.1094 cv24.98 25.1094 24.8897 25.1319 24.8135 25.1685 cv24.751 25.1954 24.7095 25.2212 24.6836 25.2418 cv24.6402 25.2789 24.6026 25.3287 24.5723 25.3902 cv24.5235 25.4903 24.5 25.5606 24.5 25.5938 cv24.5 25.7979 li0 0.085 0.94 0 cmykf28.1124 26.7437 mo28.1124 26.9473 li28.1124 27.2203 28.3282 27.4283 28.6065 27.4283 cv28.9312 27.4283 29.1133 27.2554 29.1133 26.9473 cv29.1133 26.7437 li29.1133 25.8165 li29.1133 25.3834 28.9361 25.1084 28.6534 25.1084 cv28.3233 25.1084 28.1124 25.377 28.1124 25.7979 cv28.1124 26.7437 lif31.6168 25.7979 mo31.6168 26.7437 li31.6168 26.9473 li31.6168 27.2203 31.8301 27.4283 32.1099 27.4283 cv32.4322 27.4283 32.6177 27.2554 32.6177 26.9473 cv32.6177 26.7437 li32.6177 25.8165 li32.6177 25.3799 32.439 25.1094 32.1543 25.1094 cv32.0982 25.1094 32.0069 25.1319 31.9297 25.1685 cv31.8677 25.1954 31.8262 25.2212 31.8018 25.2418 cv31.7564 25.2789 31.7188 25.3287 31.6885 25.3902 cv31.6412 25.4903 31.6168 25.5606 31.6168 25.5938 cv31.6168 25.7979 lif25.3311 35.4913 mo24.2398 35.4913 li24.2398 36.9 li25.3311 36.9 li25.3311 35.4913 lif25.3311 37.2144 mo24.2398 37.2144 li24.2398 37.6602 li25.3311 37.6602 li25.3311 37.2144 lif32.7842 35.4913 mo31.6885 35.4913 li31.6885 36.9 li32.7842 36.9 li32.7842 35.4913 lif32.7842 37.2144 mo31.6885 37.2144 li31.6885 37.6602 li32.7842 37.6602 li32.7842 37.2144 lif93.5396 1.19483 mo93.5396 1.36329 93.5396 1.86622 93.5396 2.03516 cv93.3711 2.03516 92.9883 2.03516 92.9883 2.03516 cv92.169 2.03516 90.7955 2.03516 90.7955 4.59473 cv90.7955 15.1001 li90.7955 21.5245 87.9981 24.647 82.2432 24.647 cv75.7481 24.647 72.7232 22.0577 72.7232 16.4966 cv72.7232 4.59473 li72.7232 2.03516 71.3365 2.03516 70.1089 2.03516 cv70.1089 2.03516 69.9668 2.03516 69.8521 2.03516 cv69.8521 1.86622 69.8521 1.36329 69.8521 1.19483 cv70.0967 1.19483 79.3228 1.19483 79.5674 1.19483 cv79.5674 1.36329 79.5674 1.86622 79.5674 2.03516 cv79.4527 2.03516 79.3072 2.03516 79.3072 2.03516 cv78.1016 2.03516 76.5992 2.03516 76.5992 4.59473 cv76.5992 15.9644 li76.5992 20.8638 78.646 23.2461 82.857 23.2461 cv86.9507 23.2461 89.1163 20.6817 89.1163 15.8311 cv89.1163 4.59473 li89.1163 2.03516 87.6978 2.03516 86.6661 2.03516 cv86.6661 2.03516 86.3111 2.03516 86.1456 2.03516 cv86.1456 1.86622 86.1456 1.36329 86.1456 1.19483 cv86.3892 1.19483 93.2974 1.19483 93.5396 1.19483 cv0 0 0 0 cmykf104.037 23.3082 mo104.037 24.1485 li104.037 24.1485 96.0831 24.1485 95.8399 24.1485 cv95.8399 23.981 95.8399 23.4766 95.8399 23.3082 cv95.9717 23.3082 96.1646 23.3082 96.1646 23.3082 cv98.8506 23.3082 99.1949 21.2574 99.1949 18.9522 cv99.1949 5.16016 li99.1949 2.95508 97.9239 2.03516 96.1314 2.03516 cv95.8399 2.03516 li95.8399 1.19483 li102.288 1.19483 li116.237 18.2945 li116.237 5.29297 li116.237 2.35206 114.186 2.03516 113.305 2.03516 cv113.305 2.03516 112.892 2.03516 112.72 2.03516 cv112.72 1.86622 112.72 1.36329 112.72 1.19483 cv112.964 1.19483 120.759 1.19483 121.003 1.19483 cv121.003 1.36329 121.003 1.86622 121.003 2.03516 cv120.866 2.03516 120.647 2.03516 120.647 2.03516 cv119.196 2.03516 117.646 2.3711 117.646 6.39063 cv117.646 24.2627 li116.428 24.2681 li100.604 5.12012 li100.606 18.94 li100.606 21.2447 100.938 23.3082 103.716 23.3082 cv104.037 23.3082 lif148.005 19.2818 mo153.051 5.17334 li153.954 2.77051 153.374 2.03516 151.287 2.03516 cv150.864 2.03516 li150.864 1.19483 li157.398 1.19483 li157.398 2.03516 li157.254 2.03516 li156.545 2.03516 155.709 2.24708 155.092 3.82422 cv147.439 24.2354 li145.984 24.2354 li137.677 4.01221 li137.019 2.33106 136.241 2.03516 134.848 2.03516 cv134.848 2.03516 134.748 2.03516 134.654 2.03516 cv134.654 1.86622 134.654 1.36329 134.654 1.19483 cv134.898 1.19483 143.899 1.19483 144.145 1.19483 cv144.145 1.36329 144.145 1.86622 144.145 2.03516 cv143.969 2.03516 143.528 2.03516 143.528 2.03516 cv141.904 2.03516 141.591 3.04932 142.053 4.28907 cv148.005 19.2818 lif186.309 2.2754 mo186.306 12.4366 li188.272 12.4366 li191.844 12.4366 193.419 10.8458 193.419 7.1167 cv193.419 4.08741 191.471 2.12989 188.532 2.12989 cv187.844 2.12989 186.903 2.18409 186.309 2.2754 cvcp189.834 1.19483 mo194.918 1.19483 197.441 3.06641 197.441 6.91797 cv197.441 10.1817 194.892 11.8355 192.881 12.6485 cv192.734 12.7081 li198.365 21.2803 li199.265 22.67 200 23.2056 201.548 23.2901 cv201.548 23.441 201.548 23.9751 201.548 24.1485 cv201.309 24.1485 195.673 24.1485 195.673 24.1485 cv188.845 13.3721 li186.306 13.3721 li186.306 20.5157 li186.306 23.1075 187.459 23.3082 189.083 23.3082 cv189.083 23.3082 189.383 23.3082 189.537 23.3082 cv189.537 23.4766 189.537 23.981 189.537 24.1485 cv189.292 24.1485 179.804 24.1485 179.559 24.1485 cv179.559 23.981 179.559 23.4766 179.559 23.3082 cv179.714 23.3082 180.012 23.3082 180.012 23.3082 cv181.126 23.3082 182.43 22.8042 182.43 21.3814 cv182.43 4.69434 li182.43 2.03516 180.856 2.03516 180.012 2.03516 cv180.012 2.03516 179.714 2.03516 179.559 2.03516 cv179.559 1.86622 179.559 1.36329 179.559 1.19483 cv179.808 1.19483 189.834 1.19483 189.834 1.19483 cvf213.686 19.793 mo213.686 16.9957 211.287 15.896 209.048 14.7305 cv206.431 13.3668 203.412 11.9566 203.412 7.72071 cv203.412 3.61622 206.535 0.966309 210.996 0.966309 cv212.82 0.966309 214.892 1.33204 215.796 1.51465 cv216.109 5.98194 li215.249 6.10401 li214.851 3.75538 213.63 1.95215 210.99 1.95215 cv208.503 1.95215 206.668 3.47559 206.668 6.22266 cv206.668 8.81055 209.056 9.8711 211.283 10.9937 cv214.009 12.3677 217.138 13.7876 217.138 18.0645 cv217.138 22.7984 212.918 24.9175 209.015 24.9175 cv207.465 24.9175 205.309 24.6036 203.581 23.6231 cv203.03 18.6524 li203.866 18.5049 li204.503 21.8047 206.595 23.7173 209.358 23.7173 cv212 23.7173 213.686 22.1041 213.686 19.793 cvf230.058 1.19483 mo230.058 1.36329 230.058 1.86622 230.058 2.03516 cv229.925 2.03516 229.734 2.03516 229.734 2.03516 cv228.427 2.03516 227.218 2.27979 227.218 4.06153 cv227.218 21.2813 li227.218 23.063 228.427 23.3082 229.734 23.3082 cv229.734 23.3082 229.925 23.3082 230.058 23.3082 cv230.058 23.4766 230.058 23.981 230.058 24.1485 cv229.814 24.1485 220.714 24.1485 220.47 24.1485 cv220.47 23.981 220.47 23.4766 220.47 23.3082 cv220.601 23.3082 220.795 23.3082 220.795 23.3082 cv222.103 23.3082 223.31 23.063 223.31 21.2813 cv223.31 4.06153 li223.31 2.27979 222.103 2.03516 220.795 2.03516 cv220.795 2.03516 220.601 2.03516 220.47 2.03516 cv220.47 1.86622 220.47 1.36329 220.47 1.19483 cv220.714 1.19483 229.814 1.19483 230.058 1.19483 cvf133.324 1.19483 mo133.324 1.36329 133.324 1.86622 133.324 2.03516 cv133.192 2.03516 132.999 2.03516 132.999 2.03516 cv131.692 2.03516 130.484 2.27979 130.484 4.06153 cv130.484 21.2813 li130.484 23.063 131.692 23.3082 132.999 23.3082 cv132.999 23.3082 133.192 23.3082 133.324 23.3082 cv133.324 23.4766 133.324 23.981 133.324 24.1485 cv133.079 24.1485 123.982 24.1485 123.737 24.1485 cv123.737 23.981 123.737 23.4766 123.737 23.3082 cv123.868 23.3082 124.061 23.3082 124.061 23.3082 cv125.367 23.3082 126.576 23.063 126.576 21.2813 cv126.576 4.06153 li126.576 2.27979 125.367 2.03516 124.061 2.03516 cv124.061 2.03516 123.868 2.03516 123.737 2.03516 cv123.737 1.86622 123.737 1.36329 123.737 1.19483 cv123.982 1.19483 133.079 1.19483 133.324 1.19483 cvf324.384 34.3423 mo324.46 40.4351 li324.46 40.4351 323.72 40.6202 323.488 40.6856 cv323.271 38.0215 322.668 35.8477 318.408 35.8477 cv312.685 35.8477 li312.685 47.1084 li317.597 47.1084 li320.007 47.1084 320.662 45.7593 320.933 43.4341 cv321.119 43.4341 321.705 43.4341 321.914 43.4341 cv321.914 43.7496 321.914 52.8516 321.914 52.8516 cv320.937 52.8638 li320.787 50.6153 320.257 48.8658 317.619 48.8658 cv312.685 48.8658 li312.685 58.752 li312.685 61.629 315.16 61.629 317.783 61.629 cv322.484 61.629 324.668 61.3331 325.98 56.5723 cv326.173 56.6221 326.945 56.7867 326.945 56.7867 cv325.63 63.1348 li325.63 63.1348 304.572 63.1348 304.259 63.1348 cv304.259 62.9258 304.259 62.2925 304.259 62.0811 cv304.425 62.0811 304.664 62.0811 304.664 62.0811 cv306.304 62.0811 307.82 61.7745 307.82 59.5376 cv307.82 37.9385 li307.82 35.7037 306.304 35.396 304.664 35.396 cv304.664 35.396 304.425 35.396 304.259 35.396 cv304.259 35.1851 304.259 34.5533 304.259 34.3423 cv304.572 34.3423 324.384 34.3423 324.384 34.3423 cvf203.495 35.6968 mo203.491 48.4424 li205.951 48.4424 li210.433 48.4424 212.41 46.4463 212.41 41.7676 cv212.41 37.9698 209.963 35.5147 206.277 35.5147 cv205.413 35.5147 204.311 35.5669 203.495 35.6968 cvcp207.913 34.3423 mo214.289 34.3423 217.453 36.6905 217.453 41.5171 cv217.453 45.6143 214.255 47.6885 211.736 48.7076 cv211.548 48.7847 li218.614 59.5367 li219.744 61.2798 220.664 61.9532 222.609 62.0586 cv222.609 62.2476 222.609 62.9185 222.609 63.1348 cv222.306 63.1348 215.238 63.1348 215.238 63.1348 cv206.671 49.6148 li203.491 49.6148 li203.491 58.5796 li203.491 61.8296 204.931 62.0811 206.969 62.0811 cv206.969 62.0811 207.343 62.0811 207.539 62.0811 cv207.539 62.2925 207.539 62.9258 207.539 63.1348 cv207.231 63.1348 195.333 63.1348 195.024 63.1348 cv195.024 62.9258 195.024 62.2925 195.024 62.0811 cv195.219 62.0811 195.594 62.0811 195.594 62.0811 cv196.992 62.0811 198.628 61.4488 198.628 59.6641 cv198.628 38.7325 li198.628 35.396 196.655 35.396 195.594 35.396 cv195.594 35.396 195.219 35.396 195.024 35.396 cv195.024 35.1851 195.024 34.5533 195.024 34.3423 cv195.336 34.3423 207.913 34.3423 207.913 34.3423 cvf236.39 34.337 mo236.39 34.5479 236.39 35.1792 236.39 35.3902 cv236.226 35.3902 235.984 35.3902 235.984 35.3902 cv234.343 35.3902 232.826 35.6978 232.826 37.9317 cv232.826 59.5328 li232.826 61.7686 234.343 62.0752 235.984 62.0752 cv235.984 62.0752 236.226 62.0752 236.39 62.0752 cv236.39 62.2862 236.39 62.9195 236.39 63.129 cv236.084 63.129 224.669 63.129 224.362 63.129 cv224.362 62.9195 224.362 62.2862 224.362 62.0752 cv224.529 62.0752 224.769 62.0752 224.769 62.0752 cv226.41 62.0752 227.925 61.7686 227.925 59.5328 cv227.925 37.9317 li227.925 35.6978 226.41 35.3902 224.769 35.3902 cv224.769 35.3902 224.529 35.3902 224.362 35.3902 cv224.362 35.1792 224.362 34.5479 224.362 34.337 cv224.669 34.337 236.084 34.337 236.39 34.337 cvf235.046 1.19483 mo250.23 1.19483 li250.992 1.19483 251.976 1.00196 252.126 0.00195313 cv252.865 0 li252.281 5.98829 li251.468 5.98633 li251.418 4.60596 251.216 2.59571 248.998 2.59571 cv244.363 2.59571 li244.363 20.3165 li244.363 23.0796 245.691 23.3082 247.169 23.3082 cv247.169 23.3082 247.498 23.3082 247.656 23.3082 cv247.656 23.4766 247.656 23.981 247.656 24.1485 cv247.41 24.1485 237.445 24.1485 237.197 24.1485 cv237.197 23.981 237.197 23.4766 237.197 23.3082 cv237.357 23.3082 237.683 23.3082 237.683 23.3082 cv239.423 23.3082 240.49 23.167 240.49 20.3819 cv240.49 2.59571 li235.804 2.59571 li233.418 2.59571 233.189 3.64112 232.726 5.96143 cv231.902 5.96143 li232.431 0.0488282 li232.431 0.0488282 232.99 0.0488282 233.103 0.0488282 cv233.41 1.00635 234.24 1.19581 235.046 1.19483 cvf276.345 1.19483 mo276.345 2.04834 li275.023 2.12012 274.226 3.02393 273.632 3.86524 cv273.632 3.86622 267.802 12.8467 267.802 12.8467 cv267.802 20.1841 li267.802 23.0972 268.863 23.3082 270.607 23.3082 cv270.607 23.3082 270.933 23.3082 271.093 23.3082 cv271.093 23.4766 271.093 23.981 271.093 24.1485 cv270.849 24.1485 260.88 24.1485 260.634 24.1485 cv260.634 23.981 260.634 23.4766 260.634 23.3082 cv260.794 23.3082 261.123 23.3082 261.123 23.3082 cv262.941 23.3082 263.927 22.8536 263.927 20.4502 cv263.927 13.3931 li257.599 4.35059 li256.634 2.95508 255.91 2.03516 254.375 2.03516 cv254.179 2.03516 li254.179 1.19483 li263.666 1.19483 li263.666 2.03516 li263.373 2.03516 li261.554 2.03516 261.419 3 262.195 4.10059 cv267.097 11.7007 li271.435 4.83985 li272.425 3.3418 272.716 2.03516 270.257 2.03516 cv269.88 2.03516 li269.882 1.19483 li276.345 1.19483 lif287.57 11.6739 mo287.57 17.3433 290.074 23.4468 295.574 23.4468 cv300.607 23.4468 303.054 19.9551 303.054 12.7725 cv303.054 7.49952 300.238 1.89747 295.021 1.89747 cv288.107 1.89747 287.57 9.38086 287.57 11.6739 cvcp283.306 12.8384 mo283.306 6.0293 288.482 0.696778 295.085 0.696778 cv302.289 0.696778 307.316 5.36036 307.316 12.0396 cv307.316 19.3448 302.242 24.647 295.246 24.647 cv288.328 24.647 283.306 19.6812 283.306 12.8384 cvf309.935 24.1446 mo309.935 23.9732 309.935 23.4766 309.935 23.3082 cv310.066 23.3082 310.259 23.3082 310.259 23.3082 cv311.566 23.3082 312.775 23.063 312.775 21.2813 cv312.775 4.06153 li312.775 2.27979 311.566 2.03516 310.259 2.03516 cv310.259 2.03516 310.066 2.03516 309.935 2.03516 cv309.935 1.86719 309.935 1.36719 309.935 1.19776 cv325.974 1.19776 li326.035 6.05274 li325.9 6.08838 325.445 6.20069 325.259 6.25098 cv325.082 4.27735 324.628 2.39551 321.89 2.39551 cv316.652 2.39551 li316.652 11.3726 li321.244 11.3726 li323.142 11.3726 323.416 9.87403 323.435 8.6792 cv323.591 8.6792 324.025 8.6792 324.193 8.6792 cv324.193 8.68311 li324.193 16.0323 li324.021 16.0323 323.597 16.0323 323.437 16.0323 cv323.418 14.5948 323.084 12.7735 320.728 12.7735 cv316.652 12.7735 li316.652 21.2813 li316.652 23.3082 318.363 23.3082 319.875 23.3082 cv319.875 23.3082 320.044 23.3082 320.168 23.3082 cv320.168 23.4766 320.168 23.9742 320.168 24.1456 cv309.935 24.1446 lif71.6714 48.7134 mo71.6714 44.4332 73.4058 40.2295 76.3975 37.5499 cv79.1714 35.0655 82.8111 33.67 86.9239 33.67 cv90.6055 33.67 93.6734 34.3345 96.6758 35.7364 cv96.981 42.4029 li96.0357 42.523 li94.9493 38.6583 93.1426 35.1192 87.044 35.1192 cv80.7769 35.1192 76.8829 40.0821 76.8829 48.0694 cv76.8829 55.1827 80.0313 61.9068 87.6553 61.9068 cv91.9419 61.9068 94.9971 60.3023 97.3038 57.337 cv98.0572 58.7461 li95.4581 62.108 91.4458 63.898 86.8794 63.898 cv77.5953 63.898 71.6714 58.417 71.6714 48.7134 cvf133.758 39.9087 mo132.804 57.6915 li132.628 61.6309 133.851 61.9756 136.497 62.0743 cv136.743 62.0743 li136.743 63.1216 li127.036 63.1216 li127.036 62.0743 li127.407 62.0743 li130.676 61.9439 130.878 60.1241 131.028 57.4678 cv132.156 39.2647 li132.304 36.7813 130.942 35.3731 128.653 35.3731 cv128.653 35.3731 128.474 35.3731 128.321 35.3731 cv128.321 35.1431 128.321 34.5513 128.321 34.3248 cv128.674 34.3248 136.24 34.3248 136.469 34.3248 cv136.568 34.5533 146.25 56.1451 146.25 56.1451 cv146.25 56.1451 155.403 34.5503 155.502 34.3218 cv155.732 34.3218 163.492 34.3218 163.492 34.3218 cv163.491 35.3804 li163.339 35.3804 li160.097 35.3804 159.526 36.3863 159.769 40.4556 cv160.883 59.5538 li161.053 61.7896 162.226 61.9913 164.429 62.0733 cv164.429 62.2984 164.429 62.8824 164.429 63.1133 cv164.07 63.1133 152.838 63.1133 152.481 63.1133 cv152.481 62.8814 152.481 62.2925 152.481 62.0723 cv152.514 62.0704 152.56 62.0669 152.56 62.0669 cv154.505 61.9522 155.912 61.8682 155.912 59.9146 cv155.87 57.8497 li155.87 57.8438 154.993 39.4385 154.993 39.4385 cv154.993 39.4385 145.135 63.1016 145.038 63.3311 cv144.879 63.3311 144.329 63.3311 144.168 63.3311 cv144.07 63.0977 133.758 39.9087 133.758 39.9087 cvf249.378 35.7095 mo249.376 58.3174 li249.376 61.3711 250.666 61.8628 253.755 61.8628 cv261.031 61.8628 264.343 55.5997 264.343 49.461 cv264.343 39.9195 260.404 35.5743 252.304 35.5743 cv251.591 35.5743 250.066 35.6353 249.378 35.7095 cvcp240.923 63.129 mo240.923 62.0733 li241.332 62.0733 li242.97 62.0733 244.488 61.7662 244.488 59.5308 cv244.488 37.9317 li244.488 35.6978 242.97 35.3902 241.332 35.3902 cv240.923 35.3902 li240.923 34.337 li253.794 34.3248 li258.58 34.3248 262.589 35.5289 265.388 38.1334 cv268.146 40.7012 269.605 44.3384 269.605 48.6563 cv269.605 52.691 268.001 56.5977 265.199 59.3765 cv262.382 62.1675 258.435 63.1226 254.445 63.1226 cv240.923 63.129 lif294.109 61.647 mo294.109 54.5904 li294.109 53.0455 292.984 52.2276 290.857 52.2276 cv290.523 52.2276 li290.523 51.2012 li301.589 51.2012 li301.589 52.2276 li301.253 52.2276 li299.708 52.2276 298.888 53.0455 298.888 54.5904 cv298.882 62.4463 li296.242 63.2964 292.697 63.9678 288.759 63.9678 cv279.257 63.9678 273.115 57.8072 273.115 48.2745 cv273.115 38.1358 281.218 33.5162 288.841 33.5162 cv292.253 33.5162 295.763 34.1939 297.988 34.939 cv298.447 41.8121 li297.482 41.8716 li296.291 36.9234 294.082 34.9825 289.125 34.9825 cv282.431 34.9825 278.378 39.9131 278.378 47.8501 cv278.378 55.1426 281.8 62.3692 289.447 62.3692 cv291.208 62.4078 293.029 62.1397 294.109 61.647 cvf182.881 47.4532 mo186.505 47.7178 188.433 48.5157 190.054 50.1763 cv191.308 51.46 191.972 53.0879 191.972 54.9825 cv191.972 59.4996 187.831 63.1207 182.443 63.1207 cv168.335 63.1187 li168.335 62.0752 li168.906 62.0752 li170.305 62.0752 171.94 61.4097 171.94 59.6236 cv171.94 38.7334 li171.94 35.399 169.965 35.399 168.906 35.399 cv168.335 35.399 li168.335 34.3453 li181.121 34.3389 li187.122 34.3389 190.429 36.5132 190.429 40.6353 cv190.429 45.1949 186.413 46.8834 182.881 47.4532 cv176.979 35.399 mo176.979 46.96 li179.144 46.96 li183.112 46.96 185.297 45.0376 185.297 41.3575 cv185.297 37.2911 183.376 35.399 179.586 35.399 cv176.979 35.399 licp176.979 48.2198 mo176.979 58.3502 li176.979 61.1631 177.876 61.9693 180.795 61.9693 cv184.302 61.9693 186.95 59.0826 186.95 55.1514 cv186.95 50.7286 184.256 48.2198 179.746 48.2198 cv176.979 48.2198 lif110.325 40.2085 mo114.348 51.4234 li106.292 51.4234 li110.325 40.2085 licp110.826 34.3345 mo110.826 34.3345 101.688 59.1846 101.687 59.1866 cv101.009 60.9522 99.8121 62.0435 98.0401 62.0435 cv97.9424 62.0435 li97.9395 63.1236 li106.701 63.1236 li106.698 62.0435 li106.318 62.0435 li104.209 62.0435 102.773 61.3682 103.691 58.6451 cv105.783 52.8384 li114.855 52.8384 li117.125 59.1685 li117.775 61.1651 116.926 62.0713 114.758 62.0713 cv114.505 62.0713 li114.505 63.1338 li125.655 63.1338 li125.657 62.0713 li125.57 62.0713 li124.084 62.0713 123.066 61.2925 122.371 59.3169 cv112.994 34.3389 li110.826 34.3345 lif174.989 1.1919 mo175.05 6.04786 li175.05 6.04786 174.458 6.19629 174.274 6.24708 cv174.1 4.12452 173.62 2.39356 170.227 2.39356 cv165.667 2.39356 li165.667 11.3653 li169.581 11.3653 li171.501 11.3653 172.022 10.2911 172.24 8.4375 cv172.389 8.4375 172.853 8.4375 173.019 8.4375 cv173.019 8.68897 173.019 15.9424 173.019 15.9424 cv172.242 15.9532 li172.122 14.1597 171.7 12.7667 169.596 12.7667 cv165.667 12.7667 li165.667 20.6441 li165.667 22.9356 167.64 22.9356 169.729 22.9356 cv173.475 22.9356 175.213 22.6998 176.262 18.9058 cv176.415 18.9458 177.028 19.0777 177.028 19.0777 cv175.979 24.1358 li175.979 24.1358 159.197 24.1358 158.948 24.1358 cv158.948 23.9693 158.948 23.4639 158.948 23.2945 cv159.079 23.2945 159.272 23.2945 159.272 23.2945 cv160.579 23.2945 161.787 23.0508 161.787 21.2691 cv161.787 4.05811 li161.787 2.27833 160.579 2.03321 159.272 2.03321 cv159.272 2.03321 159.079 2.03321 158.948 2.03321 cv158.948 1.86524 158.948 1.36133 158.948 1.1919 cv159.197 1.1919 174.989 1.1919 174.989 1.1919 cvf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (Binney Hare) (Cambridge University Press)%%Title: (UC rev cmyk logo .eps)%%CreationDate: 6/5/08 11:26%AI9_DataStream%Gb!R&kB\ViZ7($+J9Sd0)[C?FJ.pTriuCY1fGH;NXYoj6oB`qY;Fe=_#31-_^#/bM(^%0L.[;Ka8f`h$42Z6Dfkt=^s%,WmI$Bt_%W$nTA6'*=rfREFthKO/%P-QQnfIs3QZ2gG\Uo4V_]HJRi:);cqI&B%'Y."Z!]hYuln)la6:9U:ISs12@=H;7i>HQ2cUY/\YqA"iu%%cl5NZW/Z%HJdgM<)%Dc-GGYPY5@]`.SB\7Rh+6'f!&1>LR7>7K5Z"i`s:l[q=dm;0E=pX1*5ApS_P=?@7Wht.$s!O)?/,3p^oa:%S<hGq$W3MEUUcj/G\<$.d<YLS;sdjCla8,g$>)5gr>0srX>cUH6*ECaG1t7m'[0JR]A"eGl3(f&+>b8*`o!j&XI5e^<g10!(edJp%S.meOLru6ZP]SK,W`i<NAVn-0Tsam'B)UVCct]mMkk%(fZHeq>MU"n6E7Ok.^mhFCJ1>B7-LjZ%dl%""EnIDdY1q2%`DbnaVZWH2%C@r?mCQ;;/PnB?&q2]0<_gf$\WSD:=#='H'ee$H)MJ=,XF?9=`0)nl==VI<Jlg7U5L;9@1A]_U)7hmn\C@F.mJ+40<!an:t,k2d=%Xis46REa!?q0>"`%Yd=gF/Z;fkHOnt]k4%m:,*%)f=bLsAs%`r6oFfG=[Z/orN@1?;eTUuK0d1Faf*RhjZ;:TGp'Ls(3[;!<7U7j%kVMhfj9\L=lr#7Rn(6"uoS.2a(a>m=M=u8P)T&8_?>%nRBYSa8nP$&`WCP9SdU)gP%KH3ZAp_Gp8$pe1ZrWpH%dXcJ"X!FBp>0<B%JA2$C>6@SWG-9V82&j5LpS1ma)W'Mb3KN(0@jcqHlIE!kaA;ErZ#<rK#qEW]F?VGbpNU3G%0(]V3j!#ogD\_q@f8BE,%.0LoldHU%%RY_LJ/pTKAMfDh/73l3)/Iu1dTU>aX5<,`D.kb1b3`C)[bU3F%?&TH2qp4*b13^VW*:4sq<k!.LgGLo]@]6oPB$qJO.AKJM=HN\%nI%C+K(<mM:CB"u`_jA>ml'tR9h"'&J<KK-20`GaDOd$-ld>CH``3ZtGMVK"7F*04f_^8M>t,62GSIDNinZigit24[#u1G[9$rjd%j"hLR60m?<"@^pJ/[BA&#2l5FOm!!C$\&fi@7:rVJSRA$[m6J6#nZ9bLn>/DOSY*%f(1B(d>5`%[Q3o2UHa"Kph?fcT%iD%-h..!%r,;:(JhSN)#Vp1'^La0m^`$0tWpp8Gh?/4dG&d/9I=S\I;+ClMmEYek+$^6J/6Lhk&R^d-$QRh-*Wmeu,ZT$(`4KHp591sP@*]!2%k5he#>VBbrTQ6fhEct!%i3_Ih#n-[i![]@WJ0U,l6\090Urj17pedFJcg]R+JX@AWfF@6sZm25aDFcc8Ua'ia9sh`Gnpqeu\rdaf%Z55W>05Vi"lsPI&\&2bH_^*m0)pXL`$nlpGN8S<9&\]Gn/roF[W4D`V:<jRE&bb6TGSu&&Qr@rY1P($d1i\2<!N8j:JUr't,,\sa%L/]N>_$\t6,`M;VMqMo;FYXT2^qnf$)Q.PdG`qf/E3e)u3DH;1iHL8.HE]B^CXk!hplS!?7&BeeD\6.ii@Vmb>UB]u,IHA/SBukW%j2j!&eBOn_9[A')]m[5NDYRcr6"R:6ke[#%c/tRTZoHqpd_[a<#k3KigsEZ5KC#QVCrAB?$:5WUAN1E]9b>AjTR&pc_GnO*DEp_e%b0j$0E4U=QGOh&*a\RM-hK'R#9QMaP(gVnCf,X)f4VqQ62nP0EN9J\QUFWU%l36DXb;m&Z!d'[mgdZhuVi1.k(["M1(ta]"]o3Pc%B;70l$M.AT>P+&3N6"2;(k.\b8#=94U_YVpm0=H#ZDW(FHGXB9U=54.6YYRJ(W+4Hi5fNc_#WnHp?MFogrS7DB/%2Jf(?3U=)&?Q%nef"g]@T%%_N>>WGcEkr+47Ru%eK_)Af/V>kVG2NeVFk#bCag\p:=]1#%n^$265pLQ@&YYhfgHgVk%"^r.m#U=C6$&Y6H\*,9$U.%GH2/n')4s9>iZXhO^kTOci7!_%9Wp!\o@^k3Z\h2l*@3+R9m)`"i5D2:p'iW^B]:]%Y0%oHd-T-Kn8=aIfg8^f4"I3`58D%Vu"eW%eU$mHlf00n>K?:7-Edg_#j=<pZp)'e<54AX*Ft$,jc'__,U^P*:,&(*V0;mH3p[A<hjZg#D(l@t]A$_p@<=TPK@IZQ/J%'Ls51CI%>f1k)Eh&:"@-p4^VZ\//\>hC-+W^U?LFW0N7Z!hhWIEB5_<Yl\g4!0!^UQ0(qS/hX$"Ul%1UDa&P&p$hpOE3Mdt%BtZhj\0og]d<%eJ\(\F`NfJ?b%L2aSuBpR#j]BN6KIk\b0;skPodA]ATNa\fu^go\['Ds*--Xhp'm5,B,r],&6+efl@qjUJ(H^2]EjTG.+8=gje"?%%*1rj<9Xh,-9SHG%qnF#n;]prZCT9jcdG9!n6_nu5p?2V>f"]\bKL6:>LW[X3/5&h!RF9\huu]QM&r#<NFB@pO.LR,_leo>aU@:F%HGA>6=$9`es(;lpe=)#1V:fSnQtTN2=d7/;oOtcoW-$1q>-s1_:Jj=01T\.&SrI(4=DqU)MFe\k+:4Kd=2=q\Ybqq\^qQ'Gbrse*%8\4\EcmuU&h(n>4ocKR(=c<!Cs&1kca[!HZm?YBW*^'?A[RdP%m36SJ`5GD`_a/K+LgHDEK6j`s5GVf=arY'Nac:R?lMZco2`SkW%)mg;r6EfsQ%P+^ra(T;PY;Y&'*<<6naXrJ-+&D10k4%+`iNnO8]uZCKN<(L7)%NB!VoQah#.X`r)<+Wuo<iHll%6A!CA(q-hrXhR%6aL60XBVi1^.@B/RMcSr-MDfeE=/JAH>C8XJ7TaFWoY"Jh^?a`"IIdXTW\#!o(J[Ka!D-=iN-jN3?*`pd<?7:4T]<V?hN[aBXUfV%Q.shd@WT0`>LmPtld5_eHao[G6*Klk#Tqp$F1'Qb!`*4FkWckE%7""1)dPhtFT,;/FYPF_au@tBC8Y.6f1+.0h)Od1*02]>jFo#K%i0e@?qu!f'>M#-g?(>9*P)6)El6\0EU$*(bEeq+C_qLq-CT?`)(8]-4)nOR&qc5c]!:@JO/(^62AXJNJ-%\bo3$\r]knr$1ac#p,%;$QHT!k,s4`eL=s2L;c;5=n4[DHCPJ>IiSX$qt2/n4#GV1t9#.NhC-oj02eukQ8a2YZ`X.%bk@i:H*!U3F8IJLJG<:%-Z%K)PPl)%l6'.5A@q@P3c3f1!Ti:FF0V=&>TdS=eJ#<g#;(5om(%J3AF8[G&7(khhkg36Ib18,E1F8,NR6Ke5K^B[Y<IEJ(6;@q4;cfZE&SoU%[]t7p;<7E;>1fl_]A<OirNEg4[R-la'7#Zkcj0(:^ZmENRGQ\NA:I_GO'*<CWO9=NpPrOHqK2T=;jEboT'1'>IjMkQ]runJrB3`#%Q-e?6QI?VDpRotEh7!RUP)012c6+4o2)j#.]%`kfdG'=86sg2KUO/&MM0W8RpVme(p?UD[>m%Z]_2E!8h`F+[pM;AMmQq]+qV[4A%hh#Y:GLXI;3/"ap-Cm@_PsKK<)@=HD!_?;<Ha>Si?a4)_O/E*V3:qu-YA18,*.U+^R+#@]KRN^IC3ppVdQZJfocKYt3/TZKXk]p(%rtVis`u),"?CbE?(i*q02NF,Sa"H1C^H%n,YSZYMpS647TCKTU4g]&-BXZX[,u)joJq[.`q\kp/gDPrY)XM0p3c?JM8dmB`YXbNM%pb$dH$IZ+:=[fks?OG2g1S2>*IMEXS*nRYtml)3Q+EVh>]d3,sa3b6;q>_,YYE+m+Ut`Z%FgFU1`XHI9OEa7cZ0AKf/UAkE8PSc?%:!g)#V/m-++DY4[o2[k`J"''g`M=F!gJeKlPSAf@I4^_7`Ge"HmC8=%Dn51%QD`Mj/iB*C1VQelc/0VM=KcVOjt@g])k57Ak<C)2%5n7aWS^!,c738E%*)YOse'n;N]3q[nnX9KCE2u_R-HcYL1o"qjfoe'N7kJXD^rc0-;OjgN#iPM"(koYP*CoGk0,T'0^RAGiRdI:$%8V^mYY^OE1I>=@#eih\eB62]#B]8l(`*[^LVR0.'BBo,?l!(u!YhdL"mu27mSUiHrqFHQqp[*%`(Ib%Rr$)5NJnd83\@@/4D0N(;%9=3A!5o\=uk5L?:S5jao9U*GoB`];!^j$XJ^ik&4;K:hKGAs4sGo4#F2.No!*@7tXm]YEjkDp+Rn&:P"+d;oI^;Ql(ZaUtJ<oe"b%oi/"eIVp3W[9e5B*\J8lefHhQgY2'iAV1Y""$(F*.[JM^m^'&Y.,PPtfN."6fHGm`I%1)YeaPVkBic4$p<Lt0GNS+tYgD_'PhUPe%S'O_#mGoIT=`<oXS%JTXQ=$R"$i/TWdk_kVD.gI"PPX:u`S0b#5U:kJ@Ne")!0HS?B"`P;Qp/sq450\bD6hf>ODZ8I6LX/ib<H^0%9?$;BG1?tlSaOX$(FId1jFkM>[sW4`^<WZQYP61fQTm,U?/2j?I+?G=rk5q\B1dr3U"'p8dFP))PlZhb36Wbr5.5c#.Gs1hA\OYJ%=h\(8h0JG$>[/-tPmcp(V]/cM?'o9b]QMZ9hIaM*n?*jPI,Zqn+_rl\RB&heIB>K=&RIM*9?K\OF\SINXdhse(TGj:p8.?-Hfk0/%8b#n!eopcLQDD7A565G8[,a\`gQT":btn,FZGP.Xmdn^qT6eg2:D[P>TJ>W:n?2U3V[d$rSs-l>Sf[c(W\fe1@U>6f@_LXL>eJ\O%@m.$'p9eu@8X^GnX'V"`Qe,"G5*O,2nac7!JP6u=NN?,`H!8r8)Af!/c50i`L$NXBfP=BfQp"&g9cAl)[*$6p]=5*5NF;#MKe'm0%??o>X2n-35+24%'-f*Mn8n:i\rD<\*%m-UH1+Bu,W>(l7HJ<cbmMt8_S"k<K^D@trr!H,d=LTW2=XY^>F'5s&oAsQ8UpBpsg@^s-%[J0UH0)820/h:[VOcRFcdkXhTICo-@FFR/HDa&GB\i'6;?hgR,\g@Re6`7W=XmGs:INNo2]!g9amJ'@)J#r'%UsH\$Q1"+OU<];2%NHqXK^=Z6u0>E2sY=Z:ao5i;l;Iq$FeNV*c-A>T]C!5;gqV.#(UjH?Y\K4i@4jc>n=Pm\RhC%;8o^8;CgJ8F(X*imjX6<[O_\RHt%-?u&&CLkllH:PLs-Nog$9=S&Lr:j*39hK#+CK8,a`>?9\oA%IQZgL!@_+uQZffQn>SFgQ;=Tko"?E:AN<50&+T1L+<gst`5]_A3l%qt8FYLR#A,Bd@;[p1Ckkn=B4:j5R3#2sDB-F4B%:T(H-D7:Olfo[^J6>&V!-o=gFF]^F#Tr$FSeDKh04etfMcgU&=iL"DZLk@`+4%T?k4]Hmem*QYT$^8Y87OEmO\b_L&D_TAArl>n]@KI6C-.I4+F$Y1Da:8PtE!H1dUV1qsPa-e1s*o5j0Z6ieVLPA[68^8eAQdYbQo%@[]i(jl*_^8u<>hGN/MF[2sC-X/QM&]&T4nLAh$)KYFbNT![BXg1HNYG1U,/S84[B.R1)_8[J0hJQ!8cp\NK'F#[l[<$iV2N0S;N%Y"8Y(S,;daST^>a9"7:JH<3/(RRUOUjc5jp0(sVQ8fK/&\l[V/e2mm-Aq@tWWa,Ns0ho!D\k'CD4Q!-QQ)IH[QX:IT8Gh"30:e?Z%;kfE9rVI!%qo8*l%rVD!2Y;D)U,TjJo+Z@UBe:-2dZUY\elC=C7H7_a\GKX%qe>q;rm(8;H@Cs%ZC[*C^*]pf^A5LFI?\*)I@k,)%V2))&;eEoeYI/QXhm\XsBCD>(:XA1(Q$o:&gA]P"eoflcf_b6#mX"bVX_F0#n,.RUrNpTieb4E;P@+4P=\hOAFrRJubk\u$qijln%q`]Fd]r6iq:Dq/9#Nsokhm^@<K^=E]e*jL"cAURY5h3iNCgq5Qq4Squh"a.9[OYG"ISZ<mQ4BKer@t`[aIH5p^2G)#]CW\me'+>d%\<?F%R(U`[[TAGgVrF0uSmEpQoQT!;>]S$\[.Lf9R^#)Beh9mn>Yo&cQWVL`D)pgo4QdV)V:TOaT%VuJpD8stDWArFhQ<Z&gqNbn%qW@bQ.T7h9DMa1lPYPskU"k!RX^sTm;l^B*b&ZrZRE2oQYK`UN@5bT@[)pXrk:^c:eo+ltk13mTV7HB]aq4Sq%OCh7RnFa7b+h_j%I3WeV?>0C^D@O8-cBki8lL3qnY6o?*?hpc<?O'BgoOaG^cQB;AaMuYo^,)>X$]sV)4teI*TC:k,X+_DL4*5*V%4li"MpS'ZD<^)-%P(#KlguEfj5B+LiMjIdO^IZSXkA"gKXqNdhZ4M12i/=S$/'fA.>\o=fY9Eb]cC--B&8P,Y:oRM`N4=738N)NV$fAqYqk:H<E`cE%%kNYB'I;"Je7pZ5XpqB2]K^0#J9I\FCEegs-9$%:T+5e`oJu*^Wq0VA%n50(/he6n/<g3jNGb=fVl;Gr-^q!/%kB[:Xbik@o`-3;-%j2")iqDet'o>Pau*`_\5O"28gS\)]/g^WL)s5jJ)Od6c-pTL:+gKRXo!4R0Wn6iTurP6nU*Q6rq]DKeA^]BGBXZ\hY#m4M-E*Y;?%Qd8p=IkAM;(\\lnL"*\DK!d0hNMUHanB:Aqrk4O4&S)37[UlS*?bb_:etg!QR,^M,$9#Y?>%/LJ3U'_I1FV1W?%Nhe(oBN<+4;[o%(GI^j](n\c]VHBQ`Q#,Y]s$>@2FEKHjUZ+\?muhG/Tp[Ell9MnK),$Orrl0mQ[Sp2YC@:.];[<dm5E:b^UCII=9`HB<Y<=s=nPNK%?L+poNAJ@@=5&J<1=logBGGLXRB+nDY?9.(2qXe$eXs7?o;)r@K$$b)`;)RiiaOK8c";JW]CAbEa64U1#IcD>\\c!2R*XP#ZA^mM%)2c^NjD@`tZAb1<&"GZQp2ch2WE'7K58+&f\8j-F'li+=4:g@NI=];D0_"pI^`sOcW03-bW;/#hBT6Zk^@-[4O%[&h)S>NA/iZqQ%j-L^QA2fh;V^*!(P=Ke+n,+,]\:KUG5c'K]8Bf^*D+EKq4pTDJ.7X:JQ?TkA"Q[?<lGAX1k6c<[beq/FK6.cIImXcSLL8;T(-,]f%5LX*<!A1gX\/Dn,EAcD!=NpP->%J+663`G`Lt#Y4?\*(J9S>iB,TO;\4oP9_JX/1=:l';c_ljrr6D0EgcjqjKks42q#kX3lQX1<L%jN@AmXrGPhpE_bh6n9B:HPT)<7eXjDhU)t]I-J3=Kr;8.CTlgeL48RE.jEgp0jatM)"D2j`/*c@nm*:K[-tX(0*Q?8oB=i3<t!3C%HW<:+0!Tip^t<PiiaaqabHHWTae]9,LYf>qV1=,K>F0f0*2H+6JP(Y#.KCa`=ms$ho$EXfGiF<?lE"i,-3OnaP[=p@J<rnmNlBY6%AW#-NQNSrN0I&:_rk04[O]6uGPon5`A7%Ip\*.C*H#1-)><S,]ftj+e]L\!A\/R(@Kd%h4Ou^q'AL&gn$>,LfL^iD(]=@!?qDhAh%UPSL=M(g!/a=e$lYa,c;&,+5DGHJ-XdaI^.?Kp^\`pq`[7Qu*C]l"kbPF5jXl^fDdR'-)08`S&ta,"s<nN&98EtDfbSb8fg-F__R%Z*>M`B4D7:>3nnS$T6peA_#cB0<3":HPkR'FN\3]Ae3p.3;2HD@Fk=M0@"lNoMFDh,l=>/W%JN7C![/487cDbSr]\Lm9*J*,W=6?%$6uA!G447/HoD:@nhb0-1SSF"U,!>hB#>Zs?<l@e%4YXA$m7?r"Zm#?.t,oVJQDK_Nqp(U%@[8[_9QF9P]I_fN8:tefDlhr9RBQF%6ce,4\;a6:A416/L\L3IG!gP=@p.97Z/&79,FnA<D`Q.Y`Rt.edVLVGdgmgP9Q+[q6Dl^MOMfpTHQpe`(Sln9A8epX6+ZM[";3lV%o`cn1>R:GZCG-Cj4$@CEUUm`!@8r;EO-q'_eY_s%l-^Dl/"TUFk*!T&^QQiiW;GEKdEtb@3349eINEI9j`5np,8(CQKTg3q%s!-e%[fZau,j'ZAI34u,*_a(F#&k/uR\p2C+M]Or8FJuV_XelcRKU:YCtE\tSa8$b-/[MqX=]22/eVbT0F-Q_dKkrj]5bpQh0=D,,p9'4%^(8%BH_!PXqFLF7nKBa$V%f5c-P)m_$eE?a6j/Yqg2@Nn"Ip?*B%G#)^D"?)+-*ie+[]q7OkrH,&8fSRMn#.309X!M3>NT&$c1XQ%@a_BJXmnl(5ENLl%jqm]q-_Da7%5*)q@>O-0@Rk?^(3SaclunL&q:Q]A#DF'.)-nY`-@GN+Ft:961^+=M1ag(D$U`DNJoY6=N\aR%m1=7rF[#:V6p*ds08,94#061`!Z*3;-6"6mBr?==MK/Hr74=LjE$^J<4Nnk#@5Rml]N,VgY>]Gm?@ctX*D0[A,#Z2e@k4n&R"l`S%L9Pm*A)c\Ymkb(G5^Hf:\ap!HEKV.EPagFEK&lLs&Z?:alPkiV[\k/C2s5<mj\&b50lIS(+3A/(dq,4WEpW5:QZ]2dGhY=[jpTN6%4dXDX`F2LOi0N0lOgc;<X)jE-2aU^b:-[Q5=!EUX@?/n?\/3O>mbX1'_X2d`g/d4L&bn&-7qcBXRMU-qc3O`XE'+ehARXB4(!CUo%23"_s*/o5@6mSl-,pS.-V/q]1UG7h9O-cInB30F]mBDI#&dtDuE;*#?3GpU#A-\'WLs/tOaMdV!?NSO\K1>J=C7r8N@bEf)R+'d2%JOE%_A;_#`,BqbX8Kfkb\%L,g$4q/'-&4W$!<Fmb_1QOn0mO>MJ.oe]dch\GAJVueK![EShdhY`$G-U4$Kg'D:VK"KU?Ee[dE(BJ%qW4SAgm&c)f\3:*Z,[#=-D^7k3)FK:g&b&q*66']n?*..dJ)Q9eWTre;;Rr/`$5Kt%XJfURU8/pi1@@VEd'=g/-:@K'mT5j+pc4L%Kr6;B!7_m&Ok;X6L[C[i'8-,bW+.ZE39C"L'6oK4apDV9NE>akC)WQkpWctpP6u1IdH@mq2eNRJ_UaNHNl8RcR6e>&LVub$[7kUe%B+[9p\G:(V-G3N2qO'l+7fjkH#c%$-[7hmjm>TOMJ<]P$b<BPSj-d)5Ikk1#S8X&`ei,+er:GUSAeoASJh19:CtUM+Wb&A]/jHb&%)VN4%$`B:tHXkQG.NVo"L/H+oggcGP?6<EjG^;r1#HN&m*gut:ZP>(K^=r4EafiCGli"HKlM]>k"FArY?KKs[AYu%Yjpd%7m;:nZ%`VOP;K**8Dm=Yf@dI[<Eh@Gh7l4rt*Z?Q$\'(q1$7Si18mUmL3_`T4qmcQsA';gqe$/lX_*[`2+;G$7dOhLX\+2=$+A0c8!&HE7Z%<47Jq!Fn;`_[,;<IIJ=paEWRjb5:ql20'P^Xn5o]p"2t8E@FM9]8])IRSf(_kmceRm+lGbOC9t#SRBjEpR0a@Cl3&/q6GI9\QZc6%A1lW%UMN9_S;lIK]L0kj>F*WSbU(sZYE9Z&:D`.+)=_8jEMs[UiUigm5I^X^=i*CdfN,pglPun5`Z$23107i?mtL&oDACc$^l$A5%I/.O?\@BuAa7/BRE\[TZR)^[kM-3HX_"rGnFC&)8MbBA5<OP+B#DGbo4^)ZK\pJ/YeX1gK)k<\ke\C99l9%JLhXE+bnELgHNV6'9%@:l)a^3GYtg97psDCtJ!c]Br,`DC?d$aShi,OQk"><fkpfj6nNf!jI&ia9bWh0g94pCm<:nnu^mI1(>jbege7HnkhLCKm:cQ[uq$%$O]2AnB!_:pTHB%$s05&*Df#HD?f-YSPgm>GY?*MO'6K7FPR*?Gd!_3mACbE+`PI::*93sChtBZ./`fEmpbS!kgf&0)i]QSa2Vl\%c&!d,`,+b[qhCu9<*D;[PHrQPnQe1UN0P7hoINRJGH]G!c+tE\I9frZXX,c9r9c/D%Hh"DesPKbiij6_mp#41^BO)f1n?:Jqk[`^%/ZUKHF*KQQ)<FCPUXStDSKuo"9`;"]8&?]`JFiAqcBh#)**fH%$QMd+Ob0^m,k0t[*3QrdZ@2kAl[1^7>u%mJhGKb]1/`+`n=D:U%_W?T+cjNp\]J`'iAJjD7>FFJ-#lUg<4V"h$&4l@Da&RPC8k9FY+O7i#3-#r4$O1SsQAqlJ)hUC/M0?Yjp60.nH6[)/:GnY1]3k:H%b`bQT?ODu%BP8]Yhg%;B30V99A+p@,pAo_\W#4WE_D;pF)N7C>-KCY2Ns@+B,<LIAd(mLS3#+lD6CtiF!@fKj_ETO2O"pYJM"1JK%(\cA62u'j+FStpCp`&Yoa<@MgU!ghG+/;fRq9V-Z+\K5$,d-=LFmM:oO%<\uN4E1%>7htI=F+?Y&(oWNT*h1DSlNT_^1JX<c"UQ_%"riGj-A3k5$tWIcg23F,I=!,UlNpk>);;N@npu:-Z"F*46RIS.0-'jEWdT?00>WtT9tE":9\,'o-/;3[P>j'EO0(*&nsdgjYZa&s%Osr.()hp1Uh5E/KS+gB\E-DA;5UEaF&=J*IO-?<dWbEAYP;ogW51o]$;M/$+X'602n!FW/ghP2s`_=k<RgpA6'=f+FSLPkr^E6@h%X]+QF9mCsTAPE8:*q&XLcLYGqXlcP$(s1:!$-'i=*m5Vr,DJC&jf"alj#Qsg1pN,.$e4Bk?mq+Q&OdA3:i[ib8=%R[T(ecs[a+t#%*\r_Nb]q1K>TS(82)j?8s(cMDq[I`^6R3H6KT@R6%_5;rOCb^^DQe+*i*7YuT*OCT9d_e_@6?Af_VPY:<50_A&*!RI/GR8M`meZt%,$]_?Xg)PbRL#"1G=,s4_0>u8q/TbAM!+.j*dVg"a`7Z8()^]R0aJ1qEF/ip>-J6<eX7'pcs_8h@]VVS5OA8-iJ5/XTfFXhq4ePr%A%K8.&GM5[`8*+VE!S$.^,g<i`Oi<5R&]uh0G[KJ'tt;AI,7:gfl?4*N:AhH@O:Xt$G.K:"R>_AW!jrD&D@8rS_3]*E&`.Y_O+Re%1YXf9:[?=+&.qQ%6e:g]MVfLMRETKnLbO^"q(UJnTs$f8]iLIim^ehM5#GBmY4#?rPL]4D9ps&gKs=`fpbcS.[!<C<m=]]+o'A'C%(("'6rQ>mek3jNk@?NlCVLT_5T3+gT8`uMOI/`MKU#TG*jk!>Zpu*&+CJ'e.UMHl6!YFdVNid+T<k`.>=23$2*iTjFa_ehL[e)9?%mK]F;m+GAa<;H*'l\VPt:5Y#uhbtLskrn$::JG=4h2DmO0(d*p_jC1FC3)GZBVFm-4mr2Y"Ko2?*N"kC;KSempUu.9ZQ=@"Eo:pN%[JEQ6L%+cteqh'5lS.0bk^.Z(8+`fgms3SIk3]$JU,iq)nm[MRkp*,RD+DO!KUK!g3:')ZThe.^g@]\MV8;1j.6Mq-11bI/31F-A%8Fc7AI+(1+5"tcmn.ed6lXQ+8.UNZ:<<umpSX^^[q&CBdNf@nR4Mc=>=S3\6LZt4!J6FM.`!#FlSK4>T@oAs<'Q]((E8n-Hhjnf>%h!sI\7,L?;<WB?%,Kqp$+Qo6+j2`DM`B!\Kd>6d]pVQ#=qC"[<na]C%XN)-a^008$74Z&AU5)[r=R_Xh_L"%K4FX=!,mC=1_:lE2%TYW+JV-4'n0t_W`Sr.DQW+E;m1Se2,cbG4YRBrsUEL"DI;9OJJGrBlGOlGIWC>!b$A5N*mP\PIh6:/h]B;Cj:o-Z?*H'0:#81gUO%5?[(qTP\/G*'0g=4t`Ic'XE`rb7V?&'hU'mp*R!?oNmH^(3m-$7Ba;K&Xa%j.q-.q'OL7+imLNn5!\nN(fp*\\FgeV^*flV%,m&X%p;/3IqUBr!=<FO2%pSiI]'aWbqh>XDr<Y5b*DsRDh\Gg*GSXE(3l@ngOM.\("7I5$0U3=[^O<78YapaJ?Wc5R(6s@$Y[ZhNkO)u2%qcos>3ij1\\q40bSUgIPPq5^YhhD(W:O6;4#i5gOs6Xq49^bofA]]ZIj[.0rG1,Jg90N..>3#0,*c,86W-\*"eFC^N'e?/bY[[Gg%&t;O-M-&"6<Nh]Db*4!JG($5K')Rk'<P(Fn9dKc*5?.%8(Q&+4LT4XPW?/g?WBXAL]9\k6W7pp4C:oD_%mEt[oqh-1J#M')>U9"j%+0&XgI\n%7neWCJFob*BYd=@+[HfX!7d\rh5?.%H9JpF]rP=8h?'F:"Z2``LeHgfp1Y$):@C@8XG%r+G"FcXYWh)%g31u5Yk<mc@%-]'b)k*I0ip&iV--&):oFk?cdI^g<Qkrr)6)K58Nc9R^Hb_N2GWo4E]U$?#`Tkau5U$BuNbKeF5qr_1<,sKWc<<q\krq8_0*XME:%deAF:j5U`-GBS\O/2Ji0FM,>mj&KM()M'-,PFu+]!o2XPjk2FRjmaeG%M?/hq4dKin'A=tZbq6_+Xj[=Hu\j*0j((=ltJ.3Rk&Pc%`S&!d'kQL[1W[-6;4\d0,dK)</'e]&SF)*:.>(Yb`S&6IV.Y(a_J!qtc^0S;.F/KpU\Ln\ljsadhc$-9jk1f7ZRr>M\i`'-Pk/0R%q"!du?S2:XH+(a?\r3onD3tW!%'3b,dUElUBA9B9Y;gmQ^4\)aSmYoS;4d037H[gk9_KdZqOR,Y:9X6Thg^2?9R1deA&J-me(!L4%+c<VnV[:,?FS@H6T'fX#7sT7`<;P](:JdW'U,[MZ;pj"`lk$#5??pr4Q=kt$c47?#/kgP6LuN5`f$.1Ufi)Bs_@"H$ip7e:#uPjc%6;'g8!]=EZV$eP)gNNGalqrj,o#?/bSfP,Brg2a"_8Y+$>\dS[h46MBHDOq,n!N"Xp:@$Rrq5XI[HcedSK7!Bih=Q8r</=b`[WNa%'7N#).+<W'hp/YeZM2tWVqqm'\$JHZV"^p.B7!dcj6ER1R5?/3p&-fF8%=I^!XmCI'fGOUVhjY5p?c\B]/i;(0Us:"ra(;>Oik2\%f9_"JA;g%$rE[CPcV:MtXr%Z]KptBIph6en?W<!]@r.GGj"n4(0LWm)fGb<M=#"U=\b`pqnM"<,pjL,+,Tu&Z2AP8I)+8sO0lC%E%Gnq@FWaab`'NRRVg,'Q)dsf2PZAS2B(n4OE39DSa?TT"2@bcD*qDT/LSsAt)Y8@e"(Vt#>`gp+DIoS3e/pDD\(#ot`4ZIT'\F8%T%Am-oQS%>DgMX_#<P($7_5*?$J-PbYtTWo%Cj,ribpD4S)%N>5NMXa9P=[.>R\Bd,"B3[/dD?L]kSutgm0cl12Ie.s\(#q*MYmREH%[o%2@d^4i]`bDO#cfCKo`Ak7X`*&eYV_i8]]%:XG`k>juZ`Y.;*K?&MAWP\23+6OTKGEO0M-QB]/&pChG5Y.S\Go:*Z`G!&X.P\F%hnM'<`V=B>\d;^u*XVAQle`X#``L>NPdL@_@bgFa4L;.,+&?CA(#tM/G<9[Io).^hlmg$F)r+cqd^-%mVr(&DII>\]MK-+Yq4!93%88oh`"r60qK]2+3I[,#4MX`.aL75>UHq]3(L)&`VNLMfcIo8!re?])j5\=.RDLDOrJo:fg>VR;ZA7PlZiuVOT+&n2_h=iKKSlNb>%Xm.o_^j:lqn`apNS?uaQ,#<UOMK+\=,6"6ES5]pQbjsLZNi4&#(luVJ5B/pBMK)aV=Yp&$(#tl5,;ZM?[n]CZLD?_c(ajTW^7Vp-%<Q2JiqmiO!G89-=RJ&G:(n^$kZ)K7nII80r?SOa%V_JqH=<!:Xi;TeBE2tl:GlQ*i_l\BDZ+m:K\,&O&IodXSIP%n+%_):'@XhH"%DACodId)3&e_sPG\5bC?qs&,.36,*fB3ZGuY-S&9e`![RqELti&$2k)8ThOCV@>H`T2gYN[Gcjhq2=NWV@m'l+^jZ_Wl$F+OEjEI%;B>1l"$bQ*E0h%*8(HSdR*skkLX5B]H/kpBVl1E$U,m\gf1TaW*H'D^:Qa*F\iSVMY3/kBAlKf=OjX+4e`!);h(u5E[uR]ql7@Ba%*U`#8c)`t]^n"Pt`?/'7>KDU'daRj=i?L4mIo7:./q<5se`$3QK"n>r+0BkgMsBeO3Jt/D%M(VZSP=7:<?!!@D>UC!E'K<+[Q<3D%%1eX_4Df5N:\N_*X2?Mpc`0#)UcR9t[-M%PR9#)Ia[hQHhc5I/Y%=K\iDsg*S&T&C*U[j`bd':b98h'/3df/cbcj.`WXYTf^A*,f%q\T,b_5FocG^R9/%_"@N_rdRoFh"j4GUEDke_reoS?o1)GPGWs<ZN7H?3Tcq=F(mD8mC)$/_kf8CeKkG`/GCen%/N(I'\#MPCET)%^mFd7qm.d5%=,"/V<pDt4BUKBW%S.c#qm.+C7a>Q!Mksnqf1MN4]*Zk#f\2Bjn-Gmf_[:Q0fF@Lmf[iX3L8gn_G::I3D"T-Q&ZRV%]l[Uije(/fMl-l>80-Qf$`GLlEUu9U,%"^g>ONHHk/WaIjR1qu*B(ZfVs\Kfn&Fr^5>2$ljer.T/'N^01,L)p+0O=AWh?-U:#H$.%Lf=5@THfC3S)DI@JO.<Yhk9$)4BVX>=It=_!kb=]l)pg%='>!S')&q5J=?m#&t?kb#p1DVm7mf\I"unS!llR(q]aD=L;DmBT]E?(%#fKlMGWj-?@(>gTO<,:7rPk5Y2fV^`L8etp(PDZMo\06mZ2tPLrmed$fm_<KUr3OK:KRC/ja7"C@t>a"$Q$:jlKK17,P@./I/cBK%S:K[_lKr^mCC!$+`gN>GHaK*Z01?8,f73UA<&6T#.!?8J97slQFK'UDAX9fL$s)/s??>!(1X.hS/rW`VTU`Ttl90:KcXp,23.3W/%K"!DQ[T@'mYrSRcm$ERY7j4&:_L:qfJbi)Y\*].Ca=F\R-(\A>7cR9iJrG(.>n<,/(n&$%UH9f2!D?oc(jG6aVt""?FHK?E(0"3P%:?RYh\;p#&n%Y^SiKi^]MSRY_K6qG_]Mj5m\,70,Jqln<;X@5;f9aFXY:sJBqCHNBTN1;Q(7t5#%8sUJ5!'[P<;V"+?H[gA,?@.[%fEB=V=)F2D5&it!oRn^S%T[]&mU*AMY="cV(`OW'[7"W"D.ss:YKVWX3;-OH81_]8T!bPu)0su?#j0hs68JLB.&b6!l7EX'2ZW8T%(uk,rglL#hJ,fk%pIqO>eCDe=khUkiQ&jaC`n.(KG!E2FHZ_sTaV@Sue1mHH<%PdBJu-6403GV'>alXt`\p=",ht\]E>]$GhlQR6%S*iO4LdF,n@%>;Kj.6arj/R%'-sq5AKlII5@LeuF\XDZ]XK`MZ+hq;%qU>r/hjN>@LG2JHhh1t'O`)SX05GqY[S^?-lUr/o;Ns:,%^>LZ8:D80GqL0aAX\X(RQ5?j>mSWT`ObWcN-B@;6r8C(S'3lDPT&8;q;p2Y9=q6X[+k?/4cZli[JUT&ohh?o%HDtJJHUqQ=_t%(M%[7ojl.l3!l+PM4no'#KHI_7bLV/NW1VbFgqR9IW$CJ`21\4)T^XcHK*'@GH(husWTC3eSnlY!,]7j<h8m(2VcQ3#"k0Wpg:/c2a5%/m']\Y$ABIUt8qG@5[W#oAKIf@Ffc)[5VU/T8JE;:a5$]8K:Z8hu;_;Mb[(GDLt+Z)poIGXtWD&WombIM=p2N]H=#&h';4Z3]A\V%=0[1,@([j.0'`2&9*Y0I(l.XlEa`3Eo1./]$dK198;K>:mXH6X*4\Se.jsQt@E!T>I*8L-+"!iMiAGYcc^f!-2Qr*D*ZqfOR9DGd%KaUZ4^CM"@T>[5+PSWCc*_T(S[Ir<n"C)JWQ8.g>&5M]e3jmp.?\fA:htbJ8F]cQonT\:g<&Uc6R<CI8aiLUCM+\)8WNrY;_PO`U%cCToo94ruuWFhIen(e^BF*.:uD!j*(8QOq9j!&^A[o9?>eX>!'0q95UAR!k.T0'a"W#)oM:J"[GD7mB!+_9"cfp=[!VGMKPCu)3/%EQ%J@B'Ec\p!NY?@W#m^\BWmU3LT1q?VQf$L$Dn$][mhnRCUj;mp[LR9.c"0-ZV[Wf(pHn)kCCt&mO4rC\m>aj5RuSgqdB0/lTF<%R(n,J;N"Vc$i/FVqs&F:rm=Fg=3!P/l<!A_OoBYgrA^fal2'Ynrm/h(h`Z;#qRC4IY4jhLL,Z;_/+M6CgtKp6^&30LID3/c*f5$k%*n#[Ilmfa)l\UO@o::2?,K;<aCp#l?=)Z[^[?LC2cf4\=8pIu'c>Zulo=a!ul?mLBH1,9=aI]fj2QK`E.rr6`>d8BTjRs?MVqg.^%ksqr/geIEq+$1Ssqoe<'Q)&Z+V_V<]NFc!S%dSHk,h1kN:JKZi*G&I?`>U2^L6\&s!(4H.k&K@38"Kh=a[jYIb(Z*m9:oF(8JaA"%BT[1)-ner'[hAQN/SJM:r`jd0\A_*B+4lE8]l[I=NPsss:QO'.:c*Pm0!6hGm`lWVbuQ`GI^OC0r-!4e/a5nU$EP^=QRQcNG-O<H%['mZ1\4,?*o]Ga<.t8Csmujkahd:>V)tgVjD]CBK_Sstj7X\%`o*=0bGNi*$H-6rE#8qgX;cqZJ8cASVU1nYONQsgCSEDH#Lr9_1%GWrC^4"%B>>Ib:+llPl#s,qrH\93c%)"S[#NVCudic&f6j7<cL]=<,8bcRMmhTa"Qja"N#iXl.BS4dD2o=;fZdL0sAc<R)lnMI^U%:$RNE3HJ>L=tWda9pL[>hMPQtgjDEe[97u>rrD;1)i%EFCuK6HqsVl,HEXfLq<f6s@9'd$fN'NbZ?,X%c\5%Cf.:k0*7o[Eb#ckp%:G^^N\$K,F\_DnbGOmNGg)Hdd5^;+gX`OE`67i"^p8f!MR:/,3mIM(QMk<('FhLVR0!(p/&&3Y^O,aF_C#Xg)?m4?1W:dG&X`_eV%b:ARr<HWSS\QIC"17_22(_,"ajo23,PYRe24pu:c`ZVt&/&h)4j-qO$7?,6CDm*g09I]ua!4f:OkMNgs][fI5a]e5t>C&r1lQKK6%Qu1_b/*Z)pCob7>^qm0n-fs^H:F_[Da=JfDBs@;5N-F.Rr-RGnN(Eq,$&GT>^iAf6n'AIX[Zt`e3$L?nR`g+A<emZ<2=V:Ci.q@D%jHV\U(/AbSinXBAZ1tp$GbbbZ0B]Q@]B]I<>^UJZg9&/jmNe%=LVpOlk4'GJX1Ps)5<@M"iU)>pA"<>"YrVV$0"bQ8eJ"!H8T(^C%&hs%O/scB**7XZuOtkM@BB9$#K6[IrRpX@Ba+hS.rkUnc1cp*/*uq)CXL?B.E;u3Z^Ma(uq1R^T!Z"q.\%3sub3*9so"EGo^Mb[;%(9.aL]4<Bn$NRD//GqW,MQ88nCW]!/m]')hhb#jDGq-V*fes-W=YOI&:+eJU%\@uk(I=)&[etLG<\*=o#6>+prjZ&A<ksHpTgMq,%rCW"$NDKD7Dl=\,2Rd'ud*]a;`s2HbnRnK\)JmOU7CkE//d!i`hf.T1]Tu?bIH8KsJj&i,]t'N@R(I:P1=X5>iELd<o\K3s-`kp(%=XALnK9Do:JF<=LelH^=MXc>2b@9o<Lki*<5%4AW8>D<j/Z)Ic=F!!"=FX9;O%U3,`Y'D+Q]JHhO)qN#K,/r>Hs92(n`9#[nR-^Y%YaG3qji#EEV/52Nib%e1Gb.:N4Nqa!?)WK5IKtb?r4XXEMhMqn;"bgY;I<JMd2I6@Q?V?cp.i*nHbQb.<6i7&H956ar,'5o]iD$!%4>5cR9C$dH+?ah9\AcSV=8]?uQi_+'kC2MZ\c"-+Q/SQG=6>FE(XPb6o1'%,-(+>hH2Hh_[p@3W)qF;o`S"s#gb.uUF&X?no^c2F%:0HMcgPqDt0+gp7orL!o?K=kigGsFY-c^F[p@IaLEu!@^T._9-?Df`+LBE1AKOO:YG]9-fDXXC"-2d`_qatd5%F.9)I'.$bai8)X%]_[)9E*WK)f,b80[6oI1H/:!O*@JsqN0J'>fBdGG`40m.n@W5S=e'&j477KeKq4XegbLYZj>/;Jf?u)refhO1b(Bn1j$Sm]!rU%>%d+Hq'ok'8.!auiln#//]O!XIrFhD>oG[Ocb;p1]E*#5c9<5$IWlKGsIX7b$cd(nEi<53m(g/dZ5e\Z+2p'GN&QU/A?oE,(n)9CpH%Z.Vf.?aTReefGoGm$`_@12#;/,26uX:9AS>Gd`'=a+luE]3e`d_;,:[rpHr,KAAV^mbBbC;d.6dc(BN:?bOXipK)k&OkOn@3&Ifg%knod>J*.=`90[)[h1Hksfr%V/N!,6.+j:),*%n(senZ?M?b6]8p!VT+1".V%].N?siF(ka6f+a8;B66EmVIHj4'7qUffGB`jY,Ma%"d#?\b\LF[6*Q7X%d2Dm\nCeG([Zhn(_1ceF/qM54kQ*bB;R@`Y7`P[/dKhQaehHFAm8&WMP;3Q'SJ]-f\:dlm59dc7f!ErS<?9'%7m:/Q)!SNE;9GEnrEXTu%IK!r`MA"3]e+89%sqN!c4uZ"9,@RBs6-mD^g)ZtTS<2`l7Ur;$D5E^ijH">lcJV^fl4K)bZ1iEGRFs(%^R%WG[FU*U\4W/MfHE=3\?P_JKhAXO0<@#M$UgAYR^mfQdlSN;RB,2h*`K>sll;B(46auBcUnq,MD#PKgf_3\23IY%4%[B>cMk]B%?4rLQm81>Dru;YEBn-$AL'(I:d9nY6+B),>Aa_fgag?9T3^@B$!Y*k>>B)):fClAr5OXRi.hT<2,`N5,k'CbO4h4=bFM#%dGZ21R%>L/Fq"(`'0.\aLO51()10mh+A".a'YrRP>k6@Gp9`[\5s`C0iaVn?G3YJ^mi?!K#E^Xi.fDr5VM:on$mKpA!F,?)0&oa;<'_%Mq:%bO8h2b+DC-"O@(mp*SnDN8YNfg-j/H[c6%u+Jr*!j*(.VmGo_NbWNQR.MqhNA(#0%G2l:JhS/BAZE<qG;/[2M:V*j@;?[Y%Ph'-3%4G^r*X]sm%9rDUc/=4$uXI%d&ClmU57R4^QI7jIV<p0,a=G$F\,S%8Nr=ZR%bhWG0CH^M!24LEC0pb^GT@cqbW6GkPBtq/uh]kTp%]=:kBnPlq=oK2N\\)ZF&cqZO^o\K95ossKOnk_2l;`Z<C$ee#i`CQ+R^g!7_V$?@5P2&Dp@tpFk?-HO_k-&`fCM:$AcoAdO8"DLi%?4(Hi0+Z-^Gk8g7LGCW9'_-&sRpSg@BA!0j^:7^2Yl!d4rc0(2EXkDqQe3H>+^Qge6!l^5:'Hu"IOZ;$iiU$<WcbJrgTE/3!N>C1%CU4<kYqZKHs!P.77O_FaCel$u]OC0D%en%l2muAc`6F?3GkY00VbY#!m+HZn$'n_/M7Q<#K6X$D5A$@u[Dmo9547?C4_[<?HuME<%0s$oFpo]k:$qAh%=nPt!f1P5hGBW`#Y4UGU;EP]e=Y!S+3\(?7Zp$-]KNK]"aOq#CK3I.h8e9af?.rZ>\,3VGHY`Ff;L(MP?D73(%[-OL_i7=al?nM$HpUgVOItGHb*N@9YgaT=^9:M"?An*Ie=fC2l$/*ng`i%(D3g>htq#,d(ilc\bqctmr0fImhVO!+-MsnCE^K(*C%QNd[UkG<q<ha(]4qOgWD>VJQ!Mt'0JNWG)bnP.*GQ7o]B^>=2eAfgb.cl^pW.k6Tm8N,$=P`W,!2TusnH!oY+lO,HX]g6L.BO#L=%GMW@i^O-:%D[\S8h=ipMk?Ms#[On/E_Z;P0TCRc<e\:\jp1=#b7.%WB"ABdn^`p=Zc^]Jl2*f>jjtQ"=Dke/)[rF/-UjW3b!X\R3%"K8]k$PY_bPEUVer0Olk?_Fo<<]Tcj;h)O6i%-e8cYaY6`L!JtLYQ7$3osPKi(/[5&b'M""-A<,kH]@rjf*:XI=0/,*Uc4O9PV<F%nIu\nlU!Y_:NS:+iLmDug*qTZF1UXAhb,5L@R1"S4hF1\F\F973:>GCpH`W!/nCe_+if\uDdW=5S0IWd9F;VX9`*nWe#gft4$>W=%MRR4/g<b`=VA<>uf(\<be?uF'D[+YH5cn\\I,Y@j0]quOlIcIGl;0-\P*[Oer*eJ)UrT'/!ADP:.)^cP-p'u%ldN'\7:LG5;Wi]&%5YVOtm)pY>ff9,?&4;="0A[cqOJW^^K_M+r-DGr*b9=dj+@B1X-Ii:XI:PmdUpY+D\RX0B+a:utq3)V]A#.`3ht6;NRI%Z>Uj+9U%'A`VFe]fHpP4K;L,f:f=Rj%D!Z6%k=*1EfUr@,\od:0F`-qI6YMkka.Qp4G2q[EAa:T;oKr.js/dr4?P%"L/M*nmX_Yb3jh)nrQ)%PEAAM@GcRNY0Rlq7Uj(?4#+@EZ(CL8Md>RN^;m3aAHBd?O2nIBFR]]%;W-CY"[KhI%*NNZ-6])K==81_0K7&[D^V/F2j4eVl86!?%!dNAr8I:ZA-6@;od?/hM3gda^K$Vig$kHqo1#Jao)'7"P2=>ZF1W+h_TJ=3VR2I'i?tPbOdEE"0An[^lo4V`j#;[Wsm!U]H_h/g>%)tuObRGksjH@.nH1G_.\+`$U3R[N-N%.TInO(N!K0S:ac5"@Cb4IErhc$bUaAp?!3]$g%\AqgOHG\/\HU!T#/1Vim:7l)q`Qn`+2%UIR*r4I?/;lut9B_h/h1c-]r3WVr<_XLt:CWp8s^<sVF38^*e@hbKJ:Q=est,XEdE/qV5-BH+NL(`'+^gI140Jo]N/&\)N(q>cb]%.(W/4eBR8a_Wj_hd1G(+BB=Y7%f7[\f0-rP+)Or2hr#R4Q%)EeApf]^p`0uTTXu18i;luAiZP4LW^Mb`-/OM"l['rEUgh[kAr[p5%1np^\D3sXnVa=s/olYc]8\Cna5Bqh^qf4T"Nh[Qo%Xa]EU'DLfj/6,Z'ESQU_p::bVSf[TL)36ZSqG0ihr+5F5Be*&)9[g"c-FWJ%fE_0@b[mie8r*l$?Ho5]Pl*d8lOTZ\ddrjdPp.;LfNu*oCD+RIjc[88EDca-P'h_-mj7cpc?kG&r/0e)BAGpaUhB7pAfQ?\5/?0F%rrD?102bq_risq3fB9(iH?!-gbXd_%eO]fZ-.b39T0+`0lpKdS?qs_..nmlQYE,#SlOWfh@X_TcZRMd-bH9N.I-J1EW*C>P;&&BM%%PF>fM[cuhfZ"^WV9M<'FE090c8"hLrHb<.Xo?Q=(o&\.pPUQbc.(I-HF'5jqoZ)(lYj[rip5Nt7J)];@"'c;pUik\&&_?*$-\na%Rur4K)JV"a>2NcGJ=n*!E&?3"^:#r^d](+GGt-[R8f7H;h>tmP(`"pbWHI6J%ui@lXtp#i-_fm`Pa%p]Y6aXL`oXF)n"'-?NFk8`%*ncKgA.Ek`\m=V9HhD]arguKj;]U>=gOj/h\rjPG*?8a5^0^3VlHgP/CLT$S?b)ZP+!"D>XTUr5.,M&'@Vs_*MH*Ji4(+bB$lF\k%\r.lYma;+^h[bhdi?+B^Uho`Z0f,D8<uQM\cHa`pF`2Rfjn<$Hk-L5!41WFCf%^,ojt;.YjVM[L69_mYoPCa@f3RSB],1t!"Ft;i%1@*cF_t9)JhpM/,DNi&bK6.2.]_D'6jWBBSV;cZ1]BTP1:#ABBNb7?bp2!Rn:P;/qEEf+&WlqB<NZ]'SZTgD5NPT@Y9p[=Kfn-H#%L:3;`o_Wdq1paBuSZ_5Jp23`7]WC4d%i=q27c0$s4o-(YirG;Xq!UnW4cd&(.i#,:0?(6&dsX?dW0jr+V5NZsp1m5=fZta+Rq6mo%SClUj&P6Y-;1?4+fHE)Ka+<EB>@=dT/K<9jo-4UO@usCAlfe8:4$90K'nf/kNXc^Xnkue25N6-[a-@aQ?ho,1*F!U\B4@??L0!`I%%XLHK,oVJpGp:e8\&:*$!"*U+PPU$'B3DTB>O%%%fPif*BG?]>(;ND`Y<U4Lf:>Ughk+WFnfL9jOqG1s>!)J48nUAN3Ig7_^bYV*%Fq1.#J"&W\c7B'\foYW%P=mn/TMS;KI#fV9h1El3*g1lr:[qDeIW^*&l3l:jPHM2ua.GLe!]E7gF],s+,tCM7S\@8O*Y@8sDSlCt%*-%\>D;XmF@_DPJSe42>:-X6\YhM@7e%eF8pteKlW<F>NkukL+(?coP>P0P>r]]XS0XpEI7(9J_d.ph=C"sJW2]'MY@%qXJ`(*2U%(X]CK3u[t>$91Pff9t&]Im)V'<`]_!1;3TOnR:;L\HQpoh7_PZ<;h[@FVeBt`X068>Fuod(W9OqfMLQ>1WAT;as84&Jn1;kf>5sD%\]DoP(BZKlDOciLSZiuFkdUSkUI3fV_NfW8kR`ikiqZeKLU]?T/V!$Kpud4q#J1q=-(eVi0$))$Cf7IL1X%cS"8Bgsg]1FTKmVj#%DBc>MEGo*-B9ChWl06[YSY=oLl9,%qmgO8YNQe`Db<#fcChB:;?/?IlWG(GIhrUE6\1l#eqn'Ksj*h-T4Sub'1\>jLbd5(-4/6dJ%RX+UNH"SsC9/Fon0(1>(ZSKl+0(4a"aVN,kJ!5(gS-iZdg#(n^7:P;`Z"B2D#5hqBT)DsO).ke:f/ifA1ZJk*@rq!cSTe]45$c08%jdhMp(.7!X=l*:,An@S4?/?I_8m=IR?fdi09`An'7u4f6o_8<8RT5f,.mNK`o$2Wh1hN2#L,kq#1ml&"4%$c'Z@%C@o$3&oA=7([%QZiXL#u5sFFl$7Hp?O!-&1Lq7q0B<k4*0QIrDh_-Gi#&mhO0;rs![>pA=Q>_a:^Q&bU_^ap3C;LOc@Sk^WS\pGCMBBRP=3SV8`E^%mu0Y]IZkce.dtSs/[Nbb,AW\Kg<&p2>hR>NP]oSQZNCh/J":fG?H_6eSW1rNT2j_c]/P-8PlSSE3s1EF?O?5f]JE_?(N:\9YOg$`%Yn0t<r&X;*e?0$^$1R8n1T^E\]Fs/SH"S7.K!,=PFl""_=R_RU^WnpY$Br7U!Q*rhJbR0.mTZ?9mfo195&k-ne6U:4,Pt+qALhoQ%I(/HqjaN7Hcs`H'4RF6B1#d:n*;VW:1q5oigZE3A](f01]Z5)uf%MQ99jsX.qmbdFYpNed7/Uu0$c^$?p9qR&o&pt<l;qDrq(PV\%EbDR46d#Lp;B%S/05g!)bO\S>,Mu&1.iD&YPK!HJBq>(fK?XfbE7m@t<c<o.rOqg^gWb/$L4D"]NcgMA`=q"RMblS)j2&u_[b;e:%OF>O1N@1u-\[Y!uI$@TRQ+O_7iDLTH%h`d3DtEE6rE$@eY)<It\!UMUruct*aSQq<Xef!l]mL9Namjbl^FM%obt0s=J48FA:jcQ`%8`@?`(\W3oN,04b$?sZg1ih8jCJsg!*Ri;YdUMW34mEs5*`n*5ol_gO\R+!;,FpMTFGoT-Am;N<.G&8*kD[J;4%>o62"m\A4LVfq%/f2"j*qs%o.)JNUpON]GT<C18O*e.FVp@]+<045uBM-HR\U.g-Sm:CCG:TE`o8Q.3XkRC[QSAtMbI3S#CMQ"sk7nE]0*.V:Kjq^/%qjcnuS?9)TfW5=ccc8A_/F,CoJ^C)]4k[UG9)&%n>PZ1%Q]$7^Z7=d\<Ued6[8r;Q:gPfP2`op;Y.SYS].W`^?hrdo;]/jc[IoEX%nWbH:OLk[%EPFcs,50ZAL2io"B4fh/rh-iNA+dch,Y"\CY1C?'8RTZ+JMr!2SJ3,[Ym(L\_d9a=U'&*,d@5-)9XVOJd@<F.1=IRV%c(I'oR,?ILK;$e5qc6oj&YGL0\L'.8>i=UUJXgBr=4/ma$a."Ng`'G;*iKA$5S8CGAA?`^mce+L]A5"$ge$T<5(E9[I,].jI[3lI%*#@-%Kr*SFPIR4CG(qKibdJ/A:ru`GYTk/Rs8%hJ,B'2]P!^)`WPhOT@@g)q03nkL]f@@105&%e\M(sH^!rX`hoqZEIGLA_+ZV?\%F3-BK!QIQpKB0S&P/,*_a$62D@)c[%OdV4),$W7h\j4Ogn=$Q$I(aL.$qLp]"73YpG2*\GEL[!L2NQ:7((N0a`_\tYipP\kgKkL$%PshAaJ(J!\LTH)?ij%pONR?er]ooRK*c>t<j_,GJ.?P8Z\)6bu@K-hE:MFK)i79]\_GV&8ml:?]]It&\7iBL'=A>\#)^%GQQ!J-/%SrhD*j!<ZnOtL$T=2k)0m=O`/E<&>5-96(QY1i+;T:O%MOO4*T^D>N\HS/GH(5%pRqI%sp%e=DDhIs?YbQ$(=&O&hej5<0";q7YU%TLB#e`WcpBO"6>PkoAedU;uXlluaQ%)s!L=6*o#mp\p#HYj(T:q"c*T9grdR=6R76N<;/q/+eQd/""0H$6[&P\7c*G^\`5.@l)#`%J)J?jr8SHZrZ.8u-dftI/m?/AQ]VE;'LblZ8qP>Y^WiAW8X/l2E?p"E&m^KQJt,dS`TUk1FES9V-#&B,IlKOZWdq:@IE^TOD?B:n%B)Hgq9<e=Y5nK2?Vhi\uPBb@/ipOt4;Gu"(am*WL(gVoIPr&3M!WW0=VG=.k,/K(EP359(6P>T?.V`!_.jE),:=E;uOjgR,9>W@$%dA/-i6053q=\&mi9`#*c^dhtOWih5T6'O2P>)gU<P2c\n,&ok1Xba&(2',9HTX-%8iO>foH;rhqU`oeu@=oc?YcpB!LS\#@*E<0&%Gps'7aV_&!!MXfkaZE]d/ZJ%9V:EM"0Fe_tX\"e@JgRHo=\QuLW^_8&:Wf-#7n!lk"!_8MVSE:9eHe!OS0gQ9T@>\lNJ]u1\dj.!%GbXF&(I4#Hk@(cU,2g$9/ZHj\:7;<>=(-,_icIV>-GY-U$eV6VZ-(?u5^'.U=CXW1i"!2IQh@/q_#T!G6&+&,/uctp^nCf6)1]:"%A5eIYJ//X,i,W?_$="`f*->%t/D^/>i2.DIRVWftRnPX`GO\4"`_I(gP9k"NBTj^BCki$ufV"*mepLBX@;X@6X+G"^75Y->6/F:E%VhIc?3Lp`u//PdU\'_.D5cYKgLNc27:9u2;hho&KMt"M'A34=QllrMKV1P)a<J;fFjE(]P6Nee?!$.PR8XF*(V^W6m&chCo-GZK,%E]e+ME>tTCJl-6G^ag,^P/7m4Q'3uD8CVBP1t[!"`/,CJ&es%mOX+.h^qn"jJ@>3V8^M&)2EGQ837S4cZ\^q>RQ*mDXTt=`9i^RT%Y_P9;fl;YmMUMm-Ld>0V9d3^tr(H*M`RVm7P5RO[;,u.1]%LW1+<X=O(pG.%+XGmK*\ODoM)nj?8TeEq97k5!m-%q2Lgh7,@D6=-%#<&l)Z]+.>9a"#A`Z%Re-:T_%'+baL-X0[rPfE<rPG%-(pc)8/AVc=ZOdrU"H8N>K]t4H)%j6JT9EGF/B`'u6=un_s6ndl6.(D1_%gs$2VVdI4>TGs&a+R7OtI%,qt2T@urm#.b4]G#F^bUH<ZnfZPGlTei%1L"'Kk28[0PI[0q-Hkg?<s]s/-pplhqhks\Tu1)&k$B';%$7HYmW+'*hd^:V3%O/?D3a8tD+m>rN(G5-=\TB46!=ML<0=dNF7V2A#ZSPgpfjq5>I*i#G*8Xl\a;T'W#&PMX,(JTQCFTuHUr>Xg%1+rr/Se+1&fip_BC\@s4#*f=c8OAD)[4+V%3Jj0Nn2D1)JrW0$^j.1TA6"n-gCBtr6<5fh!LH>JT@ZahP%g,qnTGd9+9Y*BfT.W%%]m*!Q]WQ!mN#3LKHda.i29@$,S^O.CBX+Ns4SBD1dKEdn"6GVelQY#*fNQu3k`Pu@VP"1c"DE\%)Dj^T$>Ze*PQB5jG*TldpJ<Cc%91D%:SHr1FCXB6MJ5$=bTgY/.C#MA#^i+q%4ZEVR$r'LLIe$^iW4da#T@^o$OApTnk%'>Hej*j,Dk[[1[mK^M[)fI[UdYE]:J(\Q%,5J?UJr7<cS\Cf]bbP:<YL=8oXe?h4Vc:H6KAW*uJh1tb$A)p=!rRXg-o.>k!o&[\W_<Y^J.a;-.Tn-lQ7&I7lOk%:]HkrA;:4VV%S5(?6fqQ?,C5tIb]WS<d9Lo6c4)>Cq^q:-f,T16\_6c['%kZ;nZZQ9^O(`V2/nmTb%U4J2-/&D1!h#EM"N-$."\r*DNOGd;7"M,&%LR+7O;bKbKF4P(<;<E].[mWKQW7j`GNohSk1'cSbih"W0A_7@b/V,]c5mN-$(m2h,kR,,M6,V8WU]=H%_?LU&OMH7mA[XuEN>1,c%'H&#hX;4,-0S5tG0bkSu+T,8_3hhM'#Q[;Y-q\T#c,`e5]1'"iS46O''%2q/Pes/'mCH%7CD'hXfkK5LTI^\$kSf<qp^Je=pasT#%HUF!2$[?P[N$(&j68Z>++>JJr(TlT5KU4NPZtQ1)abj.6-fo?ZT\6<ngc1LLc&H44:,Ykr/OgmhAB(_SKd$eF`i[<rn5E:3-S#h=%LU+Oh'&[?t!]X-"Rnef<"\Ag93O.1Q@Ku4Be19[.fK]ap%1E]'UtV`d(0+:-i8?OTO!a3UDrZ-n#=oZVJHBMJ70YKa'@*^7M8PF3%+R?%Fa#Nc*Ac&?4MotYBcB0H8)B.:F?I]<X\frp3"1jME>9XHdAsWMEKUbj%Q=rJWNFi?.O:XGG#3'.H><mTBU^O":6f:95-X+:,%4/*p4Fs_khNgG%'*'og/"uMS#&S7nsD)/pqL+,'+FI\.$[[PPg'qF`D$,Ae[#3Sgm3?[6F\>bW3:*"-WcB&JJD:)<MHjHg)'3)#$%#Kl0<R0aRAs,Ae6)R6[u!pF+gXg3p0hRAO)KXZjMiX:[M?%2;,nId9$;o]L%_l6UgJ6/g^"73@'QQ\J[?of#/4GQSkOQZit7<k?=%f"f302M#FNaUr@924G`)/W^9>9M&^\MOeL-Sr!r8Zq[^cH&43sVfGK,M'sIjTc&bbGgIbU-;]q;jhu]p%>9!dC''d(7UAtQS)P_"%<('lr$RO4mi,,!D.+Ddco/X/l*$t_Q.Ap9K"@=?SRUp)5-oERgCf3.6<l%cCMB4X7)%1ki\V')Z#j3q##TFK3Kih"ndLJ^=C=&DC%#Q0;l;`Tu>=qQ]NWD#!Z`".P;;)aF;BYb-FP8bqb86Wq$RB#CL,Z(iUR1PHZic<u60Hq9T@UEX'MNPRpiXVXK6<T/o,k>/<GWIB0%SOQgoAgM,b0%jGoVXRu0@RN]&5sR%&Ecc%*"9%8/;.]oSL:50d9GuFJ,>#13+O`?V6-u>;EM48I,.pA2?#r$Q+A3,56pj7mcANAn%JlkaF/i:!b!g8b\77'"MIn>_jh**Gnh3&o6VH0@n.,(@^'2KA0.tACV"VMDc^s=3WO0g<,60$WH\3m^^1-3_2LqQ4kY_U:5@gaMo%TX`ph8q\\P(@Y&T:aCbgd&:.Kb7P%rU8J&s#T/XW-4&?Po.[';Rr)gr@^aoI?.PBcA^H,V0Hk6D%RZ[V>9J+u9ucB-?BPG'KCR;+%7TGj+!CL+L\f$.Q$PJF)g:.<T86"AlO,$4<'?+KiBFk>ZVNSK@<P^I;+^YUBHqfajM]a7NA^PYkVE\MKJi$'!SHGr?0Jb$9HPo8K%7Zad/BMQX')9c"iR6X/OOgS3AUo9LgW&ZA\ALp[s=#"RmShqg0MOg60M$-:bm"E'NKJoeALXlXc:9r4LOP%\/6BXq:"Lh.'_UT:R%_;ZUZNIMXqN[@=/gb6OIBTD%?Pg#jB"qch3eH%)n&A6q+%N#sBB/EKG!La-dZ^ROQ:aF$>07/>q.7EIURm]*6719Y]YZ6oHBYlHJ%(lptH6FE\uF6HWqN6='5+>b?Sb%1Ve[IN#41=@AW-k![/bt3?sa2GP\U'uem*M\Ocb'$Ot?I[O`/3mlFm;<f&cFk@T'a?R13]#/[%G=r@*L<@=:eZaW^OhF+@hGRW(*/ah%*gHfHe88g4L-[G(jV+t-F.<+FkLOd2C=b/Z_->W#UW3D$H(Z>Df_cZYN[ca3__<o$]W3P[%]A\gWo/<Y(2Y"BBY`;P\WXa63X@$r1rgFEP0R+73Uko`'M*s<3"hG8Q>Q-[Aka86^::J'Hr,'3JiGUSM],uJ@/hII<!)c3h"*mDd%7&SuSg6Ym3L-NI(l@t"O+r1V8_nRNj(6H[12V4U:6`O_WCM3c/I07Eac9%IGX2B/m<.Vj36N\LY,-_-&!MbOTJaQWs&SJIu"))0+%[HS]>';sM'#&%D90Co\o%5_a,Dk\C)B[@HN2+8iHI*1,c*s!e,j::;sW46U-!Uq@RJuY'f#p=V@jD7r1Uf0-ap]s-$e.+_c5pJmJ%\jY$SYm>I"+EOp+n.Dm]VbPZ25bjM+?c,C\R+5sC&^9(9dl1'^>!!P)(G/sErjqH(-tjcs@?XI'R=IV`Rb/8C?D'TkfTLcdngnZ%%l*q]e75TiVV+dCXBFm$kHk0TDA@mVIo8&PU,N-$X4$<^'$jF7u!6>f*\5XuJ#dlbtBOYBMl60ij&$S/!'7#n!JENp^NM0775m*+Y%(bUDE18<<OB?d_Or<@fXMrYhHGg5_8W1"M7f4KDq-k$\`WL,dNb?)T6CiD?_G#V>6%2q`\9''WHSnq?d,(_XR1c?1'T)t;m3=\!V%!PJs=Nm(rf5cm-N7q4Lm"i@#Y/l&'6]I'j05QGZ[%%&Jl0qu+a.+E"Kl)?6`A+1Su5q0e^25Z5'M389*$+te:%":X=@f%Scl%ok$%`^G\Zj.3Ve&S\$E['sXc_..IP1dVSe`iFimdR`YRW%]s)E\)9^D&l(_M>\WeoO`"cR_X0/Zq-VtJ&N_,370;H6ssh:[=6"eGWIHL%G&S1.GF5S$2E-b7p'.%>N+',%fZH+*.aToo8IX[TC!T`V`hU\rogpWu=HX"*?o>/o-82VNM\K-:e7PTpQ-O-B.M^PZ4(o-):mc&B%'M<^DU2D2b(&(k9Oh#4\)[obDR4pSQ7:e**a\^?WCIXs^PLr4cB%gD:ahVQm@=F3;41H2tGSVK7DaK@13gj/,:2p\%8J;L%RHqgu%1(+LHXPd2A1U.ebTLgiaaY8Z-(kEO4&(m]A\t(4N-J20)[LGN!72kP;:F+:UR\8?u!h'BC-<!6`//`%IZDF=I1+"o97_"U:VL<,M%f?b`2R]D-P?7RoVGe@YK91/uldgWrIO`0f`,dF\(7h^e>)/Lb\.2S1)`"\=&j@$;@9L9\j[shCMZB_(Up)^MOE39P>OM*pl7?,#k%2/.kR(dqoN(^up,(pK>H64fT-N`gSEDai$O\q.6rYVKl'"dteujG^X,l_/V<%1Z'!P1Y#tHj+;J2FrG=c/^1J<&';&,;W1I"-!UD%"XI^OQjr+&C=o;(5nCK18^SMEJ8BgJ=Q4p!8)dWE?6LQ2Gd9cUF:AS`hBfa,7:HU1'(P/tI2@''aAa#M&Ii(0NQp$6(/-QPc\0us%U/!m!bg"&8.`8X7POh^:BkT(PR/sLYs/3.&#7peo2WupP;;rZsnJtV,W:\V#4J(UC1CBlt*-k,>N'6=f8t_$4TL^nW+RrL>*EeZ:%FI#6<[M#G@#R1lnFMnC>['4!5Tn/OJE&'ooI%V#!8)Omjfn$[G9I1#;Uli-n"4**o(0m`Z<$W<R,&<o'a&=kPnK+84P->9OB`o4R%[A,#`@72afK>R+^dlA0biQ/PhDudq`Y_+-VK[i%R2ZeB$k\Q=tGENXHd_ZY&d6=k3d0!;J\5$(09et%O<YOIdcrfp*dKntm9Zn^>%?rgdf>.TH6HmDJfRQsg9XsS]T2g^ZDELb#K7n653$mOkJreH/0GUu$L)IPI`>3PZD4NFdpF@C1+aIj's91G+s7sal+'Uat*.&,Y8%4?;b99d%RbGT)PDPJd``UFl_,O^NbL_$)J!1eso_*2.Pa_ZJ(-Zo<dX^`kG"9e+.dY^o9C)<i8-"l;^Aj<]YR8=B)S::9(*8r43M%([29]N&BjhUY,Y`':=P.N)OCC`fRLK'076RB''+-2AjKsZH/E#VNVY<#P4:`JhahhJef@=1$C)X)HpdZ6geV=&]>AG(]bdpfFU06%i?DEV#:,l`$9#^&%4[:9;Sf,2hR+MOTZI1r$6G/f0M+V5QBH,+i#)pQ%6)DEKl.'uW9?OXb+d"4k^bo9B7tAXD6ZAbKFp4m`_i*(%5W4AB,Vid8/Lgpb3UMDBdl#5ukTWQ68Xdj'jqXCW1N\4:F%6gf)M=ZD$$f+mR*!50!pubeQT.F->9G[f,324#P*s6u1hhtda[")X%/Q3Mm,!mGr%?l?(F$;0NPW;)q0c;Aa5:a;k"!%h=#3%]iUX1=iD'Ku$:IiSnFZ%9_K+/]S4/LRt+NBSsOb=kZNKr8ZS`,2^RRD>o%@7WZ.LtEXZ:o0j$9=h)>`T*_:$)h=!..?B;bF310J@5YL!ns*A"N4/^_'T1_$oa(S$&D?4XP"klb*(OR&Z?U_`=d_Q@G2?F,gB)l%M*TO`Zp^RhM2FPTHW8ZF!\pXJgD[(-MXC%J7Ni3YLl#RN$#&[W.0/lTR$/Kk&A9*-8n&&k%"&mp5"#IHmA:gD3#*fmR9[NQ!sr#L%2A(b]$76%W#]r^$'S/"^MH?d6`r%<f8YDG0XYs=d!kcacK-j`5=^9/PKI/LD`#L:@;KuiQ".CLQF_-RJc=ga_0ujWj"EmbhCg5>`%dZ>DhXK3b&]))bbBK4K)=NMc2k)=Ik_1HM"!^N*JK#&LUFYlq89"''ee?Q:i:#.42&QHm&_TBCN=Wot.Hc-#k+m@/J,bC9TIaa@p%/4[tLD*aB*8ZMS-Bd!^;VJ?>E]Z,b\bg"Ph$d5r@M3T7=HRP&F%0K@`]n*^pN[AkMa<3ru(t^&mNIbAiE6N9/<)5V,)3=JkW`+ae%-"H'KbPkn@Q&LGNb:"U,'s<pYZ'f69Dd].OBbG.DKQpPMTJL5N3)YQ)Pt4'eZN>f$'QL!_Kh[0[E9m$_h$D%m'P:Xu/^FcRbB>),%i2A1P,@KLV2@+ns*\!2;fJYKsTF2Rg9*WT/<#sU/bB*e:p>_-C!]uUOV:f#)am^Rd)8/F#1]l,?mI]k'+>^lg-4V7-fK]p&i&@Wk%^fUuiVWsQAN*@VG;$(RNE',sJ!_<-Ll7Hfp;)rFmaQQ80O.o(nBte$aRfnnsWM7*R'dmO8J[FpX@^M4R%r<HD'O+,ZM$iS#6oGZ<%E)AJrAjoopHBG5US4`ug,*?dd);G7oCQjm_<=GBG!elcT+JFM<@*JcN9b-boHiW42%J7jU)G#O^MFC&[EAb!-q&(,BFrWDZ=E\1i%:aDdjm7g"(fLM&Ybl\l/PT+3:KoYYRfgfWT4WIQ,Zrm["l.HVnM'E8X.NXcd1(Y_2&"QGeLsgO11l4!(WD!aH!D@keSkT`Q8&3aa%*rQrc<@knJ.FqW8XiM]3&[p:^a:Wo3?e]L^;GiG+>HmIR%&&Ic`E5Z=S&X(b!(Q)6$Ae<f:gN[71Joq7BWC'KKPe=I)Pt=u>laRa%1e>]N5VrNh9\C@1NC7;KP<bUfqF&be*:"H[L\N190^O#6L2i,\0oCSFJ48&/CDQ0p_4i,6pd8L^,rRAB]3XSO?DC6+,hr)k@VI,8%a.e>3.LrUNh&t(22"ZlL@6A$h%7?p,2SeV>7CFs?dHF4Wj8Vd'].70*/&>[jYhqa?SZ$MBKVr'McZ.l`3EKnYrDTo6$ik#IWaFtN%j<?ki`6@lGnA6u"S[=O.F.OB[b"=j3APD%DS>$WA'``2MrHk)E]EcI?Ib1aF'm/6=X-s,0CKHM!_L9QK[':c94TU'9jQNY%7&BQZ%]5W^`ros(_nne0(?2ShPg2F3-ZPCbi#/Xd<*=@1QrX9o8FKrmOKfbr3$*+m?VR>(S]>OFL[JVXa5@DuDmdaA99p7YW.ahsVbcTbY%!pHo-@JP3M04-BNjm0SeQR;Ve2[aj*_X/LtnNA4aGPSguHBp4+KN@fQ<n4:Ya"N[tGPS8\]^o7>.a4T1BgQQLr[qPB./1%TF8>Yu%WJu>"ZL'#%ldl6W!qnr__;;53"ab_Jh?4fs#XlT<L-'!VK3,8a/hlJTIH<\_WPPft's'ITkH&&Ei"_1^YN$?+!6j.6J*>kh[/YIK%r#N2NZ/;7We)''0,c,^Jr8%eib]bOF^Zm,_$Q+oh?48\?iRb-V!X=0mMpKlgdkhgo!%U2?f^4X(J,u[a+"gsO'Yq&*SS,\F(neF2%"g!G7/JbR?0322jb-E6&):_:@q?Kj=S2Um=%BeO1f(o5lD[ge,NYA$Emd80Fe-&2*Jrl]SZNb@7#;p*QbUV&(+Cs.:qUngB0g5ls%?iu^f,6%XH-VVkK80S12K3u7fZ:ng75gS*oaRJ$O*3u7bdT3[B`bEu-HUrY(YL=4J0`^a;-Yi_.Q/lWY9dK.a``D#N;i<k(i+9aF%(1X5@NN56[AjtsCAYdeD`)R]D+$,bp5G8'LEDLHA?LDNH1HB"Wc3Luc,cn8a)EVEh\=$$OiHYZJIt-@i)0d%Sd3DXK_:S9D^U[M<%pI'[Da1Ra?;LE3?F-jf%WomMMk1SdChVj`c#kKqTV0.o-gQ\82#k/(l@)7cJOU5F-8+^tr?]Grt]>'nYbN)G6ODj(iqRuOYc=$gR%Ua,g<g<>'*3Q7e_@%_!c3phLr%@p+fKa0;kl\.7\6U-)BP;<=BN:DkK^[A/tN8.BI]AoCZmLq`XoYQch8^+Vf@F(I&JGV-DIn/nS%54e[,q-=)M=%ru4J,f7X@f&noY(<ErA/fd#T70UO8g<YG$]h80+e`(I>7AI@PKbYh4ap52oQ&=J)aq2UQ3in+:b<qJ*fK%`Ab\O#%+8%^f8dK^d\cE2QI8:jA*MO:hnUpW6VTH_ASVIli@$/iX3RE+//2F<G5X;)1S"U@'f&HXV!&uTJ`US^k=t$6F\T7/_l%M9&j![:Q%%-IlT*QEd;ml9dWlWqc4Yb/UBUu0Gs#O+obN:R<8'0`R)Ip^K0TN;28g&rO.MZ1KUR,:U0F2@2;!o/RqU]\HCH*9!^M1Z,SFG-RL%X-:R.q7DP#j.:R"\]>3$%1E/#g1R`P,m*IIb%E9Mfa#8n?:HFeTLlGA:aP\=$Y?flnr+Q1BBADA_FF]aTseULKk^)db@V)+T\?<H%PgphSaM)pi\*g+oc(39ADb'_69FA!Pn%83CiCW$r5'%%pkZbLub?NO=^AQ<Q4IpJimWl#u_>h1Wr;G8DGA0%Fa?:2@nET32ojL7N%#<8T*`IIpNQq6C8O+hZtkNq@"dK#)Pe*%VK`M^!,NX^-CQfc]ZpD)%%./glT@qEW+r9JX8o<s^JFdJG)Ae!BIoeEd,)A,1sB%A!-%a3;C5o\82/1CN4a%[pm>h77M6,gN%]=B1l"T]3XMq3kHRWP:;UAlc$XZ,&)inZ5U!]tq\L*lFR3X2]QBB14jnem3dN[eBmGbdpF[%Cm%n:F`Cq;N;)MQb^+.]N1[_@*WtXXUL?K/Q0M^aPcpJYM#>6T.MJ>ppQsl6KUIP'ofMK.=g:R>46q1T@:tRsS?$-kE0ZUPi;d2\%Nh$p.<7k>.!5i3UMq%.dGM('`\r5&umsJN(U%QX;0XRDh)2?^(D.Q/l($7^$])qc1hK@haR/Hp:2f"5GrQj<c/nE`#ZPrP^lC)LL%KsS?sgLK1nR,*2)((R"%qeP/lY-bIS_?#;ir%W2?5^<d.-">V=hZ0(Z0D.&=!.[=Z$lf7MT<7]m=DE3Ll_P8K4I6Z+8cr^+%0]iK%bZ.e@,Rsoh+gAL>W0P7*#[&\Y8-JuYJZo@bJ+<]Xf\o9)Y1jOl0/12H#R%qaA1jKaQ3&bQ/iK-,HP(qX`o&s<jB('I28)PJ/od?H%Pi\OhV5FA]pW(0fH#><pLOa3:cnTc@qlND<d+,nHOOhqeJq'Co.DoG]s*0#AhSS`)Q62Z3"ij72]t'(rrNT69ejmCW==GN/(FEpf%D*2/)XR-+s39;8up1pD@+?GfX!0<!-)1+,9@Y?olM?iufTffY-/<jdBKn]*A]Wb5(q0DE*S]/=FGHQEsKWn;\r+:4)fARf<lsqC%%+PI!OThr^GP>mTda8BAS%PnP2"Y)p-p5(\]dXFG[9SsH$Cc?2M]>V(,^pYmQ.Wc-F%TkMskStq7nsfd]*$K9+)+U,VWMH=<$j'W5%ZEej%Ad0ZCo\*O]J%ITTaZ+tKp^4^>>mC%l1n+h.\?os\()R')DTsA79Jt8lPT0Z'%'/Y=optmhf,cG9"$'euK)(%HS1Hb!B&4P;%?A%c'Eo%0:0([eC:-&98]"''R7f<NX;rOq`M%B_J%?W6hhZ6Q=8(JKAZB/=ZZTT#cW1SXOIHe`Ff>SjX`2ttlnZcVIX_f"/,9_e<%*tFaLT:e(TE>7j-$&Q!>I64jB4ss5ll+K2YiI(B>'A+H#r41A8Pi'GM-!C4IiYMiOU*%h^#h2_c^p&rD&:UMXCj-S!&\'<8(BhNE%Q8pnZF8Ym"YQaP,&3m)[(2mn;BGCSk)'jBZG(-KhXtmPXH%1Jj63=F93C\EP>X<'Gdg*\BZTl8'PCf&&V?"[]7+g`4:0Ml5!WIE%%eN9XBnstmrA#\oQJ+Po\T5m*G';K4/<,LVNSdFeZ]Kg2Z2tu'0((cGone4Y$IXY6L;,ro5[e^-2bkuf6I)9.7l53s436b='F4l@i%4[0raY&eq%jZ3n`-JYqBKamcu7@4EXLP:G*3]4"BVrP\kH<sBL?dFm6X\Vl_-CB'S$t"(o0ho`De?`-(,1DiFGqL">E[*=o47=ha%8T/r!R?/2D-'/pmHAt*A^lnuci17cq_;WN)R1AOt`B"0J*HWhk,2%8hkZ5Fb=>Bf$](N-T@=^SB:MdYX&:aF;&Yto]q*1:n=crHm%p?+>NKtS",gZVdK!>Tfr:=E&1bnED?oNXiSkQR2fs+):0!h`"!ZqQr>mIXPVE/38MMn^Q_Ng-s&0q&A5'<$gaK84+&T*;0V/R?$i%Q$j(I_Sk'u!a^B_:de@m&C%SnmngF*orLCPe[u!SG1q-Yke&uUBVg,i'A:E[g!:"HD='4o<0tIZ4*0sG^$sujVCZQGJe6T(Wn>UD%kI(J-GQ'[sp9"r`"i%*/esuF4-j"-r#Bfq7CpG7X(Ak=lVk&h$mCT]kMg/EApEH,Np4NBO'HKpn)jgE4dY&)t%5W_>Djb"k.KLGg%^]]'!T-hW-+Sia5oVm]@>>YQ;]N-:2f\l?NLTUFj$MJ9V_rP>.X6D*V<:A<clN!k7OpPipnmb^c&1,56E+_uiY7jal81@/3qYPQH%,#sO?8HQhhGsVADkBNOOlHlqQ/%,Y?1E-VNcLs.$&9QA$JGfhJ+nOn"OAX.[>h<Pc8>*1j>e,%2CYPK0%n)PO"/4WIRDcL!PXcP+%a26S&c!`FlHs38S?i/sn0a6m5-u5]_\FE%X/5su$5>U$Ppr@-1W##6f*\]"uS$kQW%mX3K:-$[9Z9gk<jdhW*-J>U&qPVpM5"b)Z%15a6H3g=fTO2!u:+dZYLKdDI!oKj:k9_34;@tOG\ap0=)dh,c:3-*0#D^]c4NHQb-[Kk_^HZ<j$%Q>;Nn"<([GP9AeJXol23c/r$%rIBb7;[dQu]NI%G*./[%8^i>7RI_V4P40`C38UY,K>7RO'2FkYXS#=n=fT^_Ns/pGF]ju&^rL+p2\=u^:[a!*<d2j#-UrI`BEn\e%_*iLhG<u)Keh22R(o@K6K7C&kOcJ)*q26OBUOG_kMo-8'MMl\8C'1+QH>rf_r*H8FZ&6j7+?G6f%5iMC!R^Gcs3t#?EYLgK&_8bl%Z^ENrCZu']8_;DYUk%oPLpl<q#oHi2niB7:Oeh&oK+*!#BlA?K2`&[h`$GDF,Uek>lXO\PjHA?>mjOmTlS+[(,a^"T$cnL$8l`N3%cE9Jko2HH6O@^<[EOsk-D*!Pq:aTc9$`cne<[Xo2.VoM4SscX/1@O]e.9"X':^.1WQOcKin+T5iIGW./Eq\?X<AsGqX&[gumfO_.%kH:N+5`"so!s,??U%rE*A90JeM%);q_d1.C(rLu!m4CP'(qe11K>]Q8>`)$h/pWP_SJ02mJ;9)"VEO4Z`YDX3hn_hVicg3AnjmFQ%rYi3#33o$$-19nWe8^Dka,l&1Pd8?o@V-f_W6^_!8];>rB:^B0&:fmWk:sF>:<b,&iB)HrMQZkNE9O=gHIdV]T$_W2M1;]U&_KID%r`N\1D'MV!@rF!q^mps*[)KEf"4Fj&_Y/?"!;JRHn.mHjPimCKN#'Dr=4+CBil9$W-F2'JqWS@>6b2+26CS0QoOmXpT0B/e3r<4&%!'oWqehJ)UUVAIK_8c&+O^hnWObA167*7=BDV*eKS\?H]QBMkHU2#;13G=-oBROj,K:r\-Q/V&@-Get8NqTe+]gm>TrucaSmR47p%=1QMjIGhGFi.8M,""u8#=j@'_7`bn/TJ#]?1^B*(XBI*q4ot_$>ceV?aIYW*6lVo&>!=kTIbac`*_a>6rsd@E(_?aqr;=PIosPmd%IisbD>_JSk!5g_WaR:=ld%=Ab02g=-Aq2:)L?G:jQ8$R)^D9pd)KN-AOEe[0:Pp^i+p8OAIDH&T!/`MsUk#n+JZK(80nm'e,.1ts%_<LJ1LpER8_j.65ha'sUruLt#R4kla>-s7VDLn*aJ!MuV]]X?0<bfj.kB#$Q=UL>_8X=P^$)-,R>+d9IprEDd>*(k)fW8Nns7;jZ%Ft/_pm1us9G(642l(hG/Op;D@R&$6M=:+@%D8<2$`*GIBccZI3KFF7uZ*&,9'`DK[+T<E*J[@d*&4m2bj0rlrYi"F`b@P8)^&TlF%"+,9L%)o6X6S&ObIp@NUTtoQ:8r?pZZ*"E^;b%NJ>63`<59\.8"8(4"<U7-ff5U3f!Hj[-PK7ItZEG!;C5,utU$;1NIE=SN5cRkK%jB0lmS,/tE1mDYtn>+s+(`^3B@DtY>^-Lc\\u_%gLUskOE"R8*=(S2'BoAt3<+>M%C(YI=SR&_A=47)t83Tb6D:4Ci06Whm-2pTC%67r4.o>ZnoeGC+iCQ^R82MM2Id4L@($ddVS8HI)]4NQD[\CiGh;?1B[N"o\0KCbZBK(eN@Rj(>Q$XbR83<u7KQ^%:ITIcu!h]F%M%+hamck`=ZK/U?Y1Y6T"pXf4t>bc&,<*>-qelCsLcHX`.($("ce@s5k>'a,nGQkQ,<Ibo%153E'n`_^-!Jp^e8A_,Q8D:H15"eS,h%NX4l#O>GK!doAjt]$rCKF-t_\*[B8II[FRH%mUbs:5U\4PPU#%K[;&I&?a%4Xn`m*BKo%GHZem%Cl]jjLMn"q[$g(\.!E1+?(YVm%<r8b4)uQAMG33@)k0GAB$Bgod=7Y:#nmc:Zg\:hqjK.YeW/s'l?$H]4Momg24Q(mCNOlG`jIgdM-4@hr`>@-KBr\EJm?D?1<uHr7%c0AWG<J11W'jX=D,6Jmf9gCHq_dj%S(+BCd4H/nuPp.DrUVEFSYD;+YZ#-8Sg&j=Wog6r96`9g^9E+8G,MKanH0"2\I`H,*n*ldF%Q[&5u&u<<=Ao0aurT24nh?YL+*h\;Qm)AC<A9N6VcgO?O]ttiN!^%p\_sn_Aoa=M8$iRY"B"!M5+NcE,&C;A6mUL2\oRd@@@5[u+%E=>57":BXEU4@(S]KI0FH8[.EbffGX5(.(fX8SAQGj@dP9i>5Jg&_eH"rD6K_n;ILNlKW?ji:uaJ@(J+@s[XbQa^0*<526KjtN=I%&$7NBL?_Y5of'7'GaL;0H%HhP,-h!;/?@?Za:9VNC_Z!G\2T]DmFcMYc^?.XXBZ]jn0h--U3VMgkmsjA[`a/d,5\R`cG?2b32aVn%62q1<gd@E&g54s<(?i_@*q6*;0C%1U_Ws\Z.ou#Z(^^.f8^MC:2c),8Z$$`q:8ITVI,%g*MDCVs\m_jZnp+.[ln*2I2p4;P=TBRW%%IL(8Mu5JRm6,tP5qV%tYtGdB]:T`QOl2RkbY[mlcP'k^8EJ/B3n*pgVJF7<g`Z2<1mrSk-+-%_IP'@b*R.RDn&:p;$frBV!ntkk%B4ppq-:K;R-a7C^I$UuUD:P1];6?OXpcP9F_>(RlHUNuNLb!;kF&8Y:^R=l]J<jg<ecIX9480A)31ld#9.oan5j/:*9#0JB&74dA%<XM'!6[,s0PVlJ"=P_[WkbGFcAAB;d-F]J%7T=^7GF>roX]A`e(gE7<AU.3"Ah+m^e!>+V[Yl*E-YM2sfiA(D2Q=F8$Q/)q%kb:Y%@_s@]W\u`FkM\"=$0miI8YX7@Fm89-YrI8+9?::mA$Yra=(,Zr*9GJWSrod40DcVT%`do%gQ0*/n#4QP!);$N`cFfg/!NiN)P.JD%Vke8B1p")^Z&6N@EbNV=QTVX_<JcrLF)\?3:QbFNHpfZX%KJ7mos/NZ<Ve*N<R?uhbUYGNBYC8/B0,Q0Ve35DM[V@Te=eFP/1hUT%]'\027im?6:l;p2[(@_Y;o/_t^f+-W+YEgS`I@]1e\"G]**Fgc<BHL`1Sp?Z>gmd-57K9]AcJt6Hm#<>V"b-=2Ombb`F^sampDu%%$uJ1q[jiSs9a!;@5U9'IP,#Xo5Pb@sSm!QDnO&gWfDla^Rnr#^'$tq2Jb\oJ&67L3O8Wla@#>X!bV_D%BkeJpmZ!#\cipYk+Z$Mg%D2Gd,/MW`)F\hi)pRg.pZ.#p&FZJn]:t3AG%mPj5MGNA2Ci[MW#9-Y]7uRu9NTL"8:*[!QIhQ[Q?hr;+%'Zk?I%^3&*t7=IDUEmH%bRh<(%4I-6btmU5;mNBJhsoGW:G_^Kj=Pfk:q!fGh'D`4;Jqf4P(I]hFFu]6.'+^H`*!tc(>bo_J?AOl*9$#]UM`IJ_/VPAicd&\%r3MCf$*a9!r&-Eb-+6P^-[=H2#Gh-B<qp>uN!5]@.-3AJ$Gadc)&b'Xg:S]Lc+E3EdDd'l\T:0-20Lq*GR?ZT;2>J]\6*U"87m:`%6'=0U'7J]4!QDLg67QE`YJ,oprq8i?HBmmCdV%8@TaUji\fUZ$/@1Y/D+p8/1^ab0L9F!_3c1D'b&bl@'R+,XH![sS':ibmhdkQC%reW%[^Win^qjZDEIFBsP]+#!^(.oq(lV-8l(f)cI)hq3k+[jEE#apL,0J1KL4R>S02V/IE_arC\Od7!M!faoYA`4[\Y1tV<K%/G]%BX01*Kq:2NTK'j1E7n-gH#l0e4'3b>Ji9t5E5nJ<1RndJ2%7&>DFAUZm:`g/SU<@c=AV>"L.'46"2Q.4+gr4)[8gl;^?H@'Tm.`!%"+k&+3r(*Pe9ec!jdnBMp@8q(r#VaFh:6$ZSCs52\V8'70j!UO`U7M6HCjOg]\o^4iIt:MLqbVspAm<l6crr;c/Lc[]1^&0?a8M8%_>:%4d7g"S/1A;p#]t!sdW]s=S#;l:\WSqIOh$-@Lb]-aN!NC^#^RVLaeKq,5HY:@`/bo42qqR^r-9DmAO]u</"K<mZ4g3q"=B9R%F-%CjR43UUiUX)`:SbU*7L:OlG4?k\lkCMS,1[3g`_IH_\"Re*8EYKd'N/!Xa+8dB$2K`[6t4>V477&!=H?Qu`Ag8T`58aC=B7n:%dgf!dC5"/hb9;NsX-eDB@@j'KPX/SC6p7R,Tf=`98L48?k_n%g)VDf!f'bTiI7okF5g!EojO)p<:KZ`qAj9"orHPj,F2I+:49X)d%;,X(Nc:HO8'?S]3O!0@ib(iHu<bsp:]9T@lnfY#?o3=RC%nKf[rPs:>XtX&oqVK.nP2esKI&r+'@n=HWK=JD8g^l)RJLI1mI3=r"%G[(C]a_*+J:<1!%Y0$'49WpX="CsGB[[BJ*GDjmKKjJiAW'if=7*kV^gf*\8+L5q0dR9RH$9NU0c&P&Uh?2tMB+P*?4sNG4JKVn_%X6>S.:-dnPG9\)a:^X5fkFPsHG"c3D]Z\Sro?Q?$,"1,^*CWFaj0IH?2,/_"Et)DZeBX[(P&D;"e"O2-+IlEeRi;(?O>$bp/8rrt%7Xmj4=H[q&;PdJ!S#T^9Z1`f4PkV(mJX$K!DT)['R/79#fjrIXb1Xb[79ZNm*8MSEH6drT?'h7)g0BrC[h-WbbS.''LtnLYP7FrC%4:%2us!D2a,^5^gnloHtODBZnMDk.SOZ(b^G<5rcQ"BlrB`mN"0^@MB^0,,eIY!5!%\E?)fT1i4<m(7_q_re>Q*Ru&S;f1qI/*1?%cE=?M<r<K#A(l[.7LE3'R!r>PPFUYREdZ8@@eT:+"L;u]%l,NVLQ.cO`T]j.F+50d"$WHEmR/5b&TBDFmA+AZJEthm_F\&&4]_$U%n2JP96*:/Dq#OjG#NYRmRH#:c?'tsM6!eY$_*UgX/1&!T&&=.CWCj[*.M-uISOBisI'-,b0?($17=bWu(KufWJc]G(F<99n\PSBY%2-cIgBdIO]/;](d]rQTI'Zf8Xi6,Jqii"ibRp=tO2rHU?cql5(XY.-G8laIggLs`p0A8BqkFCESAFlNI5Eck(r+;(*WqA)>kB2.G%KVoa\W6*OW2ln>*R/D3J;OQ8I!SZHhDWa9L,YA]Ohu9dpgJ\Na@^7]KoN-Q\+;SBk?M2DFF;\/gOm_?UXF/]ddMD=VZuq]%9X9A$%ZA_Au?Hu.?jp2bCMkol4CURGu]E(@#]ToiTin9\gqYPL518@7V;s&SDa!aF_(L\3YUdF)EEq+&uN/'%%-6/T^IXU7o(-W7XpkGiX%;Q:U592uMnrL?Ut.R!/_UXEp!k+"4Nq<nj49OLlpSQV2*q-[GSJ2Dajofdm5=rh!SJ!R_eIFf1"b$$OF(?lTijW]J]90-IX^25FS%ES;F%='WVm:dYF:DhUdm,.8jg"%<%'s!Xi^42J02[2Ch3SU&Z"G\4n>?T`dnnl`B$.fD'r-8m%M!u/E^hglk08i&,c7Q:BXD9W!(%NtEfCJBLAYJ!cR>g.i]tIR22Ab`,AI>@s"L09G:aH4Z?\?:mdh8#Ua%Zqm(h[p8("2nj$SbU3:D;Pc^8T_C(C</Xc(#she$03.Zh%0f\D<@a\%t!/?o'VfN@d.SZgPK3cUY$h'mYW\]+D]F)M5YJPRab[65Fas8@I!N7^n5b6#%UurSk9uhhf@!f=:^n]a3+Unf$lg'/-%n(!hQl+H$L%/crRGp>PoKMrp.VP('_a=ts%SHWMtlA6-Z1tm\'dZVHB!/sd5bu(%kk7SoO8ENEuJCpb:I8fQ\cl.dRk\*p50P^nT%cVBU+<<>=6_Ta=-kEq'&B9Mg',-BRA/<)^92D`TF)@S+@c3a?L*`_kWSXiD=iBpMVcS<s&?&n7%5!Vf_"&43pGa5@#OPBM?+&76M%3"ffeElZGWnJHW-\e<se#m)AV<)Y2oRrhkNYkW/i@fR@d9bDKliLs&1Lf22@WUp=$A='9T,:ep_TITfR=)4a&9g2'rnf;neol^?f%0k5\Cajd6k+RRU,;9gSMDR&D\LB^1Y:?9ScUS;cA6lm6Hjd2Ek#!`sJ+ehj.]@r#A+rZ`pf4CQH)Q`R=U33cBqg4"ijZu?$28&..%MUngB[i[(<+GJiM7I)hJnQY6!*FV!!:g@q?]-urkN$F>WP5Ypq+S,9#U@gm(hC=d#?oc(k?XnkQ;>sD>H;hX4YloR.kq1[\;cstk%^g2ak$A]F0H'Mhg)GCb@'(^K'(%)"1/W7AhSQtNa"8eN'[RZD3D_JmEK`:Knmj3fk\?L3X?)BEL>P.8L:h*QPZf$uGJs2AnU^SN]%!0'k3YonFbIRB`/.HV!\,PJj*_c"CQ)g5.uPp$.7m%j+0aP]H"XZ6"$k!#3)jLN%@FT5Xbc[DS7i01jh@tGR&>@*B"T*)CbeJs0D%LP+9"D&Ul"f!f"UYu^)Rb;XY?AX*0Q7rH+`e*X)8i4a2g;2(R%btS=?e@U!5[7cS:^<!%M=X_`HdhfqUK<.6mfZc':45%Ns16im2%NOsal'_$0iO+Bj9@j5kf4mgps&BV5E^;BPtFrM$];&thU*+_(@XCM-44ZkL'8nm,!*;]a_i^IIG!@fsVNleo$)i63ob+#4#@@*\#%8b$`jQWVFaMYdV[E*1ZC\%D^m7pb@D*;$c1Lq#YbFkf\CRTuYOnW'$gF]d1b"hk^&?pkfLTLSPr*E@Nm3._mr_ljf^0GM'j3?,?0%(MKOG]b#HR=PB$i2/#,H*9=uS$H%djo4<X7L9jHYXUWiTBN1Kn;II@7BkC51'o'35A?"W`^:"cdU&uBWMqaZV!j[;#f)b]uBVlET%Z,u8s&r7'KVi]!k*`JuiB+3Y2^f^5,^(;<T\8_-pX74H$5h5rmLh7_F_BUN6<*Z`-X7L;P0H@%c(gOB7NGgMiclToLEQKn>g</jr%^M-X'?TDt8o'mD]6g78Bn=td0]@oh4TM*[R_Pn*,kAj<g1\DC$;"CMFYlN`BPZaI#&)jZ2<EeUQ^:Z1"EnO179a\\C8/=sd0*@<i%LGstA1DFI4hACcTL,4*bD+Q89iJdjNf@RYi<2TaOjRC0`$I?U/6`$C>J1`jRbnT\8*(+_<81lWt$8mBlq6V,[W#DJG13'D?5D,D9%hH7[-PM_D<)ZqAR$"=[<Kf&%;(+fq>&\c=`0;'MWdq#dEVI`\\'8dX7&c@p3]P<4nC@2phoKEtHBTDOKG3eC_6bn<HB8b9Eetj,Z%:rca@5igm\TsUQ("Y]N&A!@?YXO_h.%1F1Td`eRKa"njQkQL'GEpRTca`(+Jbe1t"<(iF%kNA3jc&lKAo*(Z&I%`%,-E:k0io/L^%Z;>./b>Di5'C\\l32Hh^kD$Q>c%H<M1>sCqBK.7j4D+/k4-.2%2Rd1K5L#A!_#mV-d5LlmQ`Mpq%3R=k"ZS>DLX_E3]NU'pZn0-@%EHbT\%jMKY)+e>;/j9n:":s5p"Yk(h(Z5Som@3;%(i#@nQ;q(\Fo-qf#f@46LcY3sg/&M,Fk,Pt>pbc>XZ76SX$\6,;agp1o54)3%H-.hkMrg?\ZV?<(B,S%Ci[C-$L)XihE63F._[94th!PDti5-pl)\?N,XEA;R(=K\]1rD'6(ipqMkdHin!1_c\@K3cKnY?YJAU37]%Z69?G(OgISBO<<f)ehAt7"NG+;8<mTAcbnQpc;&T]%%!\<E.,;WRT+hc"]UqrTAmuTjk-*b8P3\7C=2i*/F3@+!T1mZG$=h'WeL[%OlOq2YeF0:!b-S++OlWo4VE+-8%Qkb?e/;Rm#,!Mf\pjU-PQCheW9R2:MM=j7m!SRAP\E>a0C4b#?*,CdS1.f8lD5@b@h\mJE^?6%7`lm)2S;Tm2[jb-WC#`srQTIZDgP#G[_[k>R<IeNG4IC!"Up)YVl?)C72AP/P6Fui$<B?p9*59\c0&V3<g5cgam9fHX4tb]3E34`%,"ihm&F3m63ai\I*9C%]G7q02]"7(Bmm=-MC0NJA*_T#/:P7``hlpog&b_">eWT`i7CjQml-MfVC(Vr0/2'9)"HR'X>S#-g5k\2O%oVu+5%a(gI^"sZr(F4#I<i_R-7KBGhhn7X!@h_r+Sckl-&:-tk\lV<=TD;RtpRi<#0[6#=YDNY6%#FG]^rFt8#NZ?-H[d-:H<7p9%LeLu1PFpO00-G^1m[*3pUbS(EC90^Vp4_5mdp&M*K_7cFEi/@-W:lmJ7$9X]01$g<OHA:H2Ggp\3q_5<3D?n$3Oe(%f4c9oj=B8I%ote<EZ$B8uJft>88:U(GOGd<7*5?pi&)^7&Ktn>M:K:11X@%,D/,RtA2.EC:hs(IS>c2W)gYO+m?\lfH$ce3CdM9qpU0ki75@cK4%[Qeo!%E6TCAP+E9@`WUBr;ms)>Y3d^\e^M:T1jsUUIh@1N+)'NHfQs%l:E]fB<30-*HT(OD>*n3`_^j22aaAeLG@!l6^?IKOp35t%r0Gm@6IQ["ojj>\Nr?-S!jQ#o&A4/W[-In9j=lfN:3Jpl4i[.?Iuc%E"-O7<pq__R<Y</aVBQOFEq:`HJljZ;F`?j3f4E/N"!Y>A%MC%g[G*/OYQW42['k;`SEWIaYFa]=UYfN"%'FTjF2t-iA?;O2bi%9SI>4F`bauc\_\g$2%ZI#JsE@q\03S3Pt>r3^;@jL+(d-=R6%d6g=^WjCdCAhO)e%Mc)UkrCk2Zl6QZm$]OAK6!DH!YbA5G$SF2%&#:>kDuru4:,_%o8Nm)LQPV-0VM03Wt9#c-ifdEl4SFS.BO)`%l'F8*8*Hh<Q<',8_965hUU_AU1G,_P(OohuiSl#U/MYrRl$7hNg4,cfnX=T+7;h>n_qg3o1I=).]g.(<-u6Is$H=15)LrMi-[5f%%^oXp[,&Q_\$@-Erq[[ZUrQT0B93oGu7ohMMA6`<YYVII=W*^\AjR:NJI\1rc[P*6cd!1^5pm8dNgE?Y7&NK-S!!Fs.]G%sSiAd_q%D!X>ab_h-n&Z[.5,P(renj=IsE>f@!3#rXNl+>,Lj%FZS(3kGj-nHs3ds!/\=li.7e-\stY(rl*TF217.nfJX?o"!"HZtFf+Y3PY%_2bJXoqES!8Sr+f@?)j>[q/%jDl2S#kk`/2\I43RYZT"Z2Xq.>iE3NN'?t=1`e_SJal[>CaHAmJ9uL-6r*0I!NR&j,1M/d>+$X9O%fOChP(LX@iXaU;5mXqPgMHEDh`Y)Ii$oi>q1<5@XeFA>-@5Z$+KjXJXi7a#!hIA*#>a3K\!S6c5pJUn)bCmKhM7'?XT;Ru(Enplg%6Q0c!5p9b&KrLIk,a$k^rrnO9ahmei**VRRi^$8+-%AWr_.hJ85p[h!cuM*i@0+&lLS6a`+GpT8&53@i>"d"WHY@6&!SZ]J7Ucjg%%D@sWfI#YB5oL$fl9\@)&V$VJ]4KG^0Xl7J6ug;?r+PLA=tn`\910."PQ7;'a5srk#SEKQAC=[LCj(l+p!uH(p@@&?F\d>'/ceXA%H9)+sX(OQM2d12b$"$StGna=(6_`#/@nD`:!-^!:@(=Sm<Nn>/CkB`="9WLK+',e9,=?=ro;#pc!,1:+$8k&gP\up.2,JdQpg$0q%"$gTXl$&[&0XmGqZ5'qCoK:nFaGS:7TsjJt&*msQs-?Eaie=qjm&-TX_`V^n8=HL]q<Gu`:\9.r8WAbZb<:L<C^&3[gbX0h^^`-o%9TBj*\Xo9fkTp4S<qZp;;8Fe%P0`L*kT2PBftb4^r+X![7.tgZ2%G<>j*A2j1UqFoM9me]"CV!\6#PNecjc_5!]'T<KhO\*UY.JF%lk/352V3XplI2VbJXk?H'G'gVYL$c46EcJK*A6plNtc+]lGilQ(@0dIC41XVq47tFHIhq8OpCZ]R;)OpcO^/?d.a6*+dCNT^+\Q=%0o0=Geo*pu3*Xi1ol/5<6NFqcRpoZj-ph)T3#>It51DC,Lfq[k3G)0bLq8i8"fd`g'PS&5KH<MbH]<eaWdueMha8X+K/58)SEL_h%-u!455JWtT?"cl'KNAHu<`*tAQeQVPE7G?T?LTGO:,Ne1=+9Z[hh[!GbPq"P&1k$`iK<(BB6lOH4]:o*Nsn2#:""u1UcHA]P1`j`%+MKtD%b]4.V2GXQ!#U:rNYo8[g$>184^\OLg@?6$?mIB6:Ec)0h&K=0gd"B.^,rLqi)A-%:p6UZ*.S*9i`lam^2=VK)-],jJigq<%Fb#<Z\2h.7Jk1Wo*rFoU@;N*%=Jc(@jI>?EpuT^E@kf?!'76d04?TnRD4][JTbfDL*Yqm_8r.^oA<$E9m;n5?RDC):?bfV+684Oc%,EO(g^Db"UQ:a:k1/-]YMYATG.__CB\H,3;pN$;\aF;rAndn2-)>_<&';koOA^VXA/2@d*Q79%dLfLfSdSqI+liK(Tq-"5=Aa"^;%7,AM)@S"]nU/`1`,?='M4iG?B<lpC%,)fCHCah,p@_C2hreE7>9,2e&RK>EF;F+o,1M09EZV^-nk.?qm<S)5qU*j*L/pNmhL..V,%(6#=mQ:d?pi=1lg7of$PR-O7Hr4GpuH`1WD)T-T-6fi?XY"&L@MrM8%+sBu74qR(o:/s3Ql<ODL\^cY^>sF#sWHjeO6W/Ngb!KL$%9fX)>\I!0#+'7Y5J436+F^t6mC^Dp!=gC[].3Oq_iV%qYK2)6`&#Z3J84:'F>UVNlV$a+d#bWNUc4#X`oh#UM)7!4m2S]<A)rQ``%>'$aA/2IR]0qAL;OO#%\1!m5Q(1mIGXK_[jbVWtaiHA(j$OjH781<fSL+/KSS'2Va^oHA]`5N8;6X/H1;gV1c*@Q[gfRYBH)"YMJ%b3FgW$^X+.(XU5I6hWNpRfWWsC^*P!QefAa7VI@7fa7][:BF0VRacokLtR\3dJ"LGnH`[tr;nKI8(9n!=8fTOk968l/i^D8I\+4Y%!Z:5WfmD5Egu;MhWfiTXZ$[?;Qg+kIi$C6\Qg2^jYWjcW[77R?1dn'F;oLGYF\1<W*`Ed[-,F3`C&haDEL#]`4i3nUM36pGM"QFh%N5._hLsDrr)^G_3CNFRSnPF7S-WcGHi[prgB32$*]%ZVJ=WW+VPeHDG(`I[I"ft6P/1H:RMGp8q#Q52aLG15eYGqqi.S/Z16Ndrl%#EW7We9\9!cS8]/mY6G6i%\)O45-DkLRHgHPaB=?VR=:oK1u:]?nRF6'"$_;cRf'u)L7pFaF]@Ce/FlV7Iqj-2SK65eQD#pc11j;%67>I5#`+U;]ZB(6`W"X`#SKDYmS-]4SOJ!iCmHROPlMbdh)U!l!Cu<5VG$$A=&C<^Blaq6`O^Tb?ti!C8$'da<<SHTTp!Sof$!d"%nH#$BK%o+adnFVX#G;'g+3>))cb'TLPPJ"6g-<-\U$&3_9?B=4T23`jEF'#SFjr'R,"C1aDJhc(T(*gqOo!UN;26+FHDZo802Tfj%EF!PKGiTViG"_`KZJ:4:q*`qL."FGq'PTpN0B5_GWlgRA3(0KAQ"i>fZ.<gkYIRquQ>:$pMm:'4UX0N#&dM7)$aYqd@oS-<AKbIo%WPBtXKcrf?X+re8Qj=`!/q=+1!,u)WKM\(4b3Llc25d<d;2QV!o#&<1n&[h3QL7p+`P.R3bb>8$qeLri[]CQ14i`aWG?)t3*^f$#%!`Vq%,jk]7a&Kgo:j;cL8l?,n'q1?;qVbAq#C)poO"P=)@Y5LPd)J1,4Hho`gbgui39O=)EnUMP3L!h$>nh_`+VEAmgRFAFPA$<p%@/@kNbYY<#&9UenG/R#<()7`!53C)2g%%Q??NJTu9e'/ZaTcqOknsKm]E9d]>c8!NmUiR^LAQgD,45K5+#W3D(og1!.b:eu(**CP%gMd/Y$\L$:dkM<cM?G^&[u,`Y!6l3aml?+*7p`]>mMnJHnr%aBR9dIl>LKN>*7ch&`cd(^?VX>M@:brCWNQAr;u-[]`g:/$TWZ-m%Hq#`a+Vk7dhdW)68'1P2W;7J`_j7'22ZUcbEKRud"aC[A"R\!5RN;SsE8\s[AAp3uik(tTPrHTVE=qYkFpp>p0+d]E%lC1*]9]=,%S6<25ED$MrVe:qdBr4-R]C>7bi`k`Kh"Ce+]ra%\aN7KXjif(I.A<brG=:^Ea/ZS?ZRYak"iT<#[4Kt,=]%S+<]2J;/^n`OQqCWO%V^3T2Ak-,]%c/Q&.<"Pa.2[cuF]HnZZ(rraYSMhj1HM>&A8/,2D8;RQGVg]@;S;/!WEqN3%3IlC!O%%@eW(0PR/tB^?>ulZEBs[#%>e]8#:CRH3ju#Nb)=31PEFldl0k>6H.Bs&fMnp%(KLhj@<b2SW['B4.ni<:"c:H&UQu3;nZ&cC!pTQH.Tb0lul`)KVjtp'j>:!5Z%[T=.=</7N4:KQNoHF]r51R]+@+$d`95I%t?->N,T+a0=aBgeYS/@aq_$PnQ2FFl!?cDiJ@&8d#97+A<f5jPsT5=P/<bu>"Br%QlA%'q+T=8nFY^P*abpU<.#5>IY2ud_O8!P`CQsB_8dY<2O*7:Foh)M@Q,&2]&$?,QV[+F7s%'1MnX:7*.>JJA1<t`Yj,C.5M#_[-8fs%LB?a7d/n&iel$o]+H4TrdZsKpZt6^W&PcQaQF"4o:`>*j5b'<Gq5/5EW487Z&5MgK\O&Jog2D&/VS%4"0^p!!6JL3HUM79!1D\6\%YMBg-JL`83!@PD\B`>G1:iU8MJW)K%SpD7j)9Q-X3sigs]PIEjGO[Ah\pD,kl7[4FFUWO1fV-d%dA=%u<P7P&WC+Yqc1d%OXBN>)%UB4@Vpe9I82&/pJK67@t]LA5h`GeOI]#J.82+^]>:"DKs;i8mD.5&'Qdfa1H['=J.1*i4:SQlDgkVp6mY:B#ii5"I4R!MfV"i>@B%DN6+!9YpMKdDRg`7j1;XEZ,3;g+C9&[$ffaALOq;''DsF`SZHkdT4MZ7!3=sQ$h:a`0;(kIlOtJ/_((('/$;MK!JN)\qmrIb,^Uq%M<59K.($LTOB`E>_i(SA67[8c4].(c_bo?LeW&lb<_sG5WDgYPXiqHe6"YQ"<p75Q'%'-^<n6M0#rf(pd&tr0@m24?BtQ=6=jX$Z%S4%_!9a/#+.p=q:M_"8..MqA9RL;CWP[HT*RCJ\"UA:[rSOO?2(n$X8\Bnb70q)BI;]["\r8(G$D3icX!OCEjLuR-P?KCBI)Ja+A%h@]Kt$fX#$^.Jj(mC)q[#UQe%G1IP=WpW!ES%%W>kXCjgG:uONH?H=t2gJ1)TKWVM];Q*2ME6;+aL:;oi-fh*,_WD&h.Nc=<Nb#0%O.,&B:eK3mMVM$V:DOF.gs+)Y5'`Li#V2V[1.k8$kO8L2#g;Pb.EkA5g6>q+2%Ge[@*,ao+\\:P]AuRp#$D]KaABEhqqkDu*GLnn%Rd6Jsh;r?`Q5[Rc%PY:?8muRJ-+A%h4*,"G7L$Ik"e=;jZpcNSYl.chkM):Ek5c36U%"8SQ.46q&koTFe<d6f_USp@pFbu)/SEiu%Pg#u]D=/stGRr0VT3DdTlN<ku#OCl.It:(sYoh\gb/fa<B=G3@8#0T+1,RZ9e[r>Dn2iY\W?@0/"VIC"CFCQh0</1cO<=0r(#V?b%[]8jbQH!Vtq,Sq")G&0e0l6LQiiA?@g[qr-.ufI!P@uG"RT^@kVrWJT'/OI60:%]tPS="SQmXD&n,'J@OP(jqVr***lBO0fOk\Yn%d>Ye0AA0V%)^Sl@D2!.2+E!(d6=a!GM<+`j7Zt`T$kmNp)_hftY0S:br-7a^!GiKSXZfIJ9DH6\EmhqgL1q*nBItNoTM;bQ<l"8H%dVMC/UZhi%OY1Ki:R_tkM5u2iXdgiIWQ,#UbOcNrZ;<Tk$#?L%g>A,"mcjtuR;Nb\i-cr@7uB:-Tn,a/V-34)LeCQ)iUi'd7FZ;j%><Q-TBT&/iU?-\?Pq#5!qGC?inJI#]7]87%R>SI3XS?&uI'o1gRHRrdD#_qbfuInX"3Jf@N\Bte0RNElo'!/X50)"ck#J)$5]><I%gJ69?*O9$3VKqKqP/$kSmIEc'hfGN.HgdhT+H>9>j5=.d4/W0_YX/]O!Q"W.1k5)U4J_(<bBd4nW[/BsF;2[!>d[Vm>Wr,q%Tk??%EB][mP*5S)>!XT@$b'!Tg:ZsV,hFY3Mc^TpD#fK7j-$AA;_/[t21mb%VA)Z(C%[qkmJt<HH]n:hJ4+Rfs1QIsdWLLrA.QH]3DV\t%g_RXR7oqE_O*c&4Hu]$oo$RUs&uU/@"QFFNX@t;1D-$mb*a]CX4742q&Pg</^T6W*Fd3#)/7uVO%-<7Y3@_KJ&D'I.2OAh[=D3m*%%`qk5!Ca$lO$*:CGg`2V4_BVoFS9_k^ufH:D!4-K=TIihq/3"o^8XGEg,t.Llh:r_l=`i"g5YUY?/Uu\@KIrFa-8^;mAbK`!BeIW%<2H&*3-"M5YO[O;e'1$N>n38$VMt9?i,,`ng%;_NYt_YVJaQE1P@5T$#=[HCF^5"$#YqX,&&@-u''28g8080=`PP.jkHEt6\ggUH%_h`'U<GSi^JSJ:h,3<Iq1bB,),uRjUp&NN#)WQD,O)6ncPP*BWAb[647J&]3=dkpbI[$_C$9OrQO<AIV+_jFp'c--*BoWMJjbK^B%"HIk<8TL@(]2F/U>&-B>;EGs5UbO+"pP8sJY!c1)3G)GQQeS@6(pP:1=_[teWRtM,D_jl`iTY)EYZb^7U_3YZ.cdk!qUqMk[\&G$%F+oJP&VVnLj8qu^A3!Tu9ip''$E)5><\3P:#Op>p1M'D&1uq0j!PkH/%j`5uE@\]Pj@]59.fM_uL&8(S`%28!G8t+Z.6ke*<243#%2iH2UUtP*.#@49@d>$;Neoc/@S,gJpA>Jr>K/C=0?X=A$\j.`GY;m._0Q7a:C:MRZ`W:&#K7@H'VZLJASN,]3hqPIP!$JZT+Dd[G%N<9#mNPt(AJB8FpBBHQ)Q(?uQUSgnLm"D84/mjFS`YY@_`sYmm7mZ"mAn]mqK(gYeU5_2((_nS*mmi/3g(E$]:-e0#@YOmRdD+p?%;.[$X.(-oK%Q`rRq%5m;!ZF0'(ec_9GXK?#,XY2UFUFFDl@14R/`L0$a>H:NRJT^WJ*\2\VCf+1O=QgK7nq)KoTf._8h4q,-7(>J%W(DR(KmFVu<FKm6!-f,tT'e>V?N==JY7j/UDi%[XdeD=7KWT>nr5c+(90A?NG=-_77#)>q\`:I)'8dsr`sKj-@Iu;EIV;tBA6C3&%TM6<`%"!Y:M!/\0BuS5e&OK+tSO$st3Ef;!Hp*Tf!k\s;Id]".q#3f'C=DI%\@WbD>\^MmAgn<(po:[Us,?sX#ld,1%:<N3\;ZLn%WF.1tXE)>reJ3g/SsV\b@%uj^0+o6Y;b[[Dpd#X5lD9u]m0t1CHqe>^E=B1n!>Gd3#Y:h#]FY6@L.4"87_HMJ-1V-qOgchXO:5o6%T*JbBh<p`G44.7dPIJZu$l1SgJFkk7']#@/m$*U:>Fki8)YZMkR&-NPFOW[tVE(-"5g_!3*P(6X0??Uree9CGf=$;#@R*k#V"G_6%V(ck<q>ofM(.15-AsctdNN->p,'I2\=[([D5i(r;P$;obE>@ap@6,,nG:aM`aeDmS=.KFgQ))_+2bWA[35X0A$pFEeBu!q47o<Eg%@#R6E>Jj8ji#L]>l'?^CJK0<[6e=Q'2nceOQ:-H\6r%?8`\moK?'c<OB\#^7LLQ!i/k%B0-9WcaKeZr%443.R0?Po]5h9P8QT:-1%E4Qo2&Waj@NMTY$N6[OR+RL>lD\gg;BeN"cd/$3R.[n3$+M1P)("6fgkFHI`FZkd]>C#0<_IX$j`DVj)2/V""_^[^Ucf(X7@En]f%RH@cA;L+ieM2%s(JbC!Q-VS?.i(Xe$Q,s$U'uBGRlr7QMYl#8]9?82hQ>ImA$!&\LJ>ro;FSA?IL\7=Uc^Bs-WX@FB0=2M&1$F])%Se<iVecR>"C6H#:Lriesl:pe165kKp6&'oqR@qA7ATeoE]1D]ae\-\h:=V)['t<+JN"Hr'/PD^)*72PBH%lCI#.k[gA=*?F$B$);%%J>haESlLM21F<$&r#aSQJ1-qS81Z5:`P\3HPd``BT'$IYd79o.!%YL.7;s.-Tk2J9&\P'o/qk\(#EfX3I.)2am9E91H#4!e1#KT%'7k4m$&:qiag_V>$,qYab+W?p+f4T,8_RT%JY'g4_<b"@]:r#8M92EM0fKYR\H>+NCenZ_DJn;\WEo0`:upOe.`eS4d6YY:UAQlZ%(m8g!DX'8_.#%U"Kshe*g*:Zb%8B8TE++ahh^/HT@:ZRmo^L+C3^9MCPZe$8+NO;>JK+J27N:lt`I(>kIZ,OD6<SSt=c(Yh)_NFg%ji[t@cu._/&7QiYJKeM?$9<*_=MoGf/0E$b#giW!'?8<3*:"DSEicqcRD&Zi8PsS_[1hIdh@Q69OmK#07q5Srj2#m>>i=[D]hmK*%7D\cd7<eqAKlcJt;e9rWJTC+gFY.@XXl7<X9B?78'B0*k6a+ULVSRt7F#0lT!)b5grX-Y"qRkK.CUSlPYB/`gk#W26$Y2qKs"Jp6%X6J1?]iq)3.Yj30I4XGa9_6Uus7W#4=e_W.U"Gbg4t3U^#SS"f;,[Aq5s(:pVqsi?p.fprh6[a"ciC2DPGle?$*)c)6&tI;81`[$%_1TZ&c.W^,(A.M5RJ*P"H:orNT_$0NOB*RT?DXLNMDU@'j2;;Qkl0*E,].Nu<\hiL;K_-EmS,OI+-Eq4mJHBf8bH[M$FpA!p'j(j%("/ITDdJR6nGk:uNO_u`6.0m]Upm1CEnWMU>:@-(PGpm4Wud-hP)qI4j$duZifIiUM%;Q,0UDDFCeq1Dnjj#$F1_q=@m%]s;rO0L%rr#46"$*_C!$i`g5h[HK`oT?^SRb5jCS%'`$3bsETR\W=O>PDEZ;QR]3g]@:<rhH#N-H@s4Jl&l$)Oj8_,Gt;:f<K=^lWBj%Ed3<%)AC?<;>LtA8"-,(V2#tg3tN5:"d/sYEJ-Wqk876(\t/EmbdHD$L7DCGLMD0Nn^L-ARPDkl3M+0j6J>a_KUgKs[Q\f(!/*A@TnmiB%)O\>nPcYpZ@$]Rt>M;s`Q!jI`]/ITB!E?27dWZA?P/%(-Glk4u/&jnF>GX(VSl8Ud.N'*(2=!;61O]=h4+/9*_g%='"^jrlM)#J2%-C*p:VPB+m%9P'(Q*WOG$oH';-4-uIKW^Jt7>`@GXqfP9p`o*HH05179b>i/Nko<MgMk-tY-)NY+51qQ5K#]7%Z,p(>uVH;`7Ri.%S(_FnbrGbWUB&P[N6%/^.81FS$[Z!-+P>W&iFbJL0nbju.<8'#:Udt"aZS`OF,-pH[#9"cXmO1\0d)#\HH+8c9=n$332&0\-"?_?%`o*hBEu"Y:,hT!4_>2Pfp=0g"A"!/>#ZGb5Ntck)#-sK5aIA:5h#&A@9I%?RB\g:U0W9Vb1dic8TN&B#`dBXOg'YH<>>m!HR6bN'%<*BL;-r"i?EDPaTGb9+HBF]%Zrb4Ic*`+L6XDrS7*@@(55gU%SVE/02@Yaga[W_/g[L&m'dAJFWEiXTNSJ9ZEf/gGWemoV]MklbQ%1lG_6b;M@rlUol&8_PT0XJp@r"qHf-#u_D0CR">q(g`J=,t4*@=]:s2"Z+%E]VHA[Jm#iQ;KsWM@.`^daPAs%9+YNeBAsash.r'J%ZD_E.G1D+lTN8HqE[;m("HS5V:AY'fZNP7Z69,fuHL2Q,Z9$HX^lHrp?6D*"%b1-]_*r#=,8,gg0imLIie`(_*(WB"g0+Rn\i@pA%"#).h+`\^IaUCq@TVbTVac$I_`1<_h8.KsR93dB3-,HL=o5a*Q&$Y%*"6!Iqcg7ki#NsBNjLDe>a?=.8IMO@Nn7U>f7$'btj!H0V%4,BVO-ago^TX=.kWq<F#gS1s^S1;?4]9]S?hSP#C])%@TkPDR7Y[)&jT,!ie.C'JM!'-O7PrjE/<U;@#f(+`^`3%HX1B8%'L,Wt(%QAAUe!4d!6lAXZ!Q-F-\>!fo0#V/-]8[qBh12'D]+f6X.V9k]6W?G(>M&*h(jFWE6KNg35l"+O%d)9D?S+kXZ1+-?bP`?`rXSZjX%9/^-f>)l-f.HkW,J?EdehXFQhhbZ&P@W])X9bhfjSotJop'YkPEC[c#-b(n)Mo::!V",bo\.UU@a-^&oi;W+rVRfmp"/^<QmQn1M%U8gKoc*BT*!.CdMF;/;+\!S]Shgr;2cLqQuWWUTf'(>?NA=6sth&QhVR1Z;=+hUo.oE-@3P0",/HV@Y(<WDR4?tISo@Mr^fiPhbM%KIKUhj44L9)1W_-S>_EM=.7NqM-8;aIBXFf6S[;&QmH('*+^js2PkGZSd%6C<#FO!0uFDsF*J`V^LAlCi4^VE8f3XE>.EeQ@hc!F%;!bn=c^qMNE0RSY1*@50BW%m`<,f8+)%BV?7M[YaLkF'?W'OBmdbe,5V0r"+d6_gME7P:LU.f5k!pR1V0S;&P,Y<@-9.>N16R3Rf%Uj7p-T3Q*.J2PIQljF]'6VQCWFW71&gC,3!b?FXO?HckT\P\."A?rQ`<@<3ljC?lr4J%Xg5<um=G%og'[YuA+Di.A*6C=hf#fQI?%Hjeh7E4%>qA_5C^IN\JOU&F%PT#sNrA'^E3gd=2K/9p"=-O"[u]X>%0!)(c(,R&\,=PW+q9EPH'`g1OJB8>7Pe_!S_Ru2EpL,Be:%=W!GchZYA:24)f<6trtZ%2/"QYu*`jD*.;'<gRsD9XRXTXFcW?I;Q2?fLZ+*APa*J]#Tm;a,?%=r;a60qrJr2QZj3OoW<!G"Aspg%W?>$]-4="UAulOX6IYiP("I$F^)_+onj4-@MGQ(:@]4:5L:D5[:!QRPPsaRBOmK2RU^$rm?k6&[+pnPYW3i,<VKkuGRtDZ2NaB(!%;*r*r1(Yr>*^H_t_]6l[7L?#\1`6I8MDJB(96Guh;BO0b5Rk#6%1o\L<<^C\$T"F_@qj361":POk!:B1$Khq^XY[l=7(+OE-#0Z)%HG]/r!>e\E&?8^.TG--$gi"FOM;&tTFMji,+8ru[?"BocF^A3F,VG+I*atZ@<.1[6OelQN"H']dT_!1s>O:Dh.!E5qgJ"8lN`)Y_%n9,D(Sul?bTj,r,cS8jOdQgpp"6<l+JWZZHr\bc^AHkJ!AJ]ZNY78D]G1K7?N$0+1S"@2p'J,a#kIT[bMP<_ZE^=\-[&+.oW3D;!%Vf2k`.5B5Q%7Qs:ZI"?i:_Jc(r`*JkWe(]I?SV=Qh+OX2esG_)98VRH6A?%fR?S.:j*!tWO*/"e\q''bal*rSUf]g8"Af#T3<h@<%oZ.".rKg(+_qsX=oZ."*J,PH.q1&FJs7q0D!WL7Anc/OU5:HL#s8INJ3@,kH_usXprujf/29M[ejern1dHSkpGQ;S+nr`CDU/Cje%>ab1KLb$f^"Mtu?e/d1Nf2>P<mpV.0/kpHrh.0Pb8&^_$HtA.sU65MSfTs^Q.dM^9&AN?A\_)a\E<13K#%:UN5]^35V<kl\(U<L]%,R`R7'rlX8LBtA!?9i^>`odmgpBXI_#-1D2%+RBK#p;QFT:EA'2n,PC:(R4=]t*n4*$[=N<biT?!OuJk)u)Zj.bq$=6,E8g=!5Il%bGn3ECK;1XY^jc['8.)N#3B779t#Foc.pZ=5$Jc/g8E3jQb#,KSp\h,*CMY`G>pCTT\c6=I?(:()aj/!1DHBmWihdppIbt=^STH0%eqHY7G4dQnbo_IWp^2dR@NKMs>mHTnWhdPAo+#gQ6DnJ:[)i0nMeOZkY\`bQ[=-i=L.'\q2>&XZdSs0m3h7T#Ti?G><ga"Vq%S(0%*0Vg(J?$c]bFb2).`$8Y>kf8b@bDPG#%ZuF\-d&<G`(lGlHP<&qD0G7M?GW3AAfZ/!(?&8U$Q)rQ)ZYkM^<t%n);f"<fRH.i4@(8%UWir1Vl^KoK5do7QfWnk!qh;ZWtbj^eXZ&JbLF,a1J88lOD)fe;U-AMC_b.Fo)X&V_.)[W8C(EIA/\N>Ql]5uq6W#QG(#D'f"e)%%7&^[sC2!8c4O>Y-6F2i'ZRSEqMbN6b?GBMH3K#%&jaXle?;$\0#N.UAf6r]Wh)/etcp5/Be'W:NAUm'j=,dGO7EVTO4aj#,\W9/8%li,qCGD!VhAA^p_Rfg7)cS9NCn1+'%Qmg8WWPb,Q6feB\akoWN92a$\Ot76nk5ZJ6.Rs7S;ltVSN/?:a4.F3<&4u6P?'K.H$jEW!%3gfe<a[/RZ*$6Q>P&o.N!!MC[!6jil<+$.'!Q5cO5bpdYd8::*^7;CRI5d;;?oR1o9Wd,8Uh;:m<:=jGHWlKlcE,SJS#DXlXsqJV%Q7cGmmZQ/Wjcl+Yje,eA'fAi>6t/#JRq1eq1,knXS>*'GN!#_V8"T9=4GeW%6BmOGEnCu>f,-cY:hR)jPq+`)a3aH'cm347?pk1L%%n-/AZd^o$QX%Ud5c<opW$!X/0=rdBErSG;kSefjs*fO#7#VB1C6YK8*0VgZ\XeL4T\D!"oUo]oe2I-OPcU+:c;V*$El5krX@_,+%jEjbXQ1O;Ai34]kk(+B%VFl;[i<83l@WH@QLF9lGPI>6UkSS7]=kI/<E0N:Wg^&S!)-%S'$+lUgR]!M\V;B?HZQ.-#5t36!$K2si%M&.E2kEogD9,>[I5?(4D"A[?hI+a<,WL09?')L]90`_>=p+Vg$?daVh2qbrN$\LSQE3bT9_Oam;WYGjp%OHV4U0e\"K_OI-$`n!b%jj`#6V[*J?A?>1Ql#rTRp/4\Q`l4QKMS#S3='F55\*+[cP@:4TR6TARCchB2.)2-&G%n?^2/%B$Ottrdq`$@L;VgYYN;!P5/4<s`%"#*mDh,%oL%&3_H`Ak7U+o1F(qB[^:pR")8bIUh0E2TE8+350[P]";].(TPhb!Y4Y!:2`&jlmWTISs6-bU8bA);kA$jj/J7QB"2M%CcOVRf\H''LsCC@fd1?);&9R*A#G6K=koZP)p(2).A:L)A@<I\"Ao#J3s[@b'2\D\"448%Vb5)/!0hr_Y23.\B_TSQ:pG<oUjaIa%HBtoG227KMkt7NJBR[+p5KC,J%cW?u3H=[<Qa[#GYY4N=ZLtb>OGZ!AI(b!p/2/%]H#\mM5PAC0Z4S@E5H=Ej)UoR*ar=tWW?K2=%f9WY0MuH7".&sN6VD,3?Pc:eAf#smGP$:/NPWjV=_(KhO<F!H8Ck5IRC4*M+9.'=Y9_/2717D*G-.'rAk?\O"-:tbM;`eGW2huM2%FX*"`a`IP5cng..XVG0d$>V9T)h><@ijq1jY#NtmJs/F*["^Kq9Be5m7A6BUe>V_s%CB9Ho_g&G)urc4"]h.X\<Y_s5=7iApDp(s%*e[D[K5=3-j2-VPDe0s:I$.iE9-ja"ej^h[,tUtf>Z`oBU#W::=W#eE3!)YD?;=55PJ[`5Xo]PZSAClAF+d8gUnkP4U%eItZ-5M:%;`DhSa&7%D4qu5$W<.A3iku;pF=h@^Dou^_Y.mm`!']ekJAhXkJ@@]+)LE$#@(J&"/N7W<^&r8a;Cog$A78nb't"ikW+R!&a11=L%-At%LWr.Gt-PbBo=!.P+ZmF5Pg-o&l`2V1L@MYkjF/W!gZH%gpG<2P4\EqA**,+Ng1nn8kC3cBnr:fNcFbSE2OBtcu,>5#\;KJa1%D(q7_]LOXnS@0i?8li^e/_/el\!(_#pM$>""=qgYYojdcj_I(tS3a9>pPA(!Lf(r>Sg`@HOqM2J1F$AL-FG6f&,^t64_q*9Wi+gI%j1OVlWG@pRA^QBJQ.d.g1<L9%Jskf"cJ-pEU*6u;'UpE3Liffpl#m4R/-INIa`0fc$[j!LbjtJE5]$Wf>GC*]T^F9HH/rD4\rI$i%aBqJpD(.qA[?`Jo=\?4)IuUJ&mkM5uKFM:/P5O:<(a<7FiS#O+L#n@O&?2*t>9Xq9o8%T[&nt8+o`;"'6)+9?-HiB;YOVZ^p"3VB%)'`8jK=jM<@]^Kj$<4?eip,m5Y*ZchGXdN)euHY5Ub/bM4i^[VUYK2+3YWb_XMD=+G"Y\T`Rb]t&dV3<jK3`aCa2eiMu@nS*,Sl5%cOh]^`AUcOVd76uHP#V"/Qtr""Z*F/ctX.lcUiR,>2cGYeq8VjRb/=h`ZoPE[l(:Sbq`5qj@X]O>UJ%+fTP?,M803q&&i*3iYXoN%<(5.M+QH<#,2"lK[Aj5'-M*Y<W\5Wco+^d+#'AI8X]7$I6.<hp86/#UMR7:NQ+/B#Mf.T,<HR))iurhoSK^)h#7/^t$P@G-#%ojE%M^dUobD3RA=A05ec^$`-a\u/A0oa+#4(_'M-e)&)>;+B,L/'b((TR"8bk:)3FN_LhU4sQ0P3(S&eRWJr=7YECCP2ken[E(=N6K-#%XbmLN@5sEL9Ci0K^9sL#p4d-YB>8:5$`,`<,J8c3%,0GUUiJ[**D]m=$Jn1F#%c8>3h,V5/!bBBZF3l[Km$!cg1$&_cJV/[on]9O%YSgPJ9V,jMT>o0^lK$Wl"(BK^aqum3ZpY>]cP1hn<R_BS$\]?A?[2n&'IN7(b-kFSlXM@m>47HCl.`@\7UAOq_t]^W]*BW)4of:Z%ld%8W9<6ibe5gHkqiOgFNf2Xk&h^B@LA"oJqf`9Z3>7.=!%(DAak@kT'oi2S1e_J:;2I)]FfBG\@ELPAgV/knb$W"!2ZL.pKn[Pk%BTHR_QqXY1@@#77;['4<g_0+HRhcubH\-o+@KfnlcA^D+Y+WQ>`r;S4ppF/i+"HB4CA/<7-(N>O>uuuM%"16`$ZOE#&VEgtB97I\%&/0*G6KrEPltksC$COMZ[6b3:0dM;Z3=)51843'eja1MkZsC&mZc(<h!Hbk@.isnnOQ;2P\k*+!Gg5+^>!d)s+]$ZM#J`Gd/t?G6%0<u@3N6t*05uM?eL:Xr[J+SL87_pMI<QuWo:IPBH)]_g7<lHZ%D6en,R7?D,T.9f]8k5:AZ/5M)&KJ@]:Q?<sbk_0Xg0CLd4XJFt%FtPga`t@ZTIe[0a%I`UsQbI!>>QeELq,GJSMU!m:D;k\`B0(N,eX81m;#Ka\kO(KbT4,96n=X%B:un]l4d[EnBmZ&DNMPuT-oSE[%G-NnKB'cdU.K#[5?)0s3f+A;3(JW>j$MSjVdPA0)ko.amQ&#h1W[3@])^#S1WAQ)Lfmh_j_5c&&a99s.15Agt;7UbP@)_8+\A(Tr%PQ_^k'#<n=%]&+a<-tWO>uQ_<KN6!H=S?'Z=qq@(U^#IT(80eM+LG:pSo&,&6pM]h,(oF[RGM[;8CTKl2TTej*Da%J+Pak#pm8rJ%a`i8K02hr*KO:F2S&FJfM=@[R+@I?ggKfp4f4MlsQU2(j&L0klPM@AU(;*SkY%/K#TnmDP)e[5VG)r:?,hiuD_k)%Z<%!)8XE-V7%<(U;+D`.oS!tj4]aXY"iPu"H-a+<*#Wu0#%CYIBJ*It[l;'dP)@-peS(fu7$%@8WS"0(Rl^f>a4l/&-Jd0f('T1'&\0(<D/J5q'P%4kMq/;RP5`GQ\m,E"GN](Se;qh'Wq`J8g#-pBSMQ0bh,#3?g>0YVc$JbuKs+pE%.MI^\2aLikMVaGJ'c.*3Q72CZopWljJJ9kLPY%i%UGgIbJ$Z+Ns6oTf!KZL3XP`*:Q5ind^:<hDAo\:IVq;$Gg+tg<tbb6mdG\pL2;[bk8'"1L7X-Ul\L:(SR"8/?GXt%/QH>0=OZj%$=cR"#RXkANM%3DY$57#Z(Gd$\2,nG\a*a2<ST*h1bA;h648Bh93'>7S"!'qhK+?DK/?OBH7>2Pcap"'3#0]RIDJX_<TJnQOT'*8%Q"*#!@`Wf+i$p]1N@O;cX@/PiCmN\c8(>)g).Cs)m(1S>rWtSh&gCMugMA,uOdlIl$(QQWZ3oY*[hP`8S)sg2a58-&]1khb<@nus%9C]?p>GtK^Zp?^OZMS0h"$f9N"^DT"6"Z5_S7ie;V5d4lm)JaBT2,Mml:n?<,oR/f!hM<0CHbB6*>6q-[7p@HKBM7l`$oQ4<SS91%7;ge(Rg)3hPVN7>>3^9"<4TK%'/l#:@cZbo]Lm*<>=PAm*;>O<(K%K&bmWUp&iU&aOP[Y\!*>*h'id;F7u:\9Mf/P?*`2dX-_MsQ%$ad-P%n&kqoicLo.a_*F`bnGNQ-k_@KVgre4cNB2LVIke"1^%21=8;/!91\tS7L4FK$U3,a)Iu7Jodn``LdZ%4#6,r0U%.&bDc1i%]!)E9A4EHB4_C]pHZIq4m%jR+9>q\1(1$aM'Y)3WeqGPuJ<]*n3q;/:;mk.s7%[+h8X^_$PuG80f,TV"$hX3SR_UA4h\!1BLLC=a%\5K6Q4DK+'69O0,6;b+I\kYf-AUnNXB:=rjqA*@,<!i%oH%I^@lTF8l`c80Jgsp.3jp=5U\>`O0C5`XX,L]QU55\%LjC9:#*<B+K%B/0Zs,'5)-#aog]g-ajDNp7Q5h5hiL&:0/PW>ZodV:%ZFD_LLRnta-])04@BQBiTmT'pP7bQBTsQeVbTDZHc(W!HZk9f7L]+cA5_%r9`4(2QWpg,,Y_$&tH2:#[h8"jX>r$:"Q&iiUEWCZ,FtGih<=A4QcqlT3E?&SM0U1'\(^#WeSm9M&Tns#iFDRb)YYNP"ksVjTS3l%E5V!1@k%):&;;X\Rq\eS,di.4+K?<I1=%])P9W>HdNrHWrUb2&<E5Mu7rQ7Z<f]+RkGfkME]&ULDmhLTegrs5bFER2Ip`Phg+Uku%6oHUgAn-GQ>8\s>AYTjMl/lan'LS-[A?jl3aVMF7g'fds)@$;b]od$O+S+O^1esd%_]:6i#HZj_;/W<][t6j&6K/dN`AB/gH_e5A%qBK;+Bfh=A5o>a#'iL7uL[%q<`_^ptQ;cI[CK,]RRS"#O?2<l(]RV2GPjkgS6bqalL9plnaO8RKolRfp)=W6+reL8C.YB67!;T(Q%*oqI>k61(5:O>c8gV!k]fLt^V>e6n&D=f7t1fghO`MK;3(AlE0cV%#I7+I<QY_M8p$p2V/_To"95,i-f/>GA/O[W,Z-\F3e!#J1k%X5IEFeY#E_[YKNXfY;I9TPX/IS?eA$AEZ2t:l"Rt()JI.GgCH7qq'VY`Y]?WQ#4OgOPD'5.1_bMAHeK4DV\+m)3L_iNAK4TcOh`)%_XXo#3L87%4+OA#0Z/XHmeit&?pfC@/0=rJ;G&NMb,Wdl2-)/Qp)&)*IXCNnf\>6$,/X,M9Je+5Zt&T5<B_lE+LMEY/`DL0[5="2%0Fm`_&5a2nF:A"5Mad28OcP@<[AmO].thh%;Fp7e>I;Mpq#Z)[NA#Ia>>1WTgTK'aJH@:A"2n8N3>@5C>)hIEgOJ#kH6R;\()*i)%oSrU!%5]X/f(#=D5q:B-3,ip3Sp"!9e3U+?ENqW-`GugrJeu8an%kPAGVi^"ETXe/Y#M^$dZs*>\'=:Z<i1ej8PnXRAN1djctXdi%g@tuch4>j%CQK@K$]LYtV(SoI6hr*lbFp;XHj8Cp_.7*Lf[JCZBqHWWX;-'TDMnZVoYS:YUQuBI%CdS1%F+Nc6)prmEF4SuCf34N%^(kS$RH^4eV0\$HcnsJK5eA!FOf<@X@OrdA.A&M*Qn$&X!^C$nB,0-+CmO'mQ^hN46^"D)piNZTK.Q,dO""ePT4<m!_'&qL^9p4p%qoVs<S&kijoskgQn"u"*d#u=+]r=qDHhQDo)ok<dDUQqN8$oOoS[6d,fOfVn4Ph=$TgX71gRDo2GZ4?]LgR"M%VeITfHU'ugE*-o%4Af!I[,&*sMkt2aS&DEKoV%ttp1D]974JqH),rG)p8)Q1Xt#rPFt[^_-QADo6qdJmk8p=N2*?%[<j70?0/Jm8/Zul:6V3'sLP&Jn%U]bgU-f'ZpjB:9a+a,$r)gm`CI)p/N)OEH[5!m@Q[$h>LPMD:g\AQ1)Z[(OQ\EMX6KnX`E^AXsCN,ECrAZL_[Ka(:sl61QgmB0h:%Q`EBm+HFF=,LF[K8@\l,:3Du018Z1],PsZJ@e`^\:RbgR3lCh*HKn@5XD!M;)(64,H&/J#7bL.QrRXf'de40J_7<^R3UR5s-MA)7%Q&&I[L4Ugi"V\>"kKQBr/<Rmrpq``kZF1LunS$/.W\^%8935_:]s9f,gj<&/m[.L2g+%9Th?/WUL_V40@k/==^djaW^9dMH^1nj)%_.1*D&B[$gi=L?_+F6]M53nIf3//d;LpOJ"9>r&!ZBaVA<(,[;5`#2:a'p9PNu;6a7:5tB/nm(Dd3U9^b5;rdPr1O.bHXZ];Yco@%QF\:+nAZ]GIY"B@W]UsrdFnBj#9l%r$Rrcq3WL$mHajAQX:4$j;nr)j`njff2532mJPkehiD,7pcL0"5M-q&rLSpPi8Rlfs_h+U+%#@Kkem^[b+@2Mno<>%c*:V;AD-p].:'c:Q-O5X04-u%EUX@6qlW@+T<1(CF-+Q_'VGEO2DlMfh<Oj\Q-:0hn9\.rm^;cg7iP[dca%B_G"Kf1+rDd`mm>bONk'YnrchZ;Ug&6)8+a%]1BWk-Pt>,GY`eHRM)J*]#p`-k=ppJcAF*-ooVGY-`2S.P</TU2JW.^)D9c\k-K7%.._!9mkId=3nMWXAa"q@a\Gp:c(UY>Af=;qlSLY-!,MbN3RR<rlWbe[8[<GPdL^rVLtHmY6cp:T/^fM^1KS("%XGWbFrbH6jf>C$%?F3!?)=a#O;!BrD^P'C%EYU_XEp!*2A#RSc:S*5g\Q'ZhoG<P4Un*@JTHCt=QO@Z2*C_5Sg8a%UIsaIP:K>U<G+Ff9OhpG,:h^mq%D#r;<6UVN[*3)G%dc]Ck;#@f'FPQus3q^`(26(D!R2JR8g,.n]50K5O!Inm)gs21M$n+-PhGQ6%IE2q)g*>#'J1EW<;,So,^j6@)%+,H%1nsQBW*Xkt;Z1eo?j)^%Sb`SZcY[i7+>R:9.fkKFNlHWV4PfDk^>3'4d]CrjUMZDC1jR*hj/"(V&O$I=X$Z!$FU#`ht`08+0%$Lo[&jbnqnbU4^`*9&(G2h6[/817Sp4e-K6-HYtl)o5"F7_G-8Up><2NkE>5)KV4R2%3U:,-qAsqrAH3j2t0SNah;mRSD9d^?-Ik%r@GWH";-g20i:*581"'s3K/I-doZDHXqUbb=;ms5dKk9(9[#K2?'!20CfeB&-m?o./cR-lTasCm:/<17BR;D\F=!T3fDjQ)E2N_F%Ds`#k+SpkgTuLsr3PmZGje8,aNpI1%'jJVuQJC1BS>qsC@uF(S)56=QgM)Qtb&k(=K[OmcM8H>*EdA"UiF7981jO;\&Mk.6DV@_D%E"o,qo'QlF?Mf;XScJ74OLk42hXm$"PJn0qLY^2G1Dmb%^kBl"Y*a4#_imhpQR=/)0)%"";n`-FEK&[/!/e:cT=;`t(E&Okcp21B%+!s3('0MYAWk<O$Z\jYr$o%hX4\BTD6H,plXKd2HW-$(?<M?#b^jeB'NIZn%pQ]u,72r/!eH\p.Si1A(bV6L^aT;BJ:Q!2J#1)"0%:8E(HZ94X'.+/-hAs7^@)X[cr<(8kah9XJ1!O<_f@+50;6J7!Z1[5.4m"cHUFXp]M`\SS[<<>?crWE9lh=F8(-b[O4a1gQbO1e/7%<45-J+(3/Oog2=h"L(56A4s'r-)p?6&\m/7"eEdgi9_e^L3P\3DH\HakcmVr*m4nZgo%Hh$/\#WDn:ABHTLF=kc;Dkk88[S*&Y8,%9LF,]?>*_%i$uY,,cuFKY:*;s1>t5n,e'O[d_g>;B^;?aDk`pZU@\NJV7;Em0f]g^B&WuZ8gX_7R-f5#GB)K3@sYS.$#/k;5:=Wn%WFsYbR#))9J<i&h(b-fL;Bc@?Wn"KU$@$)75Yn2@Y>!TR^'PoN6BAhe4#NBS+?"0o[#d']*li\75_D<Dqp7,*4fh0""Hm*7Lu_7&%Rj8Mr+k2"Bo!D7CY\+Pc*]4UE32Q;A#bYRp'"@Bq7=oHib:>r;$EC%%jlcoV+b)D@>"1N9SlFZL=^?)P^?lLg6.%O$F<tM8WbL_F%1'*I\I0jfK%j2eJ$W2`,HklI\(T"8#oJGKq4o(\m'a3oT7^s1b;q;ejF9sGh20lbEf7fBWJjYhMks\sJ8%F<%a!*2uV?J'=L_P.9%'/_4uG+c:OBWtkI?2C-BRfE33-#:kqRkcku@3%3%6S/lt`u-gQOHCJ0o$U[-OP4tMbQNf=.t%Or!1!!r<6g`b8JrV#9Nn!N*#l0>%#pG(CCAo$dliLFi^IfgighX;VXOE(F>L,#2M<B%.i^VNU>3uHH'T3udN8%410Oi=H5,[TK[8i0)>AqAK%&`MIC&;V.!2VIQa][^5%]2_o\F;cG9+/op6_.D^>7K?7=b&S`^ZiEoJ`F:7D[o8;`QZ`]9$>.[,:ZDg2p%JP7'f=\pa\0dq*5C!0FVNZgn1Va8arIf+8dMXa%@OS1NkWq/cBu7M%ra@,aI=^[Q91<8\Mkse_f;[VC8><s8%jdX("V1BP/#']i98Sgd7gash$@aRjP+sFZ!\mB.0aEjbR(5rOG@\7d%#_tO_Ua@]YGMj8SO\#1sYj^XQR\#C3)]#L/3l4cCD8j^:E[A(-55ZSsN=V-2QO^rNBk)2)'?A+(a/aQ]gM<E+-uQoi`3Zm$S_Q^A%"bl/dEXG7`0p^IZHFF\m.P`5s_gplM_)n]/nCnH7_EIJo\=-JZ+6&ZiU^lX^bZh=Cn[>d4X(=`$K*!c)E=p%7=d0K)C6peQ\29TJ%?lbJ<,.["\e%.>K(al*`j\h+uF\o;W.bA1$-#kFe",rqibljkO*[-bs\8b0M:OLAXr)r@7m]e8OKT]8I.sHdGR_-@>o&MH@#DVnG%]H-K#$JG"(&((.Fk`oPECX'm-i!f!/"?#--#4TZs`J!uZ=K/X@0W.8KA5"MK"qZrY0/U%$MQ7L!IOr?^KLfQLFc:`!+%BJ"C./d?%F8f2hh=6?8n?_%-6j[mUQI8MkL9Ma7/+O1MC:`kTbVF<qcAJMocAslQ7KsjIh>RXkLk-EF+EqDZ;4Ug]mSoHppNqB0$&qedV"^ST%!-c<?[^?L@Hg*OYHZ8-ANVNU41iWN_qC7KO3!uJokR)\\$62qjeo<34J?eF1-g0K=QiSS2dDsHg@a#*S@-T(!@YZ8lf23IFq]5)3%>(oP57S_ZH@on/E7[a^Cgge@K#A!Y!$QQ"*$OmF@@)^mNoG`Y*9)@r=N*s6ATmU^gql#f")KXQ#^4;L*/l_h?T!BTLV@kr?bJ+A]%=E<^$OKq64%q1/uj;W>C+1b&SLr7W=b;tm-=25a9%!:4od2D0tdQ&l_d3qM\@jiPLNhFi5)JP>q(5MP/5:ZNp5_sd?0X/h.l:Hlp%Mu).]Q.@MY@p+r@^4(/n+?2!9Un]^I[<&H^7ok;>e)mDgJhiS@3fLG/U6OB,/CNf0?HdhTWs)CC<a(Q-#YNceo<g.k!qCKf"8<Yp%U.[[<jXkh!/6nt_'Jh6T7\Q"J`QV3kPHgpjU>jabL'SL_74:>D+r&#jgLN,WWqi@/^gP7h(rK8K#ND>9<s_Gg&A[11o"]k.^)#\%%ZIV$X/rM!dU\:Pf8+Zu25q$gkr>s*lp7d3d!hKVA$O7ro>F"m&dViiQD$8#`SWbW6O]bh]W%?m.Gb),lq[gfp7cK-\O<Y<t+F0+d%;KZLeG@hdKP)M=I+i'jLJs$/YYR$5O7[Bf<8Q`U6W6Fq^+MjGETbo#B'%Ys0lT(h7A4]*6/=WQ.ma3ItLK.H@hT?Ifj&%9lomjCk%J1#&tGRk[Tq5P'!``/C5GH<sUW\SlH5/K\<StS?BZ@CZu5-#JHl"VQ'<DICKPE,VJaq*PKE[+GqdCc?N/3hF&-cm=e&n.c/W&??3%UgjRkejA6Y.$-9lpDsJN5Y<@e$7%8m"VOjbglK#P7/j55DQH))BNcf0NZ#f>*@b7J1oDE!&nq.9V9ru\&h]P+aHu0"=DfK<eJmGL%pAh9d:fgknA(h:g&Q"3g+:;I?:ka'OJ75u#I\ZC*HG)gu"HYMu/r0Kml@N$J7,4qWJJCe%P4r<k0m;(a<k<ne8_RT*+,(>L<\boK%$7/Q&io*C:V!S"-PdD4sF;?"XnETZJ._rTbYT1^]p0^&j:=g;$c);H,-DH4bS117X"<O6LN!X2XR`^Km:%gbI8=E=l1GB4s3+ui(%'iiRpXq=%4;48tZToj1p&p/,hVME.D'g-o*dFZh"M>'_=noFAG,pe2&C[)AAOL7bg-pt?S5d*'UTh<1!@\0fX9/&bh;tArcMk?(R%N4RNnr,*01;6F,pV9,1+W4]t))fDLQk4`Brn5VP9`G7I<VJ:0A$1&lhDujbgRHO91FKj_j[nS=Brm=^SqM*XZ#'HQDf9i]OJ0?"l%1CW-3jhR1PV5d.nCl+sMc?(uj)AnQJ5nT$GS0;mZ:@>VP=so[lOsA]oXjQbXhO4scTer\&91G*3e>ub\!>I*MX4Y(>iH\N'bmJSj%G:)%D7$B07l6BF.>7r>uIK:6/YOOMf!,1tIFA?j_03")KZ^OneV8?>ZG<&eZd97pMS<:X,eP>V-mJU$H@E"jB?b$j:ca7J"E1R5^%fI8R/g\q1YeW[6u0/dXB?UDiI_."ZsLe_[b'"Qi@^VpDPKi=bGIf7q-*Z:0R)a$/.fN_-pXb9AM0e(eq*)Sl19hUI*lQ>eh(kH10%X1!;9'7#K9quSEDU+0!o4@ehgrr,/Vp&Ip5LlMm].nSth!3a<"P4(+@KNk0t7LAEOM56t=.'sZp.q`&rPTpn8Z+B,#`CNf@Ct82=%jp2hZEq'3CP?fRPNT?0W7@k8FTs\J-%Vq67E.1QK<H>W.Y';KO&!s;E`WUP3c?A]J@k?2!_)3!_:]?p?igeM*Tot_EJ;TUa?AP:,%?FX:C&p/A5qm?;s]QEuUdUnMK$"'b[TIj;uRU95KNb/SjHoXN$d1S^n&A9p'l#fru?tXSnQDIadZbc_PWg7&YT:GL=h3&NXma3V#%1i0g[^aj,rTS.:+e$a5;Me#fg/%m?5^h"-DI\f__NfEFQ9[4f$"r?m>>XH1.F*.3tN["PG&h"`@c1.Gs_kcDh#W\jT\%6q1$NVYN%>ba7K!_"b1mjK;>45(8QF4n$<#TbR]kh`@OK#cqi<amC\M8l<&ncJWgNJ=;<i4)7K8/RU\X'>'g6d]H$(d:AnlAW+J-A!O9ZSM6!%\Pb!RC./cTq,p>D=dNZ(U=sEh*u,I=86f;N.LQ$Hd\7B2X(F:`BK&e`/7a>nMTtKo/"'@p1%>H\j)=>I7pqso<2@VNNmFEsi`Mme%dWg`+e&b!BPkQb$'G;pbYjeee\`E"]!r3=#PK*H]gA_;KWfI*CAfkHGTh:.XONC7rQoQF;$N@Oa8QIac/ZohlArI7"-*N@[V=(]e%(GXtVJ+QG8("91NZiM;LlBJ78fUFMZ\jBMNZZT1pTY`S>l*r!"UI8Y*F6fR-d.=ld.'/K^h9RX[Q^-$omV)Cs\qH,E6'2eX+b$0O%"I145bno);FF+d?<^q;AUhBa3L7&tU*)k)'TE%TBd)K'NBeC0I,u?Sc95p]>;?Uck+b8\f]8m@mMdX>A9[HC2oucBk*[)6!OO[$:%;E_Q!0AUP6Z/QSp)+-3GC-rUl686/G+,.&d/A.=^#q-PY2Td#r<ZR",F^2_;31ohnS8HfA8--)Lg#6FEl0FL0cCXI(UgRstFMh-N%C#Q"e9ZhV8IA)6ZLL>B-3Hs%!PgYq/-4U?G-fDO,?8Cc;jZ+fA!N'X5.EFDA0]j\nHfCU^"aH1JOS>+sc#2YZ[T04^?i?1pZ+g>g%J6%+5:ga].P:Qi3g>U<s%2=&<e:2I3;tYD;:iq=-ddi/b%9"R4m)N(r9%bfs2VW6P?f_teU%-"Pe+"!*3:gtts3*bW#l.eZ4p]p_%`>#Lr8o(S$K<KX3\F?&A)V5?NQU;c)&.K0diLH#Wf'U/V['XsP@+!LqfRd<L^pKg?CjR"M/Yk%cT:[$tcOkNV:!Msi0<i)*H([1I%YIjZU<'e(ORA5@cT3g+>+O>po/'FYDA?gO_d3i:WS3pPKl3J.cTn3-AT[8UZrr::#D:as4\dnXir=AQf5SDek)4-:TpQJjF)?L83%@G%L&-\G^!fRe=0!_'M9rn_EqAjg1s;T!/Z#HSn,<aHsp,A,0C)!,SlZm2oM^l'=)]Z#J#Dc7VU,5Kl.Yq"OE.GVRsnfU5tbqs-Z%A0qnrY[]=de(,:&HHq*$O)2e(-D`>?,?(6X((th(RZtDU320-.%C^%LC6-697?[eX8bktPP>Zah4tAmL@msdX-3_6\H4ZuRP.Q#_%oQq\7jPqlp8Ta%fYWrksK!fN(Fn'+kK/=2<YXnlpPjGG_*N'bo%pfu9bfGE<]]d<-4!Lf:V$A[e6W&5=e&.YV"]5!5).<Tn9Jb"R%1Yg5tE2Y`bTq"h^m%No@Au8&KL22KRVYq.tq(i6>kr-A9O#Wu99bso>ip*j3JT*++B\Z==M7G(LCnRb:6p]7O\8'h.+D?ah+9L(E%P7g+)X+DUOC9oXYOq*t'gGn7p3.^B&@Dk8])9aF.=W't#XFc5%dj^)Qp/<SQ'a>7UDua@44.3K"LfFGVCTBSck0!,g!thRfp-)`3%0JhaUb)IRL8f8.iO/j=&Nq[!`6!Ud"=OG>BKSgCo,MVd>R'MW+FVf#D"@m8h/_6/r>&WNUL@aRP8`@k91(m<EE^sQZi^gV<\"pj&%_W\02'::EM+i>44f>VR/Mr<Y87GpV!Zp_)'7@@qc4`j#t`s[$/%c.gjgXgkt%F+7%MT7%X4T?[A'C:UR;H+-D'C9?aB:Ud)J\p\I%%V)?p#n2OL:P`P+g_Ei"K_\X9.kQL>:g[R-:M!!Tada]fs,lFJZq&;`I^J?'ApVp]%VDo6R<p`b&?u>]e0l\dJNXW2EM=&3n'ZjK%5,<s+<reHK5Th0OE*Jms6;.eQ[;qEZ<</EuKsGq_:>pbm]'obpWcCE@h_=Jp<0O1eLQAQYcAueMd\X`u&uAuJ:$Q4EV0(8/CoS2N%5hUEqj@\[+E];';eoK`^]gAhcV2@#5mKC,LTMC;A.fBCc@uV9?<P[Tf_4B)'r7qB;Z)2VIGFNLRSO*Y/i(ZMHad6OAPgY-uHnhN5%8AUShBN)5NilIZgO9f#noLRPoW!U]<$q<bbBNeb:XpjZHr3>)T`@KI=[5EZ!Yc(,S6MYk8eoDbc,[J@j3GK>g&<RSo<G:k&:tte6%R!EhG6j+f!.+U=E8cQo]8$o3<!0B&F4MJ]*KtCCnj!$$'4ehY)pjkCkLG7b.I$LbN-_t--aeE_nT,?/@_`H'1A1SUU,r7T@(hOXM%77=[/H?pPegQ"L$8CcKuOu%(pTK^]$/79T`ha7TpiE=,*[V/?(W$cGZPHgr?U<RgBZq^9]l-eu]a\KXFSBP7?Eb%/>,b'=tFQM6r%-2:;?D=NAPZV?@<@P5S*OJpr%.C.N5k2O=Gg%:YLNVgs2.QTc%GnVS!C@piFUI_(GXA"d7>5Tc;J-E'M#uCVY:WV5aE/Nc8O"Bj-%/\pV-%nLJuh4#a`"H[.gRg#Y4T]B;k-Wk$`&If(JOl;(Q7WAA"+@6s#<:(A2SogK--jq.:$Jjhl7%OH@)D;+#q)_^/mdX[QiDQ%B%?@,t3I8R/GMFAC;+4Ro;f+kWU>C*`G-95WT_!8YYMZQ[]T)774rS9(OAsBl[njer7,!p>GL/!ZEd#/45[HY@U.rj5i=>+Bn*pb;6%3`Hn-%tu1."Eg.(iW)(D:5G$GS7S)L'#ZR760XqZ*Rf.qSDaLZ_]MF\0>,TaN6^F]eTEr6b7#lD&%F&f#\ECS3[/&>]o5eA_ICI9%<oe?_RX@Q@jDHcZe(s)N\AU\HLfE#rVNED<5[QhW),)LC6LUXBVR"4lC,7'>Q1^"nE(<+`T(pNsnug)494jMg!K\4sKc"JuLh7E7%NX3>S>&jD,:WqFhh@<XL<VLjP$p5uXRYR@\"eTlmYmJmG!1:/2L=CD.0=D!W;Ve.mZqT(mP1aBsFh_pt.<UpYU9-96dUdh9QGBO@%$nQ_'Apne8TO>'K]l,Tt`$0A$TT%eg(C(<D1J2>CpP0!@emoR)8oZK#C4TJ\<6o`UfT2%;-"F8:en.6OSr@&DWQiY9_1VkSL8nD.%<fc*fE\O3&V4bD%1SJVm0qk,!R8?Z"9IM:,r<7_MP>*MP:b(ZU635S@D]WahRr0F7]%F8(&IJmYOu@b5631!/:VmPqCEm'nc+m;T%1tfPC=*m>DYM3/q*^hkECIV9^'!s%adEEB.a0<I$1Z:C4d3k%;p,N]4ScG]dbR0YOSht[g'J'?."T`qs'9-D?Ti`9a7`Z.MMcg'\%#<W\s%PgTGSs8[DnXc6^UMp2mM$9d`/j7V`kk6FqH*gH9M2>"XK\5Zn%h9gW-lg/QJE@STP)DbY]SFI@JeB5qq4%0_[3e35&8c/6%Fe9KNo>ETZ$#>Tj/oKg8<H39:iWg%='4a:P!5mDp#_G#uXZ9EQm"fcM>(XFskU.j#g:Sg"/@2ZYe=s,Z-e?i)o`<:ij#rZR'WJBm%aCJuk;7o%9[_j0(.-X7!52iPX1+ng\3aDGHP%&i[$ddtE&MThVI2T%iT%m7`b[^sM7=9\Lo]fO8AXr78EB=Nn"+F&H[quX3T2\3F%H8(Xi]X]faS)oZlcG6fJ4WUp'BVM5*!3!`4,BS4UK4<0,/o;Mk4Yn]/PhMm=I.<lZ0"m7`K7Z*Alm5D+)d'dt+='[:41Q-G?F"39%(Q7`Q>'Kon_f,:rbimB.?#g!<3H>M<.5]0DG:c!i2;qKK*-jFO$51dMK<:ph@CBdqJhY$8KXcgD.TRt4f&5dOmn'WG7DM'L2*K"r%m0VeU4eP>MXH=$4$`LCJee:FXZ8FM(3/W$/3T<_Y_R)QioLO:+Rs[D34aA&[YCIr_W?fCYFHE)%h97`i?^.eFIN"=g+OUo+$,T,&%#f-'eZ5J\_bE8D!@=;J2`f!"''_$8(`HY98YIKqo[GZ5/?\cKK#@MK2L9g+\2.+`B8A*6sGb@J+H:Y.Q-9P]hoE`@qE\PZ\*HX*?%\C>+Q6.TTVU9[G2,pJ""T*`A#eUf>hXCtEl)^qI71)o_K`U^8>:KA7q-9S8ceZm9aMnqR#U]"BoncPO1U4Q"TH75l;#!`5snsJNd%Hm4L="Cl9CZSLR_)Mj=@"Aa#!%Sp5oHA@K:4;t-k>2l?cSOD9!dA0rF&&>%:lJj1Qn09D32rD`*D*AdmR@qb_llFKEYX#dIf1$7.%c$",;6PX_)J5C#0(;Hks)[%Xhj)40U>QhsM4tOlD!9A/6Ea0b962)5Q7&potB[1aN3YIJ9*FnL):S=oD7R0Xna+]7>$5pOqXn88/%'WVQ^Rh!0_"tVS#L;E'HTgQpOA'Ni]8cg:hZH@8F%Q8uhbcf;_h92g`nqdM8-`G3l'9.:a])uGP_$5L_j$ZT1cbL'O);u!1GlTCD%[Rrec)eLc(^`!8^,%]a7`(pLi_CrId$j)o1d6QOoj:DC>]tl^K[\8NZ+SAVJ'g7*niig13m^b>kTjPN>3iABNX[d!!#OZpAdKsG2%`A%m)&)GLF3$l4g#8eYdg;n'u_:'alq7idLD#2hO'=/&Hk''sTS?HVKThAh-,(MK-".3QL3Zsa&1?Xo53L-toN)r3ZN5Sch6V<Cd%@[dK#h@ui\?Y\!5OuS_paD4]u@Z$;#!3.W\m66Q\;a#Ti-;;D,Pp%e"5_m8E[[d2G2#InNi?=+,aXdrp_i?`#]+Z%\#"/i_cg3Q3%fri$mcrP@#T*gD-i/)J68H@:":7u7ogk)J?PD4[.!(aS^L4rG*i/]8tEOK<L(!cqG;6kj;!Jrlo*PO@;I&[u:;EK"lG^Q\>Fka"\%T3p`8DZbh5)aNBrGFB5fKVD%^dLsT;c-WNTNac`O@o@Z%<(\8<J9;8#96)4TIfUH>G<$e(=Zh/a&_'l$b-PK>JIeg=W`lkO#@B#K%-:M)\KpV(N$:IQC*t(D?U5u)*GnXZ525U?5poa8r1_$)k6*La4jD4-IBfa^$3fa"L;$HA'2-iBLU)'OhBKAQq7hY)cnG7..r8,"I%G5t_SK38Z_Rg&#hJg"Pgfttl3ka($)&s_ZEh9_D:9FXkmgQ]lh%Bjc.l;6qC;q!%e-<@&6s"AY`1"_Ue"5pTZ=gWjo&jae%-fdn^%cfXWFLSb`gQ<@P2A::#kHDNb$/I9m[h]]OG!osu7aW05aBA.k^BC>S/F/Kp(\[@lVs+5b6ZU8D[\(jALfe#9J'%<8:6k<nU@90qg%6u9C6NX:^/UQ'Ao!?c[^"EKBNZlhEo!FTs"Q+>>U-Ej;YS'uC:9Z@'!,0hP0&)RFd7NR(]o;4Z0T<Uq/R1cF:Dg_-I)X_O$S!14*%)S!b7fT_FKL`T.C+'e=D_@n'[8cZFppfKT=J!)2naONoC(D+8S,_@K14AH,]3k95]MV;C^#'=qX)#d_B3B?C-.)BZQO[VPAN\LMm%?[bn@g&nQsf*T:Wk)$"=9J&m!4!XhaaBV:B_Dcn,SQ9LnGgV>[Sj;R_g-$QXh2kZn*sD]Q,$5T[@0#_K4s+V[$CZ5dm%tXr:#393%#/d12gt.Q)4'2e^EPWMqhNeTb'gZ_g.R6\=+Cd7c@ML[9ik\k+!`7e)ZcT>:,6/A%7Vj+GX7nTL(g"S.pt9UW:$bIP1"h(k$$lT7%9<c!^/%kt4`2nmOD2&Zg#]Qp[b8cR5p4pt"+Kptd".,G8_HPk6OOe`l+k!D$AYTfMQ`cQ5m'%AY7+n\b2QTi3g^Dh3G\W,8pJ>>Y%gC!47Xs(]JW9bD!Qi\Hf$U5nCbG<I?Zm8h5<QRfV7P7"U0L6UfQpUsbW>_oY=CfP^@[.ot:p(>-%P9e9WI/LaAmi=p9t5<hJ38j6%/$4OB;WT;J!45#$4,%N"f/,<R85`4i)0J<Q,a`5_.M<QkDqF@lq2)YahurZ:c=Y7YUuh\kECK<iDDT6=WA-Vtj!oXNranH)]J5Gc%rk;pIMJO3?Iq;i*r"Sr2i-qG,`=4hS!fg4-RrEVH__JkVK#JKTU0Ar`+>^],<N36E`+8Cg/hR+_+3$H&?:m:14r1VnZ)[m,8$qYV%I'u55r@k7q&K.OSkqP(V[4_?M.UslpEHqRgS\$NpD))Rl2*[J&Pb$D`HSpMFn^-9*^V.[5!EsbXF9Nd>Hd16k-;2[?ST:2@\G1t=%Q.^nT_IHtm^;DS5q2H.mpG3Gp\L#$Nlg^"KpOhjeKT:0`@jS]=&:0PNh*P2kQK5NV,i]&Arb/8PD7V1l!E@crr\snFS%gIU8dJGI%ZjYZD`I[6qJ_oXi@#QPi]+^Mf,I^.S'4bPdXracP<SIN<G;UJG2G'#HSs\=6G=L0d'^nCBeUPu8LW(pS)RZ9^PB$HS2S^E^S3*1D%glVRVO3FK2A45UDUb0`oL(-GR39r_kI_uSuWOSIWpY)PhS'+!M:@7DED.H1J7XKplS_C5@NH=*XCg2:H.OEgg;J^`0Lh7/0goY)a%K%\"2$_#)H7Y_!4j\[ch5MFBh'4&gEd]O9f*:k9<GQsqbJJ9Ac=e-DM$rD-/;QOB.&!,C&1/uT<@q;JJ&rZ74[7EbHA'r+ecqpMd%nC0^r+[3!&fnXg?L.%li0mg(cFLI9a76DqB(q0aK<J79YXffhdU6X/mkV\i'jYO5U<$aS*H&3If-g)2;3P#P+r)5UClWBUkmOG[o%mMAo":?=8%$=ua0\'fH;4b0437G_VP*a`9qoI^MIT`gZ1GH8HsQ7/3F[kZrYS76Hq]HJBd1l!uN_P^f>P=#I-O`YCT2`JCX)+U/?%^?D7QL_CoiPJ>W004%WIQd,15IggBK2DdQ;YO?gq!+X=U#'f:^cFuEpaLMQVZ85%aU$;]j\k,uQb.>61P;I<LmVKF@0%5g#0GM>d%C/ZqpdZVT20kVRB35d5M"!U>/qJ=&gPYRC\Mr(W-\<'AK#Z8k;"dGl7dBicOmb?O]L)cp_G%e&k9$Q4d:QL@NHDI,iMWt)MUhdoV%W1)!/nn'itGF_-1]uuGI?#ITcC9[>a%UoP*m[P=m-rj%#eoC7e52X(/0CP596&lGT=7]a%js8.PGlj6CBII1oD'Knec!,Bc1Zu#6%AIaCC#Lh-Yh&71olUG&-+W?obfdAR*l_p\lKU&V(H1nE,;Gn\JK4G>afU7lUN\pZVDEqKUd437nPXEXJ`\]_5/k&%9/)Z)%am,Qg%g92XfT@tZs/rqkrh8%C6aW\+nN[B2KWso@6D](VFb+/Mm1A.F-+6D2"QS6`%Ch+/mF#K7c"bbno[$?lCE"_@'!dJ=Zmme=F,!:_4%"R%T!^.[>ZUm+)/&<5\GRl@,plSGhR]P,_VJPi;P":QH84STdoDb)b3,fk-#%Ht,:kOq5G)"JkN$l5gYCTLR[>=*qs-GII%pi_"0%[#o\IFuU:j")']L>+=c]*O;=?9Nfi?n"GH8>r%N26V`6OH*i=2$S+&$1O:mZB?#udEK?&1@adj"7`p&g7mu+:>;!<tDc,joVME[X%VbBtR*\E99BTqBpa7Z`p-5@7<S[CWd6J`rQ8Eqgp75Q:gP"*pG!EQuQr%Q?$]DS!iK53jXTuk-3?][=!/J<m@LJfU@'f$d1Og>gI%eeiL!(0;De&)"l=G2Nd+rbK:I>5DY@fl8cI98\Zkn#+rmRP?o,@R!6E!lm40M_LR.JRDT@YT5d+j#G4rFiR%);;KdEVO-Pqf]#05%9&4=eiBa[olDgjkY6jA7q'>^CNUGU)Bjt%"hhVL0G<gl.UFSX#T)k*9c'Pu$U$O_o5I;Wl$05dJ+9fgh@iiPdeKeOL2um2U/\ajA%T:/@dGRU^eVHhr"N*e7DqIm^@bI,ARN_-i7`CA1An3Ao%^hGtN:cr8QCU3SROku#F*+I=?Tj#Zmn>&"..'@(R6tuDKJf9D,6fo9;%Z%l4UNSX._Z1Fo!_g*6J5nXF5f@o8P4G;.91r;\ZM:=g%p6sI]7=C,7OihJZl)HE"9jg0MiIM!@+&/^L1JXqV^bE#850;%8%bSXP%$=Uk*$#2M\PpVCU9%@CrdXWLS5d'hMPROgYijd4..A7G['Vl0TAE'Kf;7VmH6VgqlOL^E#1Ma`^ObW2'jE7O3GQ["BgA^"=plN+3%,!/-=70p)A7+#XMlc^<a#2+_Pc,J_1N#"C.&au\m=i.j!`$:&ch%2N?EtIrDr%,Mb!s7V1mOjXI.l0Kr=sjK#4b0O4k1@'U@W6Lj%L^,Xs%e+ULpb:BrLpc+Mqb:\%OHSuXJte/U8e?XqR<I)sd?0q\hsJbX3P*^eOXrh+Ue#!eMdu[:V4U(FJ('[A6R7"[aqW`e$lP-d%IU0OVa...ZZOPuuffRrB]]Q+f6UXR,DO;;BDe.tc_u&!V,TM3-n`,6</lrCVnX'L`rBfdDVCCG\j9Hi[/8aJ7])OFb_:\P6[ZBt<%AZc1lARFCGN*)Uj`B2n0E1rg4J7Sn:VLoQp,*m/C$>ISG=uV/<S+Aa;.Nhqd&jPSZKcQr?aI/TnMo'I+8VTDH*>IL/CsaK#O-sX\%&;\C$jUF<GQ0X[B6s0G2:Xc#.NhQh,"G#eb!oueYfeklYkbUA$B?Ra6aI0$Q9fCShI4A-uI6o3E@<I^I!4i;soV6Zd8o10-9*[[f%U=E%'!s7.@*W+J.)h2VMV"E[4d"4+;\aH9j6F@?361QD4Ii^7@Hb*0,^As\#jf4A"rH=ZT_?&UahFd%q2C<#CDTDQBX8U$C@$/;>%RG,o"K@[*PEalZ1&W3UV"gZNsMRop4`X2ACOBhGZFH3L;U(a)1d6*3&0]"otF*2'NQj"Fj_IAhS,=%TK2A&""p.G;grB3/G[=4`Y%lCHO/c@sF-:hc@Ep,(4QDYbHr\#cLVBdc'I!:-rPqIjB2RrqE095<j6Y<t[V8uX3bB5dHI<J`)2;QLOpJP6QH><omEdVT(_PN6PD%1'.G5$dGsA'.]>/kQ&]9,e$H4/=<9B&=qfTKNG6.j9ocSXII/YZTQ:p9hMO-h*b7GZHr^0\1$,7d(QaAnP38Rc^LkQg6TklCC#uh%I1dlImGf[*Sca7D73.TYps'M^CZ5$MN_S-%Ht%kVXkth`Lc)p?a74+Pb=5TI8EL9)M=)(l%pK4LQXgIFD+I2b!0r<f!539B<A+(u%MGE"8?#,7]B(\]X/nesoY@E<"R!jIk@-&B#Y"E3s.eiOS;#,1ub2bH(EGsBMjjusMb!.)c+*f:qg2mGN%YE^ohqq_=-oVP=\unG(%$9hma%dO>eij8_R>o!V>ph'(QDFrA7]*DKmNX7!06pZ5$aJM0&<bK#`$u'rd.B@3BcCo+m#J_E1Q?]d1QnMf^;,!@#%_qM$*&cBl%KIN>o'gg)HMoA(0AL3UL-*W2IG?RHH=j%t$*>_aHAdtQgLMuC>p(ZQac6dq`/kQ,:WtX`fD>Hj5,V]sr)*0$%@sVnKa0PedAo=D5%N!i*h-,<dm0#RW(nmmqA'1jSRK\?t;TY#`%>G`-WD-rZ[4-P<q,T9NP0%Uj"J,tbPiVP`D-ML\eQHqN=p1[f;+I0RO,-GEfQ9p9O%=g\7Fi3jD.cE,.g-%F-2#\i@fI2qtqj3T^X,mo4t#=S4qEaL:.Z[s<WfcQT:!mi@-BGg(o1b-'qAE4Sp3kfN*<Sqm.i%gWfO;0#.%/t>L5+Z9D/l)J#g!@[E4GQ:/OVDe7Wbh21V8bUeK,s#se.]Akb+*&@f@ns5Qf29hi8IVSAI>??%$0MEMm[@B/8VSX74-<$qS=1>;%T('eEoOu.gM.]-2_>ZK^I>cm<jHNI-m;?QioE\?F)5=SLn41tW5MM:QMIusN*WX1gBNZjq)]9sXq+lB3`ZP;E\k^UhA1/+1,K_[R%`@+0*2W/Raf=1>p,#'qo-^^oa4Vec:mtfL0D$f!G@JG$=\\<,%N_)5ccCV.qWous>9fb&X:h&k@Ce)J(Q0$P7E>3,S:$8H)rNiM7%SJD[7A<YQR!DrcJ5E\aoD_^QeKQG/Kf"9M-cbs%+!aHigXbo$UmdM99FTGM<=j$=C#V-c]X)4V<O9DK:N->`dS`nPS,N\UN7Is[u%Vp5KU7t)X;:gK%!YD!"f,*ia7kUJ9`jN-hD6<C"^I+L1X"0E;4ATV$)#,&'hTb+pi)B;L@esKmO-bj1N.1f$U_4G)8,QR[]^n4gf%K20hWiQ`8Y!7WS[9sI^\ldO6M!C>i5Vh&9?SY^TWn7PClA"F\a>g3U*B#%Ic:Qtu00W=e0:`4<!`S@E\h#$i:M2/J6>Mf?'qN,>?%-&o8LeE,*tf@a^_([8?mY0h:q^mH^WDeOqUQC#A:@uC/3[n`%ea^=4=_(htTSU*,_j[bAmn8O"K-'"PVq"=#BYdH>GjmkR$E6Z;H%b`,>:`].Eh7<S'M'Y0c8m[)H`YRu'(:D2WMoRrGc#g+,%X4#m_g6Ucd7Ek\K\E(Qh7/>,LFIe&%+RFBS]Y6<+C<2n"7sn-5W3!bW%(P-)kQ&Ba`<cTO9;3HA^i,($n?"RCf3.]"(\;n><AbF^'6:"3`USLH"gH;,+UkhN1@$3l)X"Y.$Kc\33C6E/F/ue)nL+q(X=h@p,%9hL*:?dUTb2dCMEm3ND7U?>tG(!Bj=(tp:6p3A3CMZY-)A?fVTa'a=PQ\32O+4)6)V!'-sGp*1;;XW:4FY_"r?0fo4:,+HK*-7T&%%M6dpd)17q?*uaCOPfo:Sg,TnU\$q-,P$PkA.g"R%Ygsq;j/pj6N@0YkA_*=k!l:`=Ml*qE[QIPBde+TIQRJE/)EnCWOb2(l7biV%?tD8:a"Ar'O;l.If[C8*5;6.Dd228*B,,85a<5!1N:K\fc]koYCb,sCXQ-L&2['hSF=f1P\B)QPl.r=W0C-3?a6#$9OG"an/V-kB%,?/_GI`ed\UiN$M)B2Mk>)0T=@*Lcn8!e2OJUkoUL<8PJ-Gm.!k[M*?;YnoaR4R_Q<P@9n*9l1eoH;Dj8m5l:BHGb[:8,8(5[$.4%:lg3a<";u$)[]a$Z>>E$[!4g6haW]$\Vj19nr,+RAr=V]N%EK2rA.Yk*VZ0M6F[%!n[ck&q(?&h_<5h6?/8a:i6q,lV1n!9Et4Ub%h"qpse>_*J67N+68Eo5nQ\lmK?0[4XZ0&\J!)5KS*3tdU/Qi3<IB6"K;&N1>h*UW@-=1+>g4%2imG]9r,a6+JW=gT=pPc)a\rJ0'%?18RW]dJt<Wi.g52:hA\\pXEX"5tN::664O>*m<6(@_e"99DP,13,IC)>?L05&sF5USIB?IR2e-7e+\f'M+ILs-,C9Rpl*(AY'Xk%Y7[0;lD#Q\\$o@ZiR#\DTeIl1[u\)Qk)HG\#-aE0-(;6KY[.J2>Ojtt03#Kf)mgL=a\2K-]Je`6EB?+l_nrmLMSk@rKs7?b'6jl:%:f0la%%f0+MHf*&Hk+('n:CH\o7j,T*+q^^pkqBc<dT0`Mm+Uo"MaCeoOjA6$25aEeG[DWHlGBOGt(u,R4]8$*m5;Q>tNeq$Eu]:%f]e3nl8H5aV&;"_bDQ;q)_I;ENlV6u)<;XD[Z?gnWenefUt`MMDo@[5-n0ebYN.0!;HOC?2K4W=niF3["+RQeUnlsrbmjt`N%:1]%a%foK-'Dfeom^8)Qa$f6><4I>Ob-0Z,F"mkYAPA%2H)#>[E,g?@&sV4roMLDPG1#j8XfAmh=TZTTVNb)2Rg@I'=YEURo%^?g2[O-%g)qi435tUdEb6^X1RHBrbE1JHVCSpo*HZ]$=4*;!RHM<X?.M(\3FGRB2L3U<3/^8oE@'[`l/q-^>pT;HpdVqq)1HHmEJkO`e2OKm%!EW^"&3X)@Ot;g`H>JGLX)+UkOA,L:"Bc8bl"b=GBR.]tcBN[OH_4AWLBLc<RpFE.?d5^Ub&&5I5M==/;(^SBFoC:\F%"fD6+&=f%MJr-@1`+K=As&#p#!-sPU,F,J03:V_&Z1=>\I+IE'la19Nh%^OYNUSFq=gqC5>XA`P#>G5I`1NkUJ:/V43*jjE90gP8g[>Cf&Rlt%Ec3MZ*c7@VlP5&_WnsdL,V/UAgs@ht!$-&lm5M"J8c$u:r?b)u2Lm'On4X)834%GH\QGcU^s2VWJ4gW?\F#2aIsqL<,WYWXP3@$^%e"fY;%Vr)tAjrpQTEq2tEgd]pIUli,iNt+MTJbS]CT34oR?Z28dGbh<=#H2jJs\e(TK;)YHn1f^p/Gn6*%SL;Z:2>4!"q),p74ue%Ar1;p&.*KV6_6_n0cVurR1jV#ht1W]qN7.["9>kG!%*m0:i*OCP'K@[cT*6D$OGJ1bqh/h!tZ/!=cY`3'e8+@/1@1>ga_2bE[4=p%YA":H)c2VaJ0N^sLdQ5."l9\g1t5(h^SC]a(=Z0"k-Ubp43ga\4s17^$C`Pnb_$hiACebI`TA>^:tVXi/L%sG3ke#gUn7dAKQ%pW%l%fe-S9q*Xhok:fan*+RAL2U;,k=6q?%.6-\GP,RWD'7pa^@7*\CXRuQR9N*9O0a6@$<h:)1C1UA56!XF-ZJ%@4\sY@#h<@6NCTr%-dW\`INZ^ni(9r?O;i9AX??uB5J!;1J]7GZSRGDXcXZ%%)'oDqZHC]jY:TrCCUgYBC=6WLRJ@1BMEC7SAqp6=THl&>;:G]@[_;di%Me,D.RAW>31id,HP@U7:m1d0UC<,kc`>jC9JWkj/AI`!E]??\A3#:'&E(Q3s/3\ZQ8#SSl^&+%9dM,]A#T!i[C"8n'pHMZAO"fba%R<5pSC45p#e,rgg:^&q1A-csK,E]_#lr+D$&20sMAV=Xq[:YX)a?_a0\"ERPGPZ$=]O/,QLI0<W'8=W7HNUh0$+q$KM^`J@MG'o*%;%mA\"iZsneL(Q;>WZ4@Ue%En].Mj9"N6n'5Rmr%6-'6]Hm8,2Z38SG$RRV`+@[R/(e5O3=?FtDJBF!-nQ&3GJ^`k&mEGEY8OO,2%Vop;XV,<:63*^hTOdhKgRoF`jcUJ)/#.0?-`bDj>!X9c_AR%Lf/Y.e>+E10J/6,cGY#h/lY#-KmXGh4h<.JM4r2<nu_5(B;[pKfJ%/br)lD:X?5HLqGq,mJmI[$O*S\C04%%JYrh=qb`gG65rgJsK8U&Ap`,b_%goM/=lqJ=FE+ba<6l)]Bg(?0=ddE#gRGa4?J!LdMr4%!<5MC*$^nn7$]'nRR?d2lNWS1pOJ,RV!o@A(Tb0;abD<WHB4J/Zt&G#re(j=!l/W0(]e/LSDu=LL5:;&RkC*R?C[aj<kI=V]U<K"%]U.E*LT8W.O$EQ<)^n<3&QN:*"8"le7dS`h9o]_0AUZ\gbP@a4q.QOF:&n!fM=g0V,pP\]]''_cp54YqS=Qe$.i4HNYu2.*F4.>[%.<PP;)rTn-:b!_?V=4j8J3XL\<G:l=eq-!<RZ@4ibe\GCAQ1;+==;JW^'0bLVh<<H_C=;$k=EI9J(p02$$Bq:,3):G4@p8.dN-74%WQLtn-0#.jO\&-^WGSruUK2p&+!K/T!^^:Z)Zc9NE'+%!MTtmT^aHp]9N=Tep)Y#Z[;5j>H?7SU7%<Er"D40o0A%`7Gen!)E/hiB%g.:1!LDF%E%3_tZ2GVb_'RQU9c=9]oe8%I7;<[\'lqFGFOJ4OV;'qr%E@M14hPcKFcMRO]JlkbQ+=Hn@I,J&+3Vil?#V'^<ciP>\%)k;^,i42MMLtp/,j,Zfh8ei1p`Qn-b`>[Mo2lHc@H#dV[2A?HqiRCjKJ5&$$kfWaa;g8UC%u'mBKR>[:=\5@?jRpZ5$hu<(?NJE`%h'T*t<bLZ]>G@qRF!rFIMN=G#_eL6Yq4Pg4;T*/h9;tP8N[>2m(Tt55<pKt*E[&N]"aR8+FF(\d/^g?NofWSTYguU:W7'MH036Vu%/58YLYIa(HV\+4p(Y^9fJ:Tt[;luP\MAm-GlaBClLb(9:!n?@1d?Df5],nRn$Xh&U:9O?A8kKtI<Saro"g"T3m:3E;[O<,.P:HM]%"XCI1p^sX.&RcriJ_CeW]?'*8aAYZY*V1)iD:pN%MImc7UJTkugQ"G6lg&C7*'ikh3[pVVWY\*`D^F-Ti(n%#So'^:&S3/[$-jJ-%\&AfT$*H6iZRWfPpWE-R:/TKFK1(\##ifsRkd3i%YLS3(B_+!%]MHm/`P9`j9TaAXm05FCK8.Y1`st=Wfm6OsDufIG!`2f0G$%o.%"KI'pU!Kt<!;MY6!$GJM2>,UN+DabpeP!fp?H)IJ-<7,4WO!3uVpak4^kuXlg08$'!FM0)p=[HBb%BZqJLl,2RY%JV.OeCbmE2T#%YYCaO6X=pe*q@I'j."9e"upA#ijc;JA6W43L>b:J$7a.:48$@WIcT9ch[[Y4Cu4A.jC!(3h#>3[K->0BTfNdX!#niBV5f>]("WP&%HC:S\^j!T":sLb[^eA?uLsF.@d9sJE][4Ve58dQQ'hslM9Ogq>@tAp4&60:E_]W!"7ck:i\%4'X*siFE/P7o%!g9NuAAn]@<H>.J%4PMR[R`PS?0"KLLS,/*GiXp*>RDnZ\-a,XaK4'VRP2*/M\^,!s/sme+dorNV$ZgegSu0\1)r,cB+LPEa"CQfq*R.=kW8Z([D2MR>%6_8,pe)PIUWK-qOCK5Z]!O=&EJ-&=j"MZ`gd:6GD*&PY$'W"*:3qlr@Ob7uA6qf,G=4_\?b?aU-Q_kUt?_QZNl2j+&jKL/JS%co(%Z(P@:+hej7F8i$u+S-k2,W[Gq">A.Gig_HA`M$,VC*R8//R[,lJlFY#",C`;$)8f1Mo_]:GFBA+]MsG].rk&08Scr_Ra88NL>-J(%M2c9W&5rR]5`]pM]f!2#d8/#,?"VJ\*S4/*en8a=X^ifD]'pHroP&<PK`Eb"(J=7tVN]U1,1Sh]@WqjGg=R\oNqr$i9!i<A.G;48%5(PhO#K);%^50bg``4"ojjR,Y8L(WEk?l'h!RR#*&!2A8!7L8h;k?ksSXb+?LPlJ,Af:;-1L7]:%sTh6`8=E/>GPaq43&:24o,15%11FJ/ORDYi\5Yc$\AVMsY&"+F>0,W5D&t!XVp+:$fMg)hdP2iK-Z^;m/-VC*2'@iZ6G1?UcQ^#kD;a8[KO4`4A2GKf#odb2ITL7W%*W)r'H?3s8E]'*Ca1J0s9urQG0!0VQgZ/!.+e@\sVfk)U#7JrRE2s>6+)ed)+%c<R)+GNg'K+AQbSX>QF"QMin89#6h=-HQ*#F-G%8rkm^M!](/kOH2SI*IW'D*g:4c^15[C]H>u7tWGP"Lo<6dK+'5:kg,1'tC_W9DBi>TG]6=#0nX$31/bgDR$:6!(W3RP(;bQHU"1U%TP"RGC#^O-C<"%4+S1mt2kb%./p<*p$@pMoT^rpjfk3*:Qpmo"&`Kpq-;S+qSQgaZ0YW8Zkd]NPMtH'G:TEd#m`0o9!fjYt]=n6K%VO@;TBtPKsmtsWF7=JRHW0FJXX9VRZ7STg30.2o39`SE&kk]gI=>ciq!WM<U<hF542\SQ0/"g2]!]jR":ij7n-HPaS!4h>Fe:4.p%gtakR,rlV!0*qDQFiH7WV$"N=&t6!3)RokAkaL'0ElO?S$$KeJ=?^/\Kb@3\"9Xi;GF&oV$\1GcX4sBY/!^0CXZ1kT^*Z1_>+4[n%X3;.HH3,00Tec#7ZT-7,h6X%GF8d4!I!ITZ.(Fe;LMZf[dgkrnpa=Iddnh9OWEo[Ti(>a4;*?3A@EH5]=Z[P'kn)S1QD0n-IPOn=%UG@hd:[`IR1H"1qbiA>G5lLt\pah8V%9+*4hLN>WH9[k>d:@D*I"D$[RYrh<L@nNRPNBA#IYa<^FE-oS`<NY5g0?p-Elim=5-DUJ%p+(uqA`.`4JO=L^\CQo,Os&IrX;KG(E\UNl\H,H(LC+XXVU?9ZE6g,68>uEb0Vgg^P%3DfWg[>\'g#g(8Val!P7t;:KOCA9?]aMY%/EV9_ZU2>Kk/a:D:J@DE;Pdsh"4L\)Z'9+o0$Pb,=D9ug\kbel<N+CsV+.JXQG$Ma::rD`JdM*$"i0JF-aF3KqfU"Fc_F*0VXGeQ%)N4/)V+etfJNBfEqN<U*UffZ__Sq0Db3?2'!%B(Z@YD2s%Htk^Mo3nlF?8Zr45-&ge-VWm?m1.-KE8oq>j@c7GS@5JG.*u/?4HWu%qCatII8bktYrt5APfW4n8n+=LKUA2m5]3C!0f&-LC,g__\V+=l=%\.9il/c>"@hZL-rF.WbsI8as$3DES%'^`$tVA1p"/'EH!Bk5%;4P#W`SQn)FQ>LI,]Kbjb0UH[h^ND`-KO+5e0ai=@t:m:cHdIB:F[:>jjBrnMM/VqKt;#JM'Z1>1[/PK<rkjS0#[Jk52b\1,3;K(%M<So?<*:Em`Wcj3jk;M``Ga8sBObXET;5fY^Z.(ljih,Rh41Egf*#d@@&FcS9-Q4oeG[U%Yf+CUoJdi>3$.L?,p#Zr.M.2^!Y%D=%`U<r_cN["_k15e="*:ojKGY8u+A?sF3A6aF`Wb\r)pl7?8BB2uL#]2^fQ2%p8KgIAfhkEO_(f_0\p9aKlrE3ORCEQ"]8ec^B9g*F%ju,A`6"Ep)r((2qa!4i98i"6=C?9LSFqO9!$(1,t:lf_Te:$T(R^HJp7DEUeF".sY_S:_*6]u8\FE;TP,TUFu]\4qeK&*:mE\Iln%X6Vck5:+N\\r]qo0l?,&1orHC`C_2%:&%nQ2E=l_X0_#rF?C'lNuE^sA?&2/qs/2r/ld\b2S=WU"/"QTY^kC-%I03!B:8IIY:Ikh%I.>(\o-fIY`Q]HC3ti0c$e$NOT7$bL3blPG&>P<>,tP!%]^5Ep.`3ArJD?[.m8=P+3AoDHD>i_nFQl>cnXJWomp5A1_*lW;l?30F%":t^s)bo_I`'hmFM)Z"gh7aGa#[(,9F7aubH1HWUg`T/F6ZWjW9&jLEMDhJ`9^=R%-rF/"ZAWP?1:d<g7oiZI>&Z8"Ec4%<H3L6_%.mA`<<oo,Mq^`d[or=6BS$K^SEnRFVB'*?1W'`:73H%&Yen_LW*,T;-_%$4*C/_PJqsuGkrd/K8qX.emh/t_p$?.<#!WGXO\jm^9%D?nu&JF44]2@N.E.1+<X9;00l!9<;H6<s5;YfHmU*.;>*'s;XS"gharckO?*BF,Gs[<egN/KePM!"f2lTckF=ErhZo!`pl'6%6Wl%[3/,'2Wd_g("r4Qbsc>Hl&)0SW1_u-CRGbcP=r8QqXc8p68hE7H;>>W&A(IWq-d@h"LB51[^ZH=O:^&s'rP,+]IIoOWK:#"[6\ja%B!DA]CqB3M(0$CK$jG71\\t4ESb;\SBQbaoN)$:u`\Q+F)9LDI(-`L&=n@7\+8K4jO@HM)ZD"'N-O-,YU*5]:KGZLi3N!jfF#f/N%RTo5R,'h:C&ZW/d!IJ3@I@!?;'VLe'F]apfP%*cuX3kb0EGlNe`O&:.Yj"ac"7/G=)=KHjPF/H43,Z/-VKj:>V%]BXR<1(s.323?%C+fS*)iZ_X38rrB4D2o\e5J`4O'7":TJ&DgkXT1`92VX5>(ph;m<380.ATgm!usXVQQ.]BO(_6O&3<l@T=7_W!O;2=C(4PT7_1^I%dUE=59Z5pRUs&@4&mSFWb@?nNbBncPr=[iVX9+Y:T?K0@1">U>Assm-"_beZ>h-#9M2]hCM;k5p=RlP!6LQ%6[B)mLGeKW#%dh"f%D;pB`JFkRAmX75Z-.g1W<IVpoZ.L,\c$hs;RkO58CEZ$O_V/ZZj>%=.G&sc7N%j\sXgBK@ATHl;"]Jelh+PCWlZ,Tu8L,r@fB)(B%,KUA\%dm>c@qN)Sg>%3p*00fh9rU^flnu!M0S'a"OdA:k-^:>"X2sFu!L.+cLkHB7#8=S0*Uqp9XIS&,/CB4*]/U+O2_>m<5FBuE%H*2FBZ8@F`7,Vt`k=R<roh(OFSM;Fp/sL(j[59F"TV*85&M>pjHRQOrp9C@(j8?MijL0\m=r\rbfR+-JcF,1Z\)MUNMj&\MQ6F\E%["MZ&+q5Y_'=1d-,*1a:7Wi+7EQDVp+9@G^;!6"GpVg!lb?1o_Hl-X&Z!9m^:5;f6s3duh;hH'd9j.6!!)l^S5h1JMq0mfY,ZY"D%j9@k);(+<N]AVu)C);fYkAXZB,udlh=2^b5:aR>fFQN@4_`/H-!kTUbBK4;jQYFUM\KkL]YZgYCjJ%Eqmh'(s?.P\^[fbQ6>ko"L%SF@kOPFDWj&s^?jMe<h;eN.t?9jtM?(*ZY/mKB=cX@K,HW[i)R!'pQ<9C^_`!(2%b%g_#I!6ga`K*P8aC>4BV86/!aG:tsa<Lm"C%S__!\06HK8J1)`Wd`^@rhpfgjF_V"]Y0`BXh%_h!P+mMs>mcar-QN1=$X&5cOj",D1'qI%NGR7umHtqOO6F#9gZ/u39"^62d;[Zc%q<jL(#H7,>9Uk&s.,t;4-L`1o^>lA9\%1V[-NJ2Dcth5"&&0F<iPV=A>>GmW9dV3(0-Lb&?loQG+)!]NbAJriHA<Tq!7*4IZD3ER%.SYgsFe&$XFBT(Ngp,ZBoa9.AD[)m^1%]U9/%2Vn;-fp68pc"rXH;#fr#TR=[+S#Xhf!4/eUoa$HutmLjtUVXYq,Nn:o#,\E7?1t%=m#pfp[nbZ:G75F9:?:,/+4ZEhob,Dk)oUZ!1:%JPH#KqT\4-f&411'E6uO0$P?lE>4>4g8ge@P)(=?^)59fWnQ';Va4MV;s5IHV%^;I>E;3u8q\`2?G@[?Dn+IDhDoKJt"qAoY2<%bI)FXX;d87H55*=i#83%I![!8J?h.khi9J@e,G85PH%M"=s8-fBFe6%BYp*b)H(%4f#lN!p5:G>TjN3k<&dALn@4*\QN?\HerHN4DPMrW!jd"AhE>rVQ.?T.t@u"`+e7gnh?CA'.2A$Y?-)>clrN>XD)=qrG0V#3YDcB%Qi68&6AsF3GR&>/Oc@uI5htJ,[NQ<9!(_F_@_Oscr'<\-:Q2n2PuNiW#]F+<d:\>B#Q&D&*[FQkTPK^5/^s+4$c#^M)hN(%ZMM_o%7e(647C.ngp1V+Wp8$!&TlXE$lU,kjf0^,O5ah(LR_BFH60jAHS'=.C%cDo>Ad+]J\e\Y;<JU>qi;QtH2)V,7oq6!cWN1o_bC\ot%?40)-R41&NRG)qeb87s!2>(9@/1rHH"51rHL#/<E9dRRsaX07,>Sa2H8kXQ._)\;]*(B%mIOc%G!J!#Sd_0]15b7/@9f6XY^5\+#%T'-1L6N%j9f?W(/4357SP+#bFiZ9::3d]W`=]p/!SXr#sX32][SP#O>c"*Y08k9#N:8BfF&-@=":-7#X+lIQK,E!/@dXtl$.ichV%c"Vr17p\Y&_%u8<oFnI?o*LN`pcL9<1%&W,3ClEEf:C:$g*gF`).Q'21\/1gGftfpA]:u'95t+^U"sdO<%.PC<,pcc&1\37(>T8J%r]S3hmW*X_q50+<pUC).kb7'!C!!GH9F9Qa=p#*_M`:ZL,@5&nB5]tbBYGnmI6!I(MSUXZ8jk'B]sI#C+`'S+Q?O;9P""HT2H+AH%oPXCJ*FsN+&Sc+?p`#6YgJHnd%EGrKa\;ib%&_jZ)f6SLB]@Abi)8O->#dhs=eJ@Wba=d(Bg!48%;/m$T_3u<oMPZ8-hA*kj"E0!%-tunr*Y&Yi"\@`8OtYW9(ZEY9:8_0GO][Z.9+KDJ0TiTnFA;U*bjCiK"cOteO;gf4!1"c5.MGNA_1J%9M'PH8b$k(E[9d;"i>kS<%'qN.M\nrTX:27YB98KN]c?L6sG/W4YQ&kQlck@c2DUoR5jT(7<8E9arUr7;TW$"l)1jceFPC\]&A>S[ugD?)/(]e^\"i>uoJtLAb%c\7r"FVrTOGW0glIa206G=uZ_O=<cAhpJ;m!%;>?;NsE#Y$b!hIjA0$PYA(WA0i7Lde<R5a(RQIJ*]SWTch]G.2cfS?6^T&5.ER#%qPr/YVPZd[8s@L83hng)0gn`AUkOU:[;:)Q[q!EsHo[X?kD/EeiULt2O^UEO*H>hBD8eO#Mf;]a+d<c+O9%U4/*qPD<;-C2FSpZV%>nG<;DSbMdK3JSTXFLA/.bQ.]pD.u'r07+(BDQ,^-geC*,0mh<PPK9dM)h#B[fEcTaMukLP3"#%>l*q2q:XD0U&,>9phriKO?:W,%]Fnf1nDM.][(Xl'fnr/tl8#a)3kQG>!cQ:"<JcNT9:<#A_0<N,kfSWYPpI"2G<q\["R^%bR;G4u,Lm@3"#.,)'/sP(?4Y36:l.M8%EoZ?c2D?>Vrh4,s0d,]06Al$(So4mtfJ"fGRA1>>,UYFa/'3+;#@pdYM_N4t#)qek"L(JZio*03+qMV>=@1eC<iP!c70>ULSr?pr%l&Lh-$Abn+8j4dUGHM"F)??;*!3h(9!#UsINridQ,:gIn61og[GO&QHi8$CD,2+RLZQeYs%p_c\V,)U8G('3-ZsBr6A?Zt<=8<d\%D34Vs"C.0&5@XUM!7MK"#g6]$baFZi*O)SOT,Wh]Z`5_9I\tg\[?)6@ipi*I/(0T#Chl)]-il'QL#OfAoEaa5Mnt-]+k0L43g".o%%Y-Q$?f+V7A/Q)PBoUG+*ipe#!d72:P+-$_*Y;AdZ;gXBfL/8bcY1UP/4H+oc5*4'__FSHVA=BGOG->75J.;M"dUm_S[)5]gRC,%%m.rJ+gSS3>P$]%=)!%rdP1D?jT1B\%s"7Z_\7gX)Ob%I!5NF'LXao6EFEBNG302d#(j&n)fd5^GF\MTrNkojs?SG^CC]PFY*b2Ud%p_Q"[!O47@i_5%+MHY1c1%JHY0=!VS`u1sPQ&$K6W/K&e87O!sJT0Ysjk82bi\B-Uf(%?g*'7>39;E5_:_:054M7QQ$6S^Fmr9hW%KniC+Vrq,^Z/#N!S2+i<_6Zm)Ob"qkKS@'&P'j5:aZa_boC4PiN8-8GVsJLFdS?4i?caR"+1DJ\]8<c7!lDgNnG!&T"00?8Ac$]Y%:*2&q<V$?Y@Z6,Ji38,YhP/Z4#Q!MW06ZT_.#MTM6p=(d*[`\l*_8T,W(YX/a/Ft2F5]1@4%Rs_)_ee"hPTQRPG`YqXij.j;"eb"%Nct(#9f460h0\Q+83'?hS.WReLp)W[Ca!n@I/hp2YaLrL*u?1u^+m>+Qd;7D=[@<BcadV9#EarQ0fC;JB\$1K*'LRI[*-V'Y2QI$%0QMB#!#hHf-U'__C/r>bk,kNB3+cKPNu#TAUp;B)j4NtkJT0=3@&nEunklm;W#OonSG`GP6/]+hWPjQMeXBS@BTTF.[p!J8Ci^C'%+O7\uRXRrF+5RB4(6Vnjqj`1B9R][N5Yrl..9PhSFIs+p/Aqke>b+O-B^IM^j#j^r:V5/TDYcOK>\#8[=Y?QC27TOYZj^;QOhi\9%.=IjE&le9)676siagSKqmF=cX:L^:X4"2YY);*H'4C%A>5ZQ%k5fEk(+RaD7HW%Y$FeNO^ZB-&;&Qc\0-uYQC,hk?bAWg61VXiE8%MTCm2Zq3SUCT:te6p5.+'i.fThpH&#k=Ol^3bJ!pUEI9\%A>YW]<(Cee+`UgJn5\%juM1N)"+LiO5mo9^*SZ6TWo(`O&qIj!+7u8%^62(Zkn\9Sf6o;PZ-chebGcC:PmlDg!l7iB3J#PdZ2g^SQ9-+(1AFmu(6JH(*+f/k;a+)#Z;1nW4_@-%KK>tLafB2S:d.@ZoT2Z[%A[Vhj!K8-?BWAXdP,t@YbYUq*Y$%C9pK'?k#1hM;rb03>WjO[RT8M5)4EJa>)-!(&ir/8W/5kS9>eZBQL[+ZeYs>OVGWo/a&#0Ct%X6YCME9F)?+@J7f9a^X?4%Y6f3*GW:&2"?A2&q8HY=f?N%_qQiU%YSmi[s:A'.gFhoB*F@/enqPTa"M1=YQc6M+*V=g-!)\$f*'M%NtSe8n;j;EG<HH%/2@halac\6LT*>53Pd1!I&GMT)VU>I[p\p"=R*llj23HI]Dg*;,YpDF4*LRBpmnmuqtI9]#+ZCKU=^=f*S6gX%dZ2lXDQ\pCK@pZ^W2t@Y*#BF-8S;[*E6.;m3/:$R!h&&#jP@^OT,(ZSSWC0o)%hQIE*b:d9JV@i@"sNY*8BrbY59i6%l$e60H:fC%QQBK`a@N1rCY)4Vrhc`40Bkdb('Eg8]IE.IL_'6CB2sSfCF<1MVA]`Y2PX$81W'N<'<JMCD\.]&2MA**pDA8Wn?2E_/=:=qh7"ut%T#E^?ht:F`?q.0oFP8(%bGSaXe.GDnH9QFEfi#R5aUB^C.68hFe:>+g`NCV2/],)qV#`?<j>+92+B3/d4k?W,lY4<m<H4kiD.EbY%QYTM3*AUDu:*MWhPW0[Tlri-ihRLTl!J5I\a&kl5q(7QqgDp<-'6XL[hoF5t(-g>a;*;jbm^1jSM;Z.?P5r!ghVYD\`:jL00slC"%&tQuU$fa;1:8^1(lP<,LJDTJX7g(i6dk3?#S\B!m9m.'&X-u&'`+'d@YS_%OFNktnAqAc;r/m,[??H`,k!IGC/Z'A6VtC?UCj&/>%<+9@J6D&Y:`+&LW-P)6?F>mL)0^1!(/i3J15k^_@kTR8UX&B1b<aYDm@kL]Z[>GWFX>1T,O6m]85qT+Z@eG`hBH:/YV)ijk-JG,/%1%q<b<97X3S-_J4KK#'s+<Obu*s]_N?10#!9)teT!r2W^c.\uZAhInm^<t6-Hg]3]0m>oa<Hh=,Hil(elRg\=R)[C(Z"QQgf98VC%C'IRs6.1D=(J/$Y$R1X6]#lKCa`Tu+=nk,'eQl=N;)YPY#-%-RZ>&&Dm.i_<]cg6#Skt&Z6=R(/n"gTij13a;hQ@RU.icNO-eiB]%\@n6j`^DKRAp5e4J^d*<135Y[D$@Q9#h0%gcXq^8Ba8V5OnH5XgstQXl:-ZAIG,<5^Y]KQGKg9iK!!N#9jdCdG<o9kUZ)SV&]%@Z%QES^gAsZZ`<BZ[m\k4e^P#s7H6*H3rE_V@ZIj3(t/`STU*>A<(/rRc-Ud^/MBF@Y.DSD]Z`&#AJQ1b3\>[s\E=B>76@:Hd!DKHk.%3Jk.1A'e+QUqkJDFtVU;X,>;>-l7U./ZZ(&XD+Z$YU>l1_34H.QO##m#9KlBlDd#)*JHOTdGXNNFT\&3Q!`ED6rH`k?Y,Ue*(;#9%&V.<UTlq2g/AQrK;=C,@N$9f.(Hq:f8,n7dqbPhA5Pn6+q&fX[hu1U1rWH!GcThI*$bAP#\,V"ZD[u75)P-PerE'?Mj6Y#7OWb3Y%*Z*PR[7tMO`"MM"Q;5:rCgkLQI&g@X=lJ.1MA$to@^d>29W`q/XD/PBp!TNeHlZ\tIa._;,?)H/32Y6<r84]+A5+gIm3BA51i7u:%q.=fn<.Z*.rMJJ$+#i>**XJ?\CAdS*o'l2RR-c4NTrEhEV41@nj44ub_Qd5;n^ed6\Wq14ro#GSBji@fn`oU8oQ$Sk3-k8/+jRlI%hJY&>)>EHt?8'e7=q\J8^J,8f!j2XsP&S(nQt;;%bfrA-L0l^6q_n.0,b*)-^1GLl=3ZdQQ$t@#jsm*cj#-9gn9WF8)5e:1j#d#6%VB:=poa/$A'?\;;Xu;E&\'991np]Bp9#(,tXYs4?(V[Sjl]$C=]8GE<-<qc!,%<KQO:\Dj=?BI8LY+W^=f'ggi0"[H?*>.=33KZ8%LE/q"\HQ'VIAd-t6br&"9odMmL^fK)^2R<SQfQo!_n:!5O.r)4gF\fh0,[$o[\f%$]+u@d'J['@L<S4F$3^1Y%YWZulATuY\N*\:%<9EH(d<X%J[_k"GMd<TLNo(_"oL37Rr12s5-0fY]Sb=he00+SugP;fCah^d@(1o75L>95BP-jcONR\TbZKmImNMtXOa1-Y=:EC&T%F*V6hPJdm8AqC3-KW'rr'AS'm@JPZ#b%U0O'n?HtG'*880:qF(Xlg"piqr&^*e$>JaZ2A^F&(CVhqkXt+q&]%7$fhTqM]K83T:ES%rdSNL;W#:A[u;;B=@'!IH&6e^N6cm@*[n2`qGDHRgMu`pkF#7K\%,`)A"=I+@Q87cMo-@tkDD1WH(?JtqNS8D9]r5[EbqA7IR+T;%_B!.)QDEVQS[KejJG,g4EbY;`K5GWE^ne[G:O^n/Ol?62UJ.DWo@cLDpB,*="5iW1M3[uE\l!mCr#FCce/t@V_]35F5D%GsEs\Q;%+$fEFH,8(9qM=LYq1lG/=gli'Hq,d7BhJ?ehu<R%&/6,H<%6gFH#4WLs7,K,L(]Q]]]C\7pCAGInB8jnI<jW[7M99XB2thf\$s+t%qlar0e"?U7VuQI?rNBCQl-k-22>obs.$i7Er@:)]WaF!tR8A?Dg0b,LWUV9bdc;cp8^1a4N[*nsJC&6*_t93&I)VA841Ep3n_?1K%!qqlh89_Dc')2;%1OX]K^G5FciRhKJ>%/BXW5*"(^f-kU0>A[fi]`8B@UEh4BF-GLeHT_WfWhNa/7;iLJDtHoQ@6NoB>T;hVpCUR%4C>%KrN6dhY30f*ge+)5JQ![-"jd:S1]WkN%V>]eS_UTR2X=A^=UlRWF?mL,oeq6)h`]9V?,e,WQQThR-(X]kp4Z:u2n.,lgY\?#%O18O_Zro%2c>io)V$$;5pa#0;+-2%E9_^MaZh)Ec<qgN_?jk5\;Qnk,/hp3@r3D>:99:)?J6)tOl]\M1duL'bn3XZZAfB:[O5u.G%br/6-cdPmqo2bK*="7;)_!=M8Cc&3;/[8u\"h>o95EPT?^O,q"Vj3M%n[-QrD6l8na>udQ+a5EW=#^5`YEF3=D5Je(!3lI(>k3=4%9!lJli[;Gp-*[kYa0;Ht[OEV!89k:o#T/-FD41aQE>Ej25<P+#pO@1[r`;3H]aYWPMU!:-<_Ju!8;G/]Gt@oJgh-9q$*ZYhg34Jq%\;/d7;DM%EB!(Bt'C!B*<H\Af6?`Nt+08`6OIS8F%_7Md2qhN#ZUgVJ]*J2tPnkSe(++(-r@9E+V=m]#U4.GS'9C)^;j,'`LA8Y>%+4'T`oAj(OOV]f]?iGi\578sm:cTBUOS/85J6'5%#uU$a$/o(@^1kgS=Q3c#Aq!Q;k%r-oIC,@U5/A,(]6=7f$@fCT\<dA-E(G6Q%J@MT=V5C=<:<_6fFTM!U,1&@(W!n3R<8gCo:HQ\BiC?`?4!99^&X9V%$G,$ZQnaX@[kcX:4G6PH%7%8G:e[MQ)%>b6$diaud'F-k%^RT4u"To8XC%hE&/]%pTcc\KGm/Z,d/q@lERkH8Jc`hN:IY1"6gd_a<7BIB9O5p1U,[Oh#qsA6Ralp6,/)D]uX+1RF8fQ^Og@#-#%-Q*g.qiJM]p%uI2R6`U;fH0i-g4`E0jBankoNOm&r,o2No0OnTeSbU$d(0%UOJ/lGN]R:9g^1s5/84_4$$#%d;Ci$5@?%mU/W`Fc%&4S"--K;_!O^F8OSbC.F6]qU;7R!HUbVes2bi%.qq1UlABodWA,dWMnc]);Ta7(`*],8HcHqgW-3<9Th&$M/6^P\:'%A$-)gT,,X%KtJL`Mqm0MTD\bIhu1Hfg%AO3*iCr=T"is`[=@o_=[2cg]N:t`m@.Hg[;KFulV@3#IK8c)5F_K2c]e/W2AEX3J+jO8DLO6,s75k"%=<dFQs7$;'"$+XE(-+;Nh[Tp(iTj/b!2%qiSGT51pk;at!O)upc)%1B^V0!`)s_\Fq,0]'pP0&8_65qFSM-XOM?<Cm!Q!%YH7F#L%3,]^!-OS=.Es#e,^cBcf2C/$Mj`l'?]Rd6._U!-.MYm4T+l+jY42@iY_`"(&);P>e(?E*r^Lq(iq!dIU'0q&=a6`:)pndJMo[GIK%RQ&js!%*]ZrM'ht`$^'cT?"Teb&SV^i$Yp[e9[B.70VRdr4Rq\oD?H(.Mm197H2$$ONDbrc@Yi7Kjo/&c=`DK/E#jK5Rnc7o@7GD%F:i.o\`3mK63<e:(:7H1Joo&.MsN50Rqg/JIuISO1@b*CS-/(WScDN4*j`mGYhmO47B=%nR3`Ps!mcquoBR(hMuWYP=.HE;BrHDb%nkaa]@bdiq^WkM%&cp6]eWUC9q<`jVV0rCI9SY"2Mg`U+86*5D>RC,t!aZuK:mc:46$3pDq$ZF'YD%*$2\iec^F^^*ZBK[h82cYg%=62Tei5-<GHV01-(%?YPmSbBA+[+s?%ubK@Quj-br\#,_)bX!mJ*g-//11aB^MHT#l1pJk+^1K'^*b$Ql.@R!;H]dZ"=P[E*-3rR%?k!O9'[a"9V0mR?Gp3uLhWO>c(+2<Y?N(*""<!a+qZ676;Y;n3,igT@isE=^D=eI/Nu*C!FbG>8#_?:B;7YMtN)10<>t%e\E_JJG%`k=,+(5t%.hp'.J-jGdmG)8.lNC&"?MP'=qr:,.1o&K2ARd(O;Um/g`]7Wj'j0qrU6Ef-og*%]83LNk5c6A@,mXZKkg9]2m(9#NF%mQGFuA.R,#WH.[Pf_T/XW5Ju0kSCr1])F9k'#u1Q\L[I_Ei)A]mYE`H.#5Ad.BpM2$lU>Rd@M1h-RsV&+nE2_),TN.9MT+IjAfKP%03&-nqsd<ZqXMsb=g7c:3=ubL'@8_qa<'`f'(>^e+E^rd%O'g%q7DX*fh[8[Dut=mS9hVdf850kpL+X[,^GYsZu?!V>t*JP7$;3V%-F8@hs'X?)(nIk8q&5f6WaP*Gl0(H"`l`a4m!FiDat#71DBUG!(p']$YUYf*SgcC4+fj;tri1"DFpmsWNBJu%iiU!5_KlXr3(B"d%JWCH.3e2sPfs.P5B`jZ)V=P)\4Gsg@/L'/-#U3*;h[U&gNjX7\+9bC)%j^DJn5")I/r[N`lT/5JnclE_Zb5lBfC/#pBa6>9jTjF,%k?3.@8L5%Sb=Nb_B:`O3kB#eE:>eaj<`Ea>aNnc8N,.tdYlr'tpp#B)V05']`RrWGJ-,i0lLD1oe&bBR2fKu20N>\XLSZ,-`FE5&%I0#/VhrW6=8J,n5*GH*E!0??e/An4cp6oVuU-6%AInWfmfiHh<qYED-%7YtpLc*AG82Zm]!]1F(ABu%Xep<^,+$[bPJ%$@iTDm!N%VJ4br:dk?N*-+UZR<[.43JS9;8XcahUEa)&?,[4I)sP1GZ*A[:.<V(V+*YP((tSkpg&f"Z(3I+CW/5,JL^9E_J"4iGLORKNhM(sZ%)t&j<](r@8+oc^p>tN!0m'KU+\A("]%-><6O*F=`&JHC'Sb/2aIs)uPM'Z*R"f<5i`X25q2YQDC]!SYFj=tmp7BJ5nr@R+'Z]lb#%F0qt%^a"mkdVbGR#c'h>p,*4$0rQoDHBl^e2PrD*>NOiY)Yl]nVK9Ji_LRYTqBF4^*4Li`iGjfhkn;*A9jl!sHBp5G6#VG,Qs!_!%YZjdDm,6jfWENDjL6o]F-rTTr!%UcRD^mgTTu1*<JBY#4\P.C,h^pC901kW1b"9Tt1p9\dc9QK<,5^2uW`d4%'VuJ0Q`FmkH7`E+%09iYspY'NIPbAsH=c=5/&q;(#Y.Lu[.bH8q2nVgsMRt&?a$T8P8NE$IeK2MlNVPQX^])Teb_Rm&]'WV4&'T+@"4>VA!1`)":p%nH%NjU'd%?be^.S#Dog_YCH4P<':APdL*^po=b7'\L[!MS@qSNCHXIJpiUm!Cj!krJI;pV=<&4:j,=%jVqf*5i&4iA&p#,UAKVpjW//%`,t\dd2eauHC@M)U;t_f@X0ub4m`EU7k<p>Z.n0L[h/9gc5p*#M_?HdhH6:2hJ(c]*Z&g_DR#cYf"MA%hNJ+Vr,#uHICjP&gFqJQ%Stl2?E,65n5+WPVJsM\:!UU!_Z1ekRJ)<Ej*4*Lq>N'\%*\@r#:B!`8T*M[9J;rqLi5#7#pUQW=Z`\eF9'[PE<d]kDloQ=->mDLa%li=nIA*VTmpjj&U+0LA6W%<njmnQP(57q3$7,gdY;)D`H#u`n1n);gWn>st4B[mf;h`\H22>T8?8,n.B[hWP:pDJ1Zr>0I?]7lhe%=ah_B-cc>@:U6)"RhD:(/ALiZ:8C)p[,2>lQSBW=A=/@PiVb*>FB,b'c1%:VCHJImOTn<H_9KMo["2$Pk;PZ/F(u?e"C`Ft+WAis%.[GD`TAN6J4eKO(**DY:mK)W']7+/:@B70NVOK;N0&Mo/b&G=)b#]TkPBgGt#*-k/M7rVnEhb`.QZ=(\4"r!gDZm(Sd#%__9inEi%.$q/X/i7m4(n+bX++dZpd[]C$7NEtNOEVG\ffObU^!iM7rkKo_KE,>dVVXd1:)_/[q)k0:FrNiHq8ulA.Rl]V.4NG-n,WE;]^e]V%")SbEQ>=L>49-T*?e@ui0.e@7K)mLT4QO.1"FrN+$i0VcJW]I#5dCN5*XI%U54a!HV%9Y4<ACJ,r;+t/FuAT'eR_hb@1(),<&$Sr%m"&RIJcP,''-!YRhIjmKQrJ\'*We@jFLR.j$0:H.!=<s\baf"b%it_ci6T#r"8_e\s+6X=c5Z1r./(#\!8*=m&QtL218\N.bfW-]%`5bt4^9J5ca-f>N#_L7L[#n&AaM(*S$3SA@'4P@6`*Qu)?-<+1QtZn'-Ne7gK_9?P[nF[s:<fjka1FbH^FYe,XkequKMpG$6oYN<%drLV%;.(RU3eloQhT$&0k.R@sd]UXG3.;.@>6QE&P[e3+6SZL=&gpaXpE&A1P[JaEH8Rb'ps3jhN8Mg0pmZRPn]Y'5i,W7"6R0S4%M3)'7ptZ%97)MKA#7naK"&.G"J\aW!*V00J_CJa;QtNHCM*N29=q)FMWf$TL[]s9/q_'>Zmu/]r,G2c76=1i$^<tad*bTu,#NcQj%JP`-&"T6*9O'*#6+5DXtnjdR;q5G@dDof`hFpu)hr:44YVI2jQ"/C0Qh&+s.V25`84>qb@pJ[<X#M-hUM_dAWIE:H!lZIZhJRBj2%/Ln56JX'VVh<.!d50j1`)lFgWfrI2J-u&(aqMfpGM3'6*"3NOtb[44(2]r)/2?`O'7$YjY?#=WO%@HbO5d1k:SN8IK@\%M9"3V27%YELp9-1's`pq4T%6;O<8TAL[qBo+a0Umq'C=P9Sc1K(ihbk8_6&>s97^H40@I3ZIW'?K\gM*(P_O=3WYFrb(rH@'U"Mf&^feQ3]0%O+)Q4=S2NX'8uUkc5j*-?%*<<Fbd"l4G89XO%56SFTNJ(-c3-F;b+S,[ep%lSn%W;]@C._K34/)mq_8kA=W:%n,)C'qpMj^pVXIS%#3\?@#m_*Q`KC&=U6+!q1.d-%;-jCM7.k+0k]`VH";MUq1qM\F<P*XAScYT8)cot"$0Op0\Zq:K'j51`OY7)n.5Q)65V*/2+W(<X%O6tSmGi0J9^mUZIToW5Ffdl6?pOqUF3<4>8%NsObeVn7t\Pnq0dN;$':G:)rl-os2M]Y2H"lp`G'"+;4d8.L)_pnjhi;78%/%>nM%f9-L;C&uBk/XcbM*M$Q109k`8bC6kb7FIO<J0m\A@#:*fS;BUR!]YUk;W>RMM90\-a]$"Y4*W8Rh[fe"QAkaCRj_$Caij`89WunV%8!3\hO5o-mLaX^9n&Ir*0b]8RSf8"k[rW1L"-Bd?j&7.ba`olNMrEo4!e]c)^;E-GLpZ7mhfXX)ip2RUm&CD(Ho\H"c-d"`]-EW,%+e_o]_=6aOmS3,E'lE2VS=c1gg50K&Sk+fCBN'ISBb0QR8X&Ci>f]c*Is5?_qhaMH:*cF.>qU>.:X^L3E=@%.rTu<?[%^/rF<-@B%""@bd^rZ\q[K@.AR('ZuZ=!4SKKq])jr93mTR>Xk=pS3l%Gn$>&.aG1eLN$,5Z["MmXXks5K;]L%0;ui`qP2C1.PM\a0?k(8J?5a%TG,Om+'qWaafRRe00r0jfhH^bK5!,\TKm;p=ONKL^L]9B7N,_fD-tU1MuC<04M8t@-R&)Dp@RlRHiILu6,lq\,*3Ob)rFC!6#sKE%7[LZFZdDChZV'1l+Xf?Fk/%P.@,k4ELc_S!FWdV--*,P8?=+tS]Q#94o0uV*Y1L`9Z84^b=/'k@Xk'%M<V-$Aa8>]XRsm1)B"T`A%++64)DV:C!58gchB>g3[8uH%tGa)^0+BB&>iW.t=PQ$5#O>g%XCjBD_*7/t'i1;Pn'MP/)?9OZ7U)pg;4g<sDWlhS152=b>e&!c)%2+os'JApI$'8&!s"5nRt5WkY=,N7(fJ;?pAcR/nf_6Xlr`K^reqgg;*n]&#@pqZ5HhIkH<ZL8o"VL=fC76,DCIXZVd<9lPqq#lR'%n)^XO=/m5:,-741Q<`mqb$lPjFJ`(X1h?K:`'gcE_E+LQK_(rkD)c_fGQ!PKCaNUsdr*U`lUK6>d*%nm@p]]siIP*>%+cpAXWLX\%:"I13OT%i1A&q4Bd3JtqFLprsQmbI/&:dBnd/f>es7rDlie"G?CPYPQQp-DCGWAO4)p+4,AE<?Om[Uh>c5PioM.IZ6-%o&*m(+'b%2feV!?t]N,=OD]%ESY1uYN%&LW:QLpb0\Hl(s"kdSAq2Y*gj[V'9S+*M,4WIo++%Q+(mc\-=qn?0O[E&d+%!,J7LCH-clqYd@e_'%J4LSoOV&"hhN:ZJRad!X3@IQ(_qpMl>lf=A$,B"&d=>&!8\Ja&cTpPR)ap:*bIg]Xo(``t.a`HK:m6kQ7FT)u6/o[5Db+X/nk1-!%FCt'%EDQDq`6m*/EW#KH>er`S"H#^-ZjiF'$_T*sMgQ9Cq$SH(,;8<4m^aP0AnY,LNk_</6Fn<@@A7BXBqm)t`$=#^hI;O,TjL:B%>UMu3q8TXc/kqE2?"3SS]k^%Md,,W[lit0Jf:N2#$X0aF;>Th`@Q=9FW?INq!*82H<BQVjB$e.b72_nH3tY[e^nqgPQJqY]iE'nu%&i]dg1Xf%Z#W;7'67MOc&MC.:c[Q%$5Kuo%Gl](LooaJX%9ujFQ:polhEiCsjpR<C'%FKc=3>4aMHL4jdZ"a<;fr[p'T?4&I`(Yg%+M0G7[-gO*6$*\s<Wk/,$C&&1"$aP;M"F\[)`U/$b1m!IhJhUcZ+.T6UYDEVQk@d9cgVk8h6n7;ntnPq_EibIlSml;O)dZ6N6&V7%B:GeK#VIh:q*$Nf]'*H1jHhf8H=#hE!YT-;?q>6[REWNS2CHrERr[2,f%W'*ig$(Y5f`k\d_P?^h21S-_g^5K8/<V4*2X6d,k.SH%/uHTiU$qc,/d_Y4+=Vs0"K7-V+4]$T%%6+ch<@=jl`?0)SQJ=8jFMuRs$X0PKuBoa8Z_dT-sd]F$K#4\?u&@\9AFL>mgm>$!32R7%TD:[m:/#BNS$A5+7ePrV#/+ADFX3-EX7TV#&u0$4<]"I$9*sZDZVciU]Wjj?a*Tu^P0bgL3SEKGdb,3os"Gu%qX&2bCkHcAV!u(Q%Xkumtn,8fEC'FcmM_'e.HXW>:!T?:t%Bt@4Sg-8Q'[#>$dfkI"FIbESU[.L*Hb/Xnd/+.&UT#7g2tuY0`a4":n-51=S=62[oK>#Z%rDK:%P:[NMi%)&ZCQ\<]$OnouE\d<;,BqL`*>iJ\@?.a5_B]8pn[<BsfRN+`RAhBgh6iJEZ)V72L>RM.VWN,JKC:"bA0IRpn4LY5%p"Jc_TcFmX#g`p-1PWa&^j=o"qcm6(=UY/-oG@#G5h[EbbR6&a.m4+04r^mECB-F7go(U33c_&Plc(VVl/'0fLqjKQ.!,_bR(JQ"%)\A"peY^XM\M]fNa60jODT?m30f:rAjI>.:#<#"(r8k_?P0e/['dtrEZIg$MC,j<8*6@GO@"?(a\$5T?.mG>X.3oG=+$o4ZKdiYD%>rRL"6UB#RchggrEU-p5M'mW*)).%&F)g2E[s\c?m,B&oKapXO`<(X65JMM".1a9$I#l1E-*($)0,it?gcuiX62XV@I8Hh-CBgA0%o&Pohj"aaB$5LW1*XJ]7P.P,06A`TjT_K-56AC3XoRhbD*]u"g9Z=H_1%KW"ZT5<`/`P46!>=`<W"Hi]"Y]inROUjlLV"acgd9qX%Y_RM5l90kCffdc7oHn&TSIem2:/5P"Fp7i<BS+D:LXC("B=YrQbr<["7?#1kFci*Zj1,*dK?<$(q7%NPTB#;]IIZ'C@90m@U3p?>%ca(,t+iu`Fd,G2+S9*Nm;X0sK3:F1Rdse+KQ3gdr<KKag*tX[mH;f8pP;9@\PB@A/P=jp-%j'lVpKk&RJq8$HGfR#!KLik^7cNj8%4>97%BA48006LilZLC?!"'rM[AmnLVXr;EB.XBnT:-dKiKm`m9]fr(N@W;S;PEIb,iET3!"l0k,][agd3rmTA*Xl'Fh(TMWlt!g[%HrRJ>Yfl/"@>d%A-^3''J[@<6&$3dTn#!&A_GneU9,bW3?l3&c9c0j*%ua@g+9NUG.q/tBFfP/b#]?fPY2:p*GT^rK-!kFsbg0)t%j2U(AYe3-.'8c#sDe@g:@-=*0quB'omno&5rF'*K2@BbEIn5]-'kI3OBH@!H[\,gZnE)Vh+N0G.`UNgcn0e5Prlh(^TSro`'>C_<%R$')s&lXP05bom_01!);B@`QX$mIEln_.:'X23Y2d)(%`6h<L-!-d\eD\)%>+h\N$lpT%mC(N@n+0k_@AO;7ZM0r&,jSUTJ/?p,P%au3J8MI=o[j#-2W54__t&+=\"UDOf#9/b-4ei_29(Qj/T+YVZQRK;r#OK,j$>JZKbC9'E-eGg;6NIcL<YpB#rAGk:KXW>apXmN]`%Z(^R6T;Tk?nkJqiOmJ?nl"f''+d+nNJ>n^)<cp:]-dDbh@A%uk&(bS&?/,m)=2XZ^Dg[Z'A',YbW:7Ahb^X*Zs4/g4?iB_Ks-J65%dpN(6f0B5o++F6Z5Q:6<It'c9Vgn`U^]2c\5PrX=:"Q;HJ,&_5J,#Afs8AjFrdTCg:VZl#m14^HgHY`1^V*hL+0Y_$0R`?$r1`Eq%6.p_Ah+Vu-MLEp]UiUf`,keOt)QSL?Auf-p%k'3J[/O;f>fd;T"N7/)1,aaKi!s?&@p]_):?+>tEN+9I_"qULTtlo6409%4jT7N!%ApWOcHM;MnffN^-D@pZS8?Jc>?GAQU7as?u((4YcrUQg9:-"N+m&8$h;\ro2jGO5Z:`+Vt6_-TJg-X*1$1.!uI)_/>kQ>%<_/?s8%ND*4@0B=W*8E+<`'iH4@V4q/a]lH3sdPn=.kQaeTF@1\JJSUdboK[)DrPDT?K&o%bW^S!kcN4XX.`*k"kI1[CZfa__="Yk``5_;7%^E`4(_K\(Q[fl8;H>bFd5=@#<r)H)iZbP').7uP<]*OACUTT&Q=;H&$5!*7?q7$S1kC"CgoIpKp5#AZ'Ho@FXeCfXBi6T#f"8_ML%,GY%WIsCk@?iKHkhuEQIJ,eUh^\meds6edXrT[Jakr6BSm=4rlDuT;*[srf&h*:r%s8D>_hu*KJJ,%K2rq+rpHMusSn,E+:J,[n=%rqP7">k3Z""nML]2#l+0rqc*_k3[X"7)L4d~>%AI9_PrivateDataEnd